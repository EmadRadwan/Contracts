// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241023093445_CreateDatabaseViews")]
    partial class CreateDatabaseViews
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.AccommodationClass", b =>
                {
                    b.Property<string>("AccommodationClassId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOMMODATION_CLASS_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentClassId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_CLASS_ID");

                    b.HasKey("AccommodationClassId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ACCMMDN_CLS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ACCMMDN_CLS_TXSTMP");

                    b.HasIndex(new[] { "ParentClassId" }, "ACCOMM_CLASS_PAR");

                    b.ToTable("ACCOMMODATION_CLASS", (string)null);
                });

            modelBuilder.Entity("Domain.AccommodationMap", b =>
                {
                    b.Property<string>("AccommodationMapId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOMMODATION_MAP_ID");

                    b.Property<string>("AccommodationClassId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOMMODATION_CLASS_ID");

                    b.Property<string>("AccommodationMapTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOMMODATION_MAP_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NumberOfSpaces")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_OF_SPACES");

                    b.HasKey("AccommodationMapId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ACCMMDTN_MP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ACCMMDTN_MP_TXSTMP");

                    b.HasIndex(new[] { "AccommodationClassId" }, "ACMD_MAP_CLASS");

                    b.HasIndex(new[] { "FixedAssetId" }, "ACMD_MAP_FA");

                    b.HasIndex(new[] { "AccommodationMapTypeId" }, "ACMD_MAP_TYPE");

                    b.ToTable("ACCOMMODATION_MAP", (string)null);
                });

            modelBuilder.Entity("Domain.AccommodationMapType", b =>
                {
                    b.Property<string>("AccommodationMapTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOMMODATION_MAP_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AccommodationMapTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ACCMMN_MP_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ACCMMN_MP_TP_TXSTP");

                    b.ToTable("ACCOMMODATION_MAP_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.AccommodationSpot", b =>
                {
                    b.Property<string>("AccommodationSpotId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOMMODATION_SPOT_ID");

                    b.Property<string>("AccommodationClassId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOMMODATION_CLASS_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NumberOfSpaces")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_OF_SPACES");

                    b.HasKey("AccommodationSpotId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ACCMMDN_SPT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ACCMMDN_SPT_TXSTMP");

                    b.HasIndex(new[] { "AccommodationClassId" }, "ACCOM_CLASS");

                    b.HasIndex(new[] { "FixedAssetId" }, "SPOT_FA");

                    b.ToTable("ACCOMMODATION_SPOT", (string)null);
                });

            modelBuilder.Entity("Domain.AcctgTran", b =>
                {
                    b.Property<string>("AcctgTransId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_ID");

                    b.Property<string>("AcctgTransTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_TYPE_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("FinAccountTransId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TRANS_ID");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("GlFiscalTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_FISCAL_TYPE_ID");

                    b.Property<string>("GlJournalId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_JOURNAL_ID");

                    b.Property<string>("GroupStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GROUP_STATUS_ID");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("IsPosted")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_POSTED")
                        .IsFixedLength();

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<string>("PhysicalInventoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PHYSICAL_INVENTORY_ID");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("POSTED_DATE");

                    b.Property<string>("ReceiptId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECEIPT_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("ScheduledPostingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SCHEDULED_POSTING_DATE");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("TheirAcctgTransId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("THEIR_ACCTG_TRANS_ID");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("TRANSACTION_DATE");

                    b.Property<DateTime?>("VoucherDate")
                        .HasColumnType("datetime")
                        .HasColumnName("VOUCHER_DATE");

                    b.Property<string>("VoucherRef")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("VOUCHER_REF");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.HasKey("AcctgTransId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ACCTG_TRANS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ACCTG_TRANS_TXSTMP");

                    b.HasIndex(new[] { "FixedAssetId" }, "ACCTTX_FASSET");

                    b.HasIndex(new[] { "FinAccountTransId" }, "ACCTTX_FNACTTR");

                    b.HasIndex(new[] { "GlFiscalTypeId" }, "ACCTTX_GLFST");

                    b.HasIndex(new[] { "GlJournalId" }, "ACCTTX_GLJRNL");

                    b.HasIndex(new[] { "GroupStatusId" }, "ACCTTX_GRPSTTS");

                    b.HasIndex(new[] { "InventoryItemId" }, "ACCTTX_INVITEM");

                    b.HasIndex(new[] { "InventoryItemId", "PhysicalInventoryId" }, "ACCTTX_INVITEMVAR");

                    b.HasIndex(new[] { "InvoiceId" }, "ACCTTX_INVOICE");

                    b.HasIndex(new[] { "PartyId" }, "ACCTTX_PARTY");

                    b.HasIndex(new[] { "PaymentId" }, "ACCTTX_PAYMENT");

                    b.HasIndex(new[] { "PhysicalInventoryId" }, "ACCTTX_PHS_INV");

                    b.HasIndex(new[] { "RoleTypeId" }, "ACCTTX_ROLETYP");

                    b.HasIndex(new[] { "ShipmentId" }, "ACCTTX_SHIPMENT");

                    b.HasIndex(new[] { "ReceiptId" }, "ACCTTX_SHIPRCPT");

                    b.HasIndex(new[] { "AcctgTransTypeId" }, "ACCTTX_TYPE");

                    b.HasIndex(new[] { "WorkEffortId" }, "ACCTTX_WEFF");

                    b.ToTable("ACCTG_TRANS", (string)null);
                });

            modelBuilder.Entity("Domain.AcctgTransAttribute", b =>
                {
                    b.Property<string>("AcctgTransId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AcctgTransId", "AttrName");

                    b.HasIndex(new[] { "AcctgTransId" }, "ACCTTX_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ACG_TRS_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ACG_TRS_ATTT_TXSTP");

                    b.ToTable("ACCTG_TRANS_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.AcctgTransEntry", b =>
                {
                    b.Property<string>("AcctgTransId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_ID");

                    b.Property<string>("AcctgTransEntrySeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_ENTRY_SEQ_ID");

                    b.Property<string>("AcctgTransEntryTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_ENTRY_TYPE_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("DebitCreditFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("DEBIT_CREDIT_FLAG")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DUE_DATE");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<string>("GlAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_TYPE_ID");

                    b.Property<string>("GroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GROUP_ID");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("IsSummary")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_SUMMARY")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<decimal?>("OrigAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ORIG_AMOUNT");

                    b.Property<string>("OrigCurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIG_CURRENCY_UOM_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ReconcileStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECONCILE_STATUS_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("SettlementTermId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SETTLEMENT_TERM_ID");

                    b.Property<string>("TaxId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_ID");

                    b.Property<string>("TheirPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("THEIR_PARTY_ID");

                    b.Property<string>("TheirProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("THEIR_PRODUCT_ID");

                    b.Property<string>("VoucherRef")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("VOUCHER_REF");

                    b.HasKey("AcctgTransId", "AcctgTransEntrySeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ACCG_TRS_ENR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ACCG_TRS_ENR_TXSTP");

                    b.HasIndex(new[] { "AcctgTransId" }, "ACCTTXENT_ACTX");

                    b.HasIndex(new[] { "AcctgTransEntryTypeId" }, "ACCTTXENT_ATET");

                    b.HasIndex(new[] { "CurrencyUomId" }, "ACCTTXENT_CURNCY");

                    b.HasIndex(new[] { "GlAccountId", "OrganizationPartyId" }, "ACCTTXENT_GLACOG");

                    b.HasIndex(new[] { "GlAccountId" }, "ACCTTXENT_GLACT");

                    b.HasIndex(new[] { "GlAccountTypeId" }, "ACCTTXENT_GLACTT");

                    b.HasIndex(new[] { "InventoryItemId" }, "ACCTTXENT_INVITEM");

                    b.HasIndex(new[] { "OrigCurrencyUomId" }, "ACCTTXENT_OCURNCY");

                    b.HasIndex(new[] { "PartyId" }, "ACCTTXENT_PARTY");

                    b.HasIndex(new[] { "ReconcileStatusId" }, "ACCTTXENT_RCSTS");

                    b.HasIndex(new[] { "RoleTypeId" }, "ACCTTXENT_RLTYP");

                    b.HasIndex(new[] { "SettlementTermId" }, "ACCTTXENT_STLEN");

                    b.ToTable("ACCTG_TRANS_ENTRY", (string)null);
                });

            modelBuilder.Entity("Domain.AcctgTransEntryType", b =>
                {
                    b.Property<string>("AcctgTransEntryTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_ENTRY_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("AcctgTransEntryTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "ACCTTXE_TYPE_PAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ACG_TRS_ENR_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ACG_TRS_ENR_TP_TXS");

                    b.ToTable("ACCTG_TRANS_ENTRY_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.AcctgTransType", b =>
                {
                    b.Property<string>("AcctgTransTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("AcctgTransTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ACCG_TRS_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ACCG_TRS_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "ACCTTX_TYPE_PAR");

                    b.ToTable("ACCTG_TRANS_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.AcctgTransTypeAttr", b =>
                {
                    b.Property<string>("AcctgTransTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AcctgTransTypeId", "AttrName");

                    b.HasIndex(new[] { "AcctgTransTypeId" }, "ACCTTX_TYPE_ATTR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ACG_TRS_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ACG_TRS_TP_ATR_TXS");

                    b.ToTable("ACCTG_TRANS_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.Addendum", b =>
                {
                    b.Property<string>("AddendumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ADDENDUM_ID");

                    b.Property<DateTime?>("AddendumCreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ADDENDUM_CREATION_DATE");

                    b.Property<DateTime?>("AddendumEffectiveDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ADDENDUM_EFFECTIVE_DATE");

                    b.Property<string>("AddendumText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ADDENDUM_TEXT");

                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AddendumId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ADDENDUM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ADDENDUM_TXSTMP");

                    b.HasIndex(new[] { "AgreementId" }, "ADDNDM_AGRMNT");

                    b.HasIndex(new[] { "AgreementId", "AgreementItemSeqId" }, "ADDNDM_AGRMNT_ITM");

                    b.ToTable("ADDENDUM", (string)null);
                });

            modelBuilder.Entity("Domain.AddressMatchMap", b =>
                {
                    b.Property<string>("MapKey")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MAP_KEY");

                    b.Property<string>("MapValue")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MAP_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("MapKey", "MapValue");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ADDRS_MTH_MP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ADDRS_MTH_MP_TXSTP");

                    b.ToTable("ADDRESS_MATCH_MAP", (string)null);
                });

            modelBuilder.Entity("Domain.Affiliate", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("AffiliateDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AFFILIATE_DESCRIPTION");

                    b.Property<string>("AffiliateName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("AFFILIATE_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DateTimeApproved")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_TIME_APPROVED");

                    b.Property<DateTime?>("DateTimeCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_TIME_CREATED");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("SitePageViews")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SITE_PAGE_VIEWS");

                    b.Property<string>("SiteType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SITE_TYPE");

                    b.Property<string>("SiteVisitors")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SITE_VISITORS");

                    b.Property<string>("YearEstablished")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("YEAR_ESTABLISHED");

                    b.HasKey("PartyId");

                    b.HasIndex(new[] { "PartyId" }, "AFFILIATE_PARTY");

                    b.HasIndex(new[] { "PartyId" }, "AFFILIATE_PGRP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AFFILIATE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AFFILIATE_TXSTMP");

                    b.ToTable("AFFILIATE", (string)null);
                });

            modelBuilder.Entity("Domain.Agreement", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<DateTime?>("AgreementDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AGREEMENT_DATE");

                    b.Property<string>("AgreementTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("RoleTypeIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_FROM");

                    b.Property<string>("RoleTypeIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_TO");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("TextData")
                        .HasColumnType("text")
                        .HasColumnName("TEXT_DATA");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("AgreementId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGREEMENT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGREEMENT_TXSTMP");

                    b.HasIndex(new[] { "PartyIdFrom", "RoleTypeIdFrom" }, "AGRMNT_FPRTYRLE");

                    b.HasIndex(new[] { "ProductId" }, "AGRMNT_PRODUCT");

                    b.HasIndex(new[] { "PartyIdTo", "RoleTypeIdTo" }, "AGRMNT_TPRTYRLE");

                    b.HasIndex(new[] { "AgreementTypeId" }, "AGRMNT_TYPE");

                    b.ToTable("AGREEMENT", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementAttribute", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementId", "AttrName");

                    b.HasIndex(new[] { "AgreementId" }, "AGRMNT_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRMT_ATTRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRMT_ATTRT_TXSTMP");

                    b.ToTable("AGREEMENT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementContent", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<string>("AgreementContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ContentId", "AgreementId", "AgreementItemSeqId", "AgreementContentTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRMNT_CNTT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRMNT_CNTT_TXSTMP");

                    b.HasIndex(new[] { "ContentId" }, "AG_CNT_CNT");

                    b.HasIndex(new[] { "AgreementId" }, "AG_CNT_PROD");

                    b.HasIndex(new[] { "AgreementContentTypeId" }, "AG_CNT_TYPE");

                    b.ToTable("AGREEMENT_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementContentType", b =>
                {
                    b.Property<string>("AgreementContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("AgreementContentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "AGCT_TYP_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRMT_CNT_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRMT_CNT_TP_TXSTP");

                    b.ToTable("AGREEMENT_CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementEmploymentAppl", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("RoleTypeIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_TO");

                    b.Property<string>("RoleTypeIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_FROM");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("AgreementDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AGREEMENT_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("AgreementId", "AgreementItemSeqId", "PartyIdTo", "PartyIdFrom", "RoleTypeIdTo", "RoleTypeIdFrom", "FromDate");

                    b.HasIndex(new[] { "AgreementId", "AgreementItemSeqId" }, "AGRMNT_EMPL_AITM");

                    b.HasIndex(new[] { "RoleTypeIdFrom", "RoleTypeIdTo", "PartyIdFrom", "PartyIdTo", "FromDate" }, "AGRMNT_EMPL_APPL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRT_EMPT_APL_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRT_EMPT_APL_TXSP");

                    b.ToTable("AGREEMENT_EMPLOYMENT_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementFacilityAppl", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementId", "AgreementItemSeqId", "FacilityId");

                    b.HasIndex(new[] { "AgreementId", "AgreementItemSeqId" }, "AGRMNT_FACLT_AITM");

                    b.HasIndex(new[] { "FacilityId" }, "AGRMNT_FACLT_PRD");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRT_FCT_APL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRT_FCT_APL_TXSTP");

                    b.ToTable("AGREEMENT_FACILITY_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementGeographicalApplic", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<string>("GeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementId", "AgreementItemSeqId", "GeoId")
                        .HasName("PK_AGREEMENT_GEOGRAPHICAL_APPL");

                    b.HasIndex(new[] { "AgreementId" }, "AGRMNT_GEOAP_AGR");

                    b.HasIndex(new[] { "AgreementId", "AgreementItemSeqId" }, "AGRMNT_GEOAP_AGRI");

                    b.HasIndex(new[] { "GeoId" }, "AGRMNT_GEOAP_GEO");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRT_GGRL_APC_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRT_GGRL_APC_TXSP");

                    b.ToTable("AGREEMENT_GEOGRAPHICAL_APPLIC", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementItem", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<byte[]>("AgreementImage")
                        .HasColumnType("longblob")
                        .HasColumnName("AGREEMENT_IMAGE");

                    b.Property<string>("AgreementItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_TYPE_ID");

                    b.Property<string>("AgreementText")
                        .HasColumnType("text")
                        .HasColumnName("AGREEMENT_TEXT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementId", "AgreementItemSeqId");

                    b.HasIndex(new[] { "AgreementId" }, "AGRMNT_ITEM_AGR");

                    b.HasIndex(new[] { "AgreementItemTypeId" }, "AGRMNT_ITEM_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRMNT_ITM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRMNT_ITM_TXSTMP");

                    b.ToTable("AGREEMENT_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementItemAttribute", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementId", "AgreementItemSeqId", "AttrName");

                    b.HasIndex(new[] { "AgreementId", "AgreementItemSeqId" }, "AGRMNT_ITEM_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRT_ITM_ATTT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRT_ITM_ATTT_TXSP");

                    b.ToTable("AGREEMENT_ITEM_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementItemType", b =>
                {
                    b.Property<string>("AgreementItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("AgreementItemTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "AGRMNT_TYPEPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRMT_ITM_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRMT_ITM_TP_TXSTP");

                    b.ToTable("AGREEMENT_ITEM_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementItemTypeAttr", b =>
                {
                    b.Property<string>("AgreementItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementItemTypeId", "AttrName");

                    b.HasIndex(new[] { "AgreementItemTypeId" }, "AGRMNT_ITEM_TYPATR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGT_ITM_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGT_ITM_TP_ATR_TXS");

                    b.ToTable("AGREEMENT_ITEM_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementPartyApplic", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementId", "AgreementItemSeqId", "PartyId");

                    b.HasIndex(new[] { "AgreementId" }, "AGRMNT_PTYA_AGR");

                    b.HasIndex(new[] { "PartyId" }, "AGRMNT_PTYA_PTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRT_PRT_APC_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRT_PRT_APC_TXSTP");

                    b.ToTable("AGREEMENT_PARTY_APPLIC", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementProductAppl", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("PRICE");

                    b.HasKey("AgreementId", "AgreementItemSeqId", "ProductId");

                    b.HasIndex(new[] { "AgreementId", "AgreementItemSeqId" }, "AGRMNT_PRDA_AITM");

                    b.HasIndex(new[] { "ProductId" }, "AGRMNT_PRDA_PRD");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRT_PRT_APL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRT_PRT_APL_TXSTP");

                    b.ToTable("AGREEMENT_PRODUCT_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementPromoAppl", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("AgreementId", "AgreementItemSeqId", "ProductPromoId", "FromDate");

                    b.HasIndex(new[] { "AgreementId", "AgreementItemSeqId" }, "AGRMNT_PROM_AITM");

                    b.HasIndex(new[] { "ProductPromoId" }, "AGRMNT_PROM_PRO");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRT_PRM_APL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRT_PRM_APL_TXSTP");

                    b.ToTable("AGREEMENT_PROMO_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementRole", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRMNT_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRMNT_RL_TXSTMP");

                    b.HasIndex(new[] { "AgreementId" }, "AGRMNT_ROLE_AGR");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "AGRMNT_ROLE_PRLE");

                    b.HasIndex(new[] { "PartyId" }, "AGRMNT_ROLE_PTY");

                    b.ToTable("AGREEMENT_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementStatus", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementId", "StatusId", "StatusDate");

                    b.HasIndex(new[] { "AgreementId" }, "AGRMNT_STTS_AGRMNT");

                    b.HasIndex(new[] { "StatusId" }, "AGRMNT_STTS_STTS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRMNT_STTS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRMNT_STTS_TXSTMP");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "AGRMNT_STTS_USRLGN");

                    b.ToTable("AGREEMENT_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementTerm", b =>
                {
                    b.Property<string>("AgreementTermId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_TERM_ID");

                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("InvoiceItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<double?>("MaxQuantity")
                        .HasColumnType("double")
                        .HasColumnName("MAX_QUANTITY");

                    b.Property<double?>("MinQuantity")
                        .HasColumnType("double")
                        .HasColumnName("MIN_QUANTITY");

                    b.Property<int?>("TermDays")
                        .HasColumnType("int")
                        .HasColumnName("TERM_DAYS");

                    b.Property<string>("TermTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERM_TYPE_ID");

                    b.Property<decimal?>("TermValue")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("TERM_VALUE");

                    b.Property<string>("TextValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TEXT_VALUE");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("AgreementTermId");

                    b.HasIndex(new[] { "AgreementId" }, "AGRMNT_TERM_AGR");

                    b.HasIndex(new[] { "AgreementId", "AgreementItemSeqId" }, "AGRMNT_TERM_AITM");

                    b.HasIndex(new[] { "InvoiceItemTypeId" }, "AGRMNT_TERM_IIT");

                    b.HasIndex(new[] { "TermTypeId" }, "AGRMNT_TERM_TTYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRMNT_TRM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRMNT_TRM_TXSTMP");

                    b.ToTable("AGREEMENT_TERM", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementTermAttribute", b =>
                {
                    b.Property<string>("AgreementTermId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_TERM_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementTermId", "AttrName");

                    b.HasIndex(new[] { "AgreementTermId" }, "AGRMNT_TERM_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRT_TRM_ATTT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRT_TRM_ATTT_TXSP");

                    b.ToTable("AGREEMENT_TERM_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementType", b =>
                {
                    b.Property<string>("AgreementTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("AgreementTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRMNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRMNT_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "AGRMNT_TYPE_PAR");

                    b.ToTable("AGREEMENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementTypeAttr", b =>
                {
                    b.Property<string>("AgreementTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementTypeId", "AttrName");

                    b.HasIndex(new[] { "AgreementTypeId" }, "AGRMNT_TYPE_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGRMT_TP_ATR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGRMT_TP_ATR_TXSTP");

                    b.ToTable("AGREEMENT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.AgreementWorkEffortApplic", b =>
                {
                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("AgreementId", "AgreementItemSeqId", "WorkEffortId")
                        .HasName("PK_AGREEMENT_WORK_EFFORT_APPLI");

                    b.HasIndex(new[] { "AgreementId" }, "AGRMNT_WEA_AGRMNT");

                    b.HasIndex(new[] { "WorkEffortId" }, "AGRMNT_WEA_WE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AGT_WRK_EFT_APC_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AGT_WRK_EFT_APC_TS");

                    b.ToTable("AGREEMENT_WORK_EFFORT_APPLIC", (string)null);
                });

            modelBuilder.Entity("Domain.AllocationPlanHeader", b =>
                {
                    b.Property<string>("PlanId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PLAN_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PlanName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PLAN_NAME");

                    b.Property<string>("PlanTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PLAN_TYPE_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("PlanId", "ProductId");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "ALC_PLN_HDR_CBUL");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "ALC_PLN_HDR_LMUL");

                    b.HasIndex(new[] { "StatusId" }, "ALC_PLN_HDR_STS");

                    b.HasIndex(new[] { "PlanTypeId" }, "ALC_PLN_HDR_TYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ALLN_PLN_HDR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ALLN_PLN_HDR_TXSTP");

                    b.ToTable("ALLOCATION_PLAN_HEADER", (string)null);
                });

            modelBuilder.Entity("Domain.AllocationPlanItem", b =>
                {
                    b.Property<string>("PlanId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PLAN_ID");

                    b.Property<string>("PlanItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PLAN_ITEM_SEQ_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("AllocatedQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("ALLOCATED_QUANTITY");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("PlanMethodEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PLAN_METHOD_ENUM_ID");

                    b.Property<string>("PrioritySeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIORITY_SEQ_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("PlanId", "PlanItemSeqId", "ProductId");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "ALC_PLN_ITM_CBUL");

                    b.HasIndex(new[] { "PlanMethodEnumId" }, "ALC_PLN_ITM_ENUM");

                    b.HasIndex(new[] { "PlanId", "ProductId" }, "ALC_PLN_ITM_HDR");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "ALC_PLN_ITM_LMUL");

                    b.HasIndex(new[] { "OrderId" }, "ALC_PLN_ITM_ODRHDR");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ALC_PLN_ITM_ODRITM");

                    b.HasIndex(new[] { "StatusId" }, "ALC_PLN_ITM_STS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ALLN_PLN_ITM_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ALLN_PLN_ITM_TXSTP");

                    b.ToTable("ALLOCATION_PLAN_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.AllocationPlanType", b =>
                {
                    b.Property<string>("PlanTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PLAN_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PlanTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ALLCN_PLN_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ALLCN_PLN_TP_TXSTP");

                    b.ToTable("ALLOCATION_PLAN_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Annotation", b =>
                {
                    b.Property<string>("AnnotationId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("XCoordinate")
                        .HasColumnType("float");

                    b.Property<float>("YCoordinate")
                        .HasColumnType("float");

                    b.HasKey("AnnotationId");

                    b.ToTable("ANNOTATIONS", (string)null);
                });

            modelBuilder.Entity("Domain.AppUserLogin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PartyId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PartyId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("PercentageAllowed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "AddAdjustments",
                            NormalizedName = "ADDADJUSTMENTS",
                            PercentageAllowed = 2
                        },
                        new
                        {
                            Id = "4",
                            Name = "AddDiscountAdjustment5",
                            NormalizedName = "ADDDISCOUNTADJUSTMENT5",
                            PercentageAllowed = 5
                        },
                        new
                        {
                            Id = "5",
                            Name = "AddDiscountAdjustment10",
                            NormalizedName = "ADDDISCOUNTADJUSTMENT10",
                            PercentageAllowed = 10
                        });
                });

            modelBuilder.Entity("Domain.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationSandbox", b =>
                {
                    b.Property<string>("ApplicationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("APPLICATION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("RuntimeDataId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RUNTIME_DATA_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.HasKey("ApplicationId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "APPLCN_SNDX_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "APPLCN_SNDX_TXSTMP");

                    b.HasIndex(new[] { "RuntimeDataId" }, "APP_SNDBX_RNTMDTA");

                    b.HasIndex(new[] { "WorkEffortId", "PartyId", "RoleTypeId", "FromDate" }, "APP_SNDBX_WEPA");

                    b.ToTable("APPLICATION_SANDBOX", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.AudioDataResource", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<byte[]>("AudioData")
                        .HasColumnType("longblob")
                        .HasColumnName("AUDIO_DATA");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DataResourceId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "AD_DT_RSRC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "AD_DT_RSRC_TXSTMP");

                    b.HasIndex(new[] { "DataResourceId" }, "DATA_REC_AUDIO");

                    b.ToTable("AUDIO_DATA_RESOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.BenefitType", b =>
                {
                    b.Property<string>("BenefitTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BENEFIT_TYPE_ID");

                    b.Property<string>("BenefitName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BENEFIT_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<double?>("EmployerPaidPercentage")
                        .HasColumnType("double")
                        .HasColumnName("EMPLOYER_PAID_PERCENTAGE");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("BenefitTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "BEN_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BNFT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BNFT_TP_TXSTMP");

                    b.ToTable("BENEFIT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.BillingAccount", b =>
                {
                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_ACCOUNT_ID");

                    b.Property<string>("AccountCurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOUNT_CURRENCY_UOM_ID");

                    b.Property<decimal?>("AccountLimit")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ACCOUNT_LIMIT");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ExternalAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXTERNAL_ACCOUNT_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("BillingAccountId");

                    b.HasIndex(new[] { "ContactMechId" }, "BILLACCT_CMECH");

                    b.HasIndex(new[] { "AccountCurrencyUomId" }, "BILLACCT_CUOM");

                    b.HasIndex(new[] { "ContactMechId" }, "BILLACCT_PADDR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BLLNG_ACCNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BLLNG_ACCNT_TXSTMP");

                    b.ToTable("BILLING_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.BillingAccountRole", b =>
                {
                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_ACCOUNT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("BillingAccountId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "PartyId" }, "BILLACCT_RL_PARTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "BILLACCT_RL_PTRL");

                    b.HasIndex(new[] { "BillingAccountId" }, "BILLACCT_ROLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BLLG_ACCT_RL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BLLG_ACCT_RL_TXSTP");

                    b.ToTable("BILLING_ACCOUNT_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.BillingAccountTerm", b =>
                {
                    b.Property<string>("BillingAccountTermId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_ACCOUNT_TERM_ID");

                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_ACCOUNT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("TermDays")
                        .HasColumnType("int")
                        .HasColumnName("TERM_DAYS");

                    b.Property<string>("TermTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERM_TYPE_ID");

                    b.Property<decimal?>("TermValue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TERM_VALUE");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("BillingAccountTermId");

                    b.HasIndex(new[] { "BillingAccountId" }, "BILLACCT_TRM_BACT");

                    b.HasIndex(new[] { "TermTypeId" }, "BILLACCT_TRM_TRM");

                    b.HasIndex(new[] { "UomId" }, "BILLACCT_TRM_UOM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BLLG_ACT_TRM_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BLLG_ACT_TRM_TXSTP");

                    b.ToTable("BILLING_ACCOUNT_TERM", (string)null);
                });

            modelBuilder.Entity("Domain.BillingAccountTermAttr", b =>
                {
                    b.Property<string>("BillingAccountTermId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_ACCOUNT_TERM_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BillingAccountTermId", "AttrName");

                    b.HasIndex(new[] { "BillingAccountTermId" }, "BILLACCT_TRM_ATTR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BLG_ACT_TRM_ATR_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BLG_ACT_TRM_ATR_TS");

                    b.ToTable("BILLING_ACCOUNT_TERM_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.BrowserType", b =>
                {
                    b.Property<string>("BrowserTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BROWSER_TYPE_ID");

                    b.Property<string>("BrowserName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BROWSER_NAME");

                    b.Property<string>("BrowserVersion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("BROWSER_VERSION");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BrowserTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BRWSR_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BRWSR_TP_TXSTMP");

                    b.ToTable("BROWSER_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Budget", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("BudgetTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_TYPE_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomTimePeriodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_TIME_PERIOD_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetId");

                    b.HasIndex(new[] { "BudgetTypeId" }, "BUDGET_BGTTYP");

                    b.HasIndex(new[] { "CustomTimePeriodId" }, "BUDGET_CTP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BUDGET_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BUDGET_TXSTMP");

                    b.ToTable("BUDGET", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetAttribute", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDGT_ATTRBT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDGT_ATTRBT_TXSTMP");

                    b.HasIndex(new[] { "BudgetId" }, "BUDGET_ATTR_BDGT");

                    b.ToTable("BUDGET_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetItem", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("BudgetItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_SEQ_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<string>("BudgetItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Justification")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("JUSTIFICATION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("Purpose")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PURPOSE");

                    b.HasKey("BudgetId", "BudgetItemSeqId");

                    b.HasIndex(new[] { "BudgetId" }, "BDGTITM_TO_BDGT");

                    b.HasIndex(new[] { "BudgetItemTypeId" }, "BUDGET_ITEM_BTYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BUDGET_ITEM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BUDGET_ITEM_TXSTMP");

                    b.ToTable("BUDGET_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetItemAttribute", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("BudgetItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_SEQ_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetId", "BudgetItemSeqId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDT_ITM_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDT_ITM_ATTT_TXSTP");

                    b.HasIndex(new[] { "BudgetId", "BudgetItemSeqId" }, "BUDGET_ITEM_ATTR");

                    b.ToTable("BUDGET_ITEM_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetItemType", b =>
                {
                    b.Property<string>("BudgetItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("BudgetItemTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDGT_ITM_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDGT_ITM_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "BUDGET_ITM_TYPPAR");

                    b.ToTable("BUDGET_ITEM_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetItemTypeAttr", b =>
                {
                    b.Property<string>("BudgetItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetItemTypeId", "AttrName");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDT_ITM_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDT_ITM_TP_ATR_TXS");

                    b.HasIndex(new[] { "BudgetItemTypeId" }, "BUDGET_ITMTYPATTR");

                    b.ToTable("BUDGET_ITEM_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetReview", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("BudgetReviewId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_REVIEW_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("BudgetReviewResultTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_REVIEW_RESULT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime")
                        .HasColumnName("REVIEW_DATE");

                    b.HasKey("BudgetId", "BudgetReviewId", "PartyId", "BudgetReviewResultTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDGT_RVW_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDGT_RVW_TXSTMP");

                    b.HasIndex(new[] { "BudgetId" }, "BUDGET_RVW_BDGT");

                    b.HasIndex(new[] { "PartyId" }, "BUDGET_RVW_PARTY");

                    b.HasIndex(new[] { "BudgetReviewResultTypeId" }, "BUDGET_RVW_RTYPE");

                    b.ToTable("BUDGET_REVIEW", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetReviewResultType", b =>
                {
                    b.Property<string>("BudgetReviewResultTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_REVIEW_RESULT_TYPE_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetReviewResultTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDT_RVW_RST_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDT_RVW_RST_TP_TXS");

                    b.ToTable("BUDGET_REVIEW_RESULT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetRevision", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("RevisionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REVISION_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DateRevised")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_REVISED");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetId", "RevisionSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDGT_RVSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDGT_RVSN_TXSTMP");

                    b.HasIndex(new[] { "BudgetId" }, "BUDGET_RVSN_BDGT");

                    b.ToTable("BUDGET_REVISION", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetRevisionImpact", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("BudgetItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_SEQ_ID");

                    b.Property<string>("RevisionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REVISION_SEQ_ID");

                    b.Property<string>("AddDeleteFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ADD_DELETE_FLAG")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("RevisedAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("REVISED_AMOUNT");

                    b.Property<string>("RevisionReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REVISION_REASON");

                    b.HasKey("BudgetId", "BudgetItemSeqId", "RevisionSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDT_RVN_IMPT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDT_RVN_IMPT_TXSTP");

                    b.HasIndex(new[] { "BudgetId" }, "BUDGET_RNIMP_BDGT");

                    b.HasIndex(new[] { "BudgetId", "BudgetItemSeqId" }, "BUDGET_RNIMP_BITM");

                    b.HasIndex(new[] { "BudgetId", "RevisionSeqId" }, "BUDGET_RNIMP_REV");

                    b.ToTable("BUDGET_REVISION_IMPACT", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetRole", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "BudgetId" }, "BUDGET_ROLE_BDGT");

                    b.HasIndex(new[] { "PartyId" }, "BUDGET_ROLE_PARTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "BUDGET_ROLE_PROLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BUDGET_ROLE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BUDGET_ROLE_TXSTMP");

                    b.ToTable("BUDGET_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetScenario", b =>
                {
                    b.Property<string>("BudgetScenarioId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_SCENARIO_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetScenarioId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDGT_SCNR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDGT_SCNR_TXSTMP");

                    b.ToTable("BUDGET_SCENARIO", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetScenarioApplication", b =>
                {
                    b.Property<string>("BudgetScenarioApplicId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_SCENARIO_APPLIC_ID");

                    b.Property<string>("BudgetScenarioId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_SCENARIO_ID");

                    b.Property<decimal?>("AmountChange")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT_CHANGE");

                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("BudgetItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("PercentageChange")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PERCENTAGE_CHANGE");

                    b.HasKey("BudgetScenarioApplicId", "BudgetScenarioId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDT_SCR_APPLN_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDT_SCR_APPLN_TXSP");

                    b.HasIndex(new[] { "BudgetId" }, "BUDGET_SAPL_BDGT");

                    b.HasIndex(new[] { "BudgetId", "BudgetItemSeqId" }, "BUDGET_SAPL_BITM");

                    b.HasIndex(new[] { "BudgetScenarioId" }, "BUDGET_SAPL_BSCN");

                    b.ToTable("BUDGET_SCENARIO_APPLICATION", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetScenarioRule", b =>
                {
                    b.Property<string>("BudgetScenarioId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_SCENARIO_ID");

                    b.Property<string>("BudgetItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_TYPE_ID");

                    b.Property<decimal?>("AmountChange")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT_CHANGE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("PercentageChange")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PERCENTAGE_CHANGE");

                    b.HasKey("BudgetScenarioId", "BudgetItemTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDGT_SCR_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDGT_SCR_RL_TXSTMP");

                    b.HasIndex(new[] { "BudgetItemTypeId" }, "BUDGET_SRLE_BITP");

                    b.HasIndex(new[] { "BudgetScenarioId" }, "BUDGET_SRLE_BSCN");

                    b.ToTable("BUDGET_SCENARIO_RULE", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetStatus", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.HasKey("BudgetId", "StatusId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDGT_STTS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDGT_STTS_TXSTMP");

                    b.HasIndex(new[] { "BudgetId" }, "BUDGET_STTS_BDGT");

                    b.HasIndex(new[] { "StatusId" }, "BUDGET_STTS_STTS");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "BUDGET_STTS_USRLGN");

                    b.ToTable("BUDGET_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetType", b =>
                {
                    b.Property<string>("BudgetTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("BudgetTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "BUDGET_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BUDGET_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BUDGET_TYPE_TXSTMP");

                    b.ToTable("BUDGET_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.BudgetTypeAttr", b =>
                {
                    b.Property<string>("BudgetTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetTypeId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "BDGT_TP_ATR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "BDGT_TP_ATR_TXSTMP");

                    b.HasIndex(new[] { "BudgetTypeId" }, "BUDGET_TPATR_BT");

                    b.ToTable("BUDGET_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.CarrierShipmentBoxType", b =>
                {
                    b.Property<string>("ShipmentBoxTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_BOX_TYPE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OversizeCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("OVERSIZE_CODE");

                    b.Property<string>("PackagingTypeCode")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PACKAGING_TYPE_CODE");

                    b.HasKey("ShipmentBoxTypeId", "PartyId");

                    b.HasIndex(new[] { "PartyId" }, "CARR_SHBX_PARTY");

                    b.HasIndex(new[] { "ShipmentBoxTypeId" }, "CARR_SHBX_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CRR_SHT_BX_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CRR_SHT_BX_TP_TXSP");

                    b.ToTable("CARRIER_SHIPMENT_BOX_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.CarrierShipmentMethod", b =>
                {
                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("CarrierServiceCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CARRIER_SERVICE_CODE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUMBER");

                    b.HasKey("ShipmentMethodTypeId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "PartyId" }, "CARR_SHMETH_PARTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "CARR_SHMETH_PROLE");

                    b.HasIndex(new[] { "ShipmentMethodTypeId" }, "CARR_SHMETH_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CRR_SHPT_MTD_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CRR_SHPT_MTD_TXSTP");

                    b.ToTable("CARRIER_SHIPMENT_METHOD", (string)null);
                });

            modelBuilder.Entity("Domain.CartAbandonedLine", b =>
                {
                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.Property<string>("CartAbandonedLineSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CART_ABANDONED_LINE_SEQ_ID");

                    b.Property<string>("ConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProdCatalogId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CATALOG_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<decimal?>("Reserv2ndPPPerc")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV2ND_P_P_PERC");

                    b.Property<decimal?>("ReservLength")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_LENGTH");

                    b.Property<decimal?>("ReservNthPPPerc")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_NTH_P_P_PERC");

                    b.Property<decimal?>("ReservPersons")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_PERSONS");

                    b.Property<DateTime?>("ReservStart")
                        .HasColumnType("datetime")
                        .HasColumnName("RESERV_START");

                    b.Property<decimal?>("TotalWithAdjustments")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TOTAL_WITH_ADJUSTMENTS");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("UNIT_PRICE");

                    b.Property<string>("WasReserved")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("WAS_RESERVED")
                        .IsFixedLength();

                    b.HasKey("VisitId", "CartAbandonedLineSeqId");

                    b.HasIndex(new[] { "ProductId" }, "CART_ABLN_PRD");

                    b.HasIndex(new[] { "ProdCatalogId" }, "CART_ABLN_PRDCAT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CRT_ABNDD_LN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CRT_ABNDD_LN_TXSTP");

                    b.ToTable("CART_ABANDONED_LINE", (string)null);
                });

            modelBuilder.Entity("Domain.CatalinaSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SESSION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IsValid")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_VALID")
                        .IsFixedLength();

                    b.Property<int?>("LastAccessed")
                        .HasColumnType("int")
                        .HasColumnName("LAST_ACCESSED");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("MaxIdle")
                        .HasColumnType("int")
                        .HasColumnName("MAX_IDLE");

                    b.Property<byte[]>("SessionInfo")
                        .HasColumnType("longblob")
                        .HasColumnName("SESSION_INFO");

                    b.Property<int?>("SessionSize")
                        .HasColumnType("int")
                        .HasColumnName("SESSION_SIZE");

                    b.HasKey("SessionId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CTLN_SSSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CTLN_SSSN_TXSTMP");

                    b.ToTable("CATALINA_SESSION", (string)null);
                });

            modelBuilder.Entity("Domain.CharacterSet", b =>
                {
                    b.Property<string>("CharacterSetId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CHARACTER_SET_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CharacterSetId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CHRCTR_ST_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CHRCTR_ST_TXSTMP");

                    b.ToTable("CHARACTER_SET", (string)null);
                });

            modelBuilder.Entity("Domain.CheckAccount", b =>
                {
                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCOUNT_NUMBER");

                    b.Property<string>("AccountType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ACCOUNT_TYPE");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BANK_NAME");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("BRANCH_CODE");

                    b.Property<string>("CompanyNameOnAccount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMPANY_NAME_ON_ACCOUNT");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("NameOnAccount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NAME_ON_ACCOUNT");

                    b.Property<string>("RoutingNumber")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ROUTING_NUMBER");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex(new[] { "ContactMechId" }, "CACCT_CMECH");

                    b.HasIndex(new[] { "ContactMechId" }, "CACCT_PADDR");

                    b.HasIndex(new[] { "PaymentMethodId" }, "CACCT_PMETH");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CHCK_ACCNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CHCK_ACCNT_TXSTMP");

                    b.ToTable("CHECK_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.CommContentAssocType", b =>
                {
                    b.Property<string>("CommContentAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMM_CONTENT_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CommContentAssocTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMM_CNT_ASC_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMM_CNT_ASC_TP_TXS");

                    b.ToTable("COMM_CONTENT_ASSOC_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.CommEventContentAssoc", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("CommContentAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMM_CONTENT_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ContentId", "CommunicationEventId", "FromDate");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMM_EVT_CNT_ASC_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMM_EVT_CNT_ASC_TS");

                    b.HasIndex(new[] { "CommunicationEventId" }, "COMMEV_CA_COMMEV");

                    b.HasIndex(new[] { "ContentId" }, "COMMEV_CA_FROM");

                    b.HasIndex(new[] { "CommContentAssocTypeId" }, "COMMEV_CA_TYP");

                    b.ToTable("COMM_EVENT_CONTENT_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.CommunicationEvent", b =>
                {
                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<string>("BccString")
                        .HasColumnType("text")
                        .HasColumnName("BCC_STRING");

                    b.Property<string>("CcString")
                        .HasColumnType("text")
                        .HasColumnName("CC_STRING");

                    b.Property<string>("CommunicationEventTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_TYPE_ID");

                    b.Property<string>("ContactListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_LIST_ID");

                    b.Property<string>("ContactMechIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID_FROM");

                    b.Property<string>("ContactMechIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID_TO");

                    b.Property<string>("ContactMechTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_TYPE_ID");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("CONTENT");

                    b.Property<string>("ContentMimeTypeId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CONTENT_MIME_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DatetimeEnded")
                        .HasColumnType("datetime")
                        .HasColumnName("DATETIME_ENDED");

                    b.Property<DateTime?>("DatetimeStarted")
                        .HasColumnType("datetime")
                        .HasColumnName("DATETIME_STARTED");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("FromString")
                        .HasColumnType("text")
                        .HasColumnName("FROM_STRING");

                    b.Property<string>("HeaderString")
                        .HasColumnType("text")
                        .HasColumnName("HEADER_STRING");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MessageId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MESSAGE_ID");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NOTE");

                    b.Property<string>("OrigCommEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIG_COMM_EVENT_ID");

                    b.Property<string>("ParentCommEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_COMM_EVENT_ID");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<string>("ReasonEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REASON_ENUM_ID");

                    b.Property<string>("RoleTypeIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_FROM");

                    b.Property<string>("RoleTypeIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_TO");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SUBJECT");

                    b.Property<string>("ToString")
                        .HasColumnType("text")
                        .HasColumnName("TO_STRING");

                    b.HasKey("CommunicationEventId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMMNCTN_EVT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMMNCTN_EVT_TXSTMP");

                    b.HasIndex(new[] { "MessageId" }, "COMMEVT_MSG_ID")
                        .IsUnique();

                    b.HasIndex(new[] { "ContactListId" }, "COM_EVNT_CLST");

                    b.HasIndex(new[] { "ContactMechTypeId" }, "COM_EVNT_CMTP");

                    b.HasIndex(new[] { "ContactMechIdFrom" }, "COM_EVNT_FCM");

                    b.HasIndex(new[] { "PartyIdFrom" }, "COM_EVNT_FPTY");

                    b.HasIndex(new[] { "RoleTypeIdFrom" }, "COM_EVNT_FRTYP");

                    b.HasIndex(new[] { "ContentMimeTypeId" }, "COM_EVNT_MIMETYPE");

                    b.HasIndex(new[] { "ReasonEnumId" }, "COM_EVNT_RESENUM");

                    b.HasIndex(new[] { "StatusId" }, "COM_EVNT_STTS");

                    b.HasIndex(new[] { "ContactMechIdTo" }, "COM_EVNT_TCM");

                    b.HasIndex(new[] { "PartyIdTo" }, "COM_EVNT_TPTY");

                    b.HasIndex(new[] { "RoleTypeIdTo" }, "COM_EVNT_TRTYP");

                    b.HasIndex(new[] { "CommunicationEventTypeId" }, "COM_EVNT_TYPE");

                    b.ToTable("COMMUNICATION_EVENT", (string)null);
                });

            modelBuilder.Entity("Domain.CommunicationEventOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "CommunicationEventId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMMNN_EVT_ORR_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMMNN_EVT_ORR_TXSP");

                    b.HasIndex(new[] { "CommunicationEventId" }, "COMEV_ORDER_CMEV");

                    b.HasIndex(new[] { "OrderId" }, "COMEV_ORDER_ORDER");

                    b.ToTable("COMMUNICATION_EVENT_ORDER", (string)null);
                });

            modelBuilder.Entity("Domain.CommunicationEventProduct", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductId", "CommunicationEventId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMMNN_EVT_PRT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMMNN_EVT_PRT_TXSP");

                    b.HasIndex(new[] { "CommunicationEventId" }, "COMEV_PROD_CMEV");

                    b.HasIndex(new[] { "ProductId" }, "COMEV_PROD_PROD");

                    b.ToTable("COMMUNICATION_EVENT_PRODUCT", (string)null);
                });

            modelBuilder.Entity("Domain.CommunicationEventPrpTyp", b =>
                {
                    b.Property<string>("CommunicationEventPrpTypId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_PRP_TYP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("CommunicationEventPrpTypId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMN_EVT_PRP_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMN_EVT_PRP_TP_TXS");

                    b.HasIndex(new[] { "ParentTypeId" }, "COM_EVNT_PRP_TYP");

                    b.ToTable("COMMUNICATION_EVENT_PRP_TYP", (string)null);
                });

            modelBuilder.Entity("Domain.CommunicationEventPurpose", b =>
                {
                    b.Property<string>("CommunicationEventPrpTypId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_PRP_TYP_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CommunicationEventPrpTypId", "CommunicationEventId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMMNN_EVT_PRS_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMMNN_EVT_PRS_TXSP");

                    b.HasIndex(new[] { "CommunicationEventId" }, "COM_EVNT_PRP_EVNT");

                    b.HasIndex(new[] { "CommunicationEventPrpTypId" }, "COM_EVNT_PRP_TYPE");

                    b.ToTable("COMMUNICATION_EVENT_PURPOSE", (string)null);
                });

            modelBuilder.Entity("Domain.CommunicationEventReturn", b =>
                {
                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ReturnId", "CommunicationEventId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMMNN_EVT_RTN_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMMNN_EVT_RTN_TXSP");

                    b.HasIndex(new[] { "ReturnId" }, "COMEV_ORDER_RETURN");

                    b.HasIndex(new[] { "CommunicationEventId" }, "COMEV_RETURN_CMEV");

                    b.ToTable("COMMUNICATION_EVENT_RETURN", (string)null);
                });

            modelBuilder.Entity("Domain.CommunicationEventRole", b =>
                {
                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("CommunicationEventId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMMNN_EVT_RL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMMNN_EVT_RL_TXSTP");

                    b.HasIndex(new[] { "ContactMechId" }, "COM_EVRL_CMCH");

                    b.HasIndex(new[] { "CommunicationEventId" }, "COM_EVRL_CMEV");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "COM_EVRL_PRLE");

                    b.HasIndex(new[] { "PartyId" }, "COM_EVRL_PTY");

                    b.HasIndex(new[] { "StatusId" }, "COM_EVRL_STTS");

                    b.ToTable("COMMUNICATION_EVENT_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.CommunicationEventType", b =>
                {
                    b.Property<string>("CommunicationEventTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_TYPE_ID");

                    b.Property<string>("ContactMechTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("CommunicationEventTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMMNN_EVT_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMMNN_EVT_TP_TXSTP");

                    b.HasIndex(new[] { "ContactMechTypeId" }, "COM_EVNT_TYPE_CMT");

                    b.HasIndex(new[] { "ParentTypeId" }, "COM_EVNT_TYPE_PAR");

                    b.ToTable("COMMUNICATION_EVENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.CommunicationEventWorkEff", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortId", "CommunicationEventId")
                        .HasName("PK_COMMUNICATION_EVENT_WORK_EF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CMN_EVT_WRK_EFF_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CMN_EVT_WRK_EFF_TS");

                    b.HasIndex(new[] { "CommunicationEventId" }, "COMEV_WEFF_CMEV");

                    b.HasIndex(new[] { "WorkEffortId" }, "COMEV_WEFF_WEFF");

                    b.ToTable("COMMUNICATION_EVENT_WORK_EFF", (string)null);
                });

            modelBuilder.Entity("Domain.Component", b =>
                {
                    b.Property<string>("ComponentName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMPONENT_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RootLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ROOT_LOCATION");

                    b.HasKey("ComponentName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "COMPONENT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "COMPONENT_TXSTMP");

                    b.ToTable("COMPONENT", (string)null);
                });

            modelBuilder.Entity("Domain.ConfigOptionProductOption", b =>
                {
                    b.Property<string>("ConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ID");

                    b.Property<string>("ConfigItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ITEM_ID");

                    b.Property<string>("ConfigOptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_OPTION_ID");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductOptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_OPTION_ID");

                    b.HasKey("ConfigId", "ConfigItemId", "ConfigOptionId", "SequenceNum", "ProductId")
                        .HasName("PK_CONFIG_OPTION_PRODUCT_OPTIO");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNG_OPN_PRT_OPN_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNG_OPN_PRT_OPN_TS");

                    b.HasIndex(new[] { "ConfigId", "ConfigItemId", "ConfigOptionId", "SequenceNum" }, "PROD_OPTN_CONF");

                    b.HasIndex(new[] { "ConfigItemId", "ConfigOptionId", "ProductId" }, "PROD_OPTN_PROD");

                    b.ToTable("CONFIG_OPTION_PRODUCT_OPTION", (string)null);
                });

            modelBuilder.Entity("Domain.ContactList", b =>
                {
                    b.Property<string>("ContactListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_LIST_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("ContactListName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONTACT_LIST_NAME");

                    b.Property<string>("ContactListTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_LIST_TYPE_ID");

                    b.Property<string>("ContactMechTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_TYPE_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("IsPublic")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_PUBLIC")
                        .IsFixedLength();

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MarketingCampaignId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MARKETING_CAMPAIGN_ID");

                    b.Property<string>("OptOutScreen")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OPT_OUT_SCREEN");

                    b.Property<string>("OwnerPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OWNER_PARTY_ID");

                    b.Property<string>("SingleUse")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SINGLE_USE")
                        .IsFixedLength();

                    b.Property<string>("VerifyEmailFrom")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("VERIFY_EMAIL_FROM");

                    b.Property<string>("VerifyEmailScreen")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("VERIFY_EMAIL_SCREEN");

                    b.Property<string>("VerifyEmailSubject")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("VERIFY_EMAIL_SUBJECT");

                    b.Property<string>("VerifyEmailWebSiteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VERIFY_EMAIL_WEB_SITE_ID");

                    b.HasKey("ContactListId");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "CNCT_LST_CBUL");

                    b.HasIndex(new[] { "ContactMechTypeId" }, "CNCT_LST_CMCHTP");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "CNCT_LST_LMUL");

                    b.HasIndex(new[] { "MarketingCampaignId" }, "CNCT_LST_MKCMPN");

                    b.HasIndex(new[] { "OwnerPartyId" }, "CNCT_LST_OPTY");

                    b.HasIndex(new[] { "ContactListTypeId" }, "CNCT_LST_TYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTCT_LST_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTCT_LST_TXSTMP");

                    b.ToTable("CONTACT_LIST", (string)null);
                });

            modelBuilder.Entity("Domain.ContactListCommStatus", b =>
                {
                    b.Property<string>("ContactListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_LIST_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MessageId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MESSAGE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("ContactListId", "CommunicationEventId", "ContactMechId");

                    b.HasIndex(new[] { "CommunicationEventId" }, "CNCT_LST_CST_CE");

                    b.HasIndex(new[] { "ContactListId" }, "CNCT_LST_CST_CL");

                    b.HasIndex(new[] { "ContactMechId" }, "CNCT_LST_CST_CM");

                    b.HasIndex(new[] { "PartyId" }, "CNCT_LST_CST_PT");

                    b.HasIndex(new[] { "StatusId" }, "CNCT_LST_CST_ST");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "CNCT_LST_CST_ST_UL");

                    b.HasIndex(new[] { "MessageId" }, "CNTLSTCST_MSG_ID")
                        .IsUnique();

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNT_LST_CMM_STS_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNT_LST_CMM_STS_TS");

                    b.ToTable("CONTACT_LIST_COMM_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.ContactListParty", b =>
                {
                    b.Property<string>("ContactListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_LIST_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PreferredContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PREFERRED_CONTACT_MECH_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ContactListId", "PartyId", "FromDate");

                    b.HasIndex(new[] { "ContactListId" }, "CNCT_LSTPTY_CLST");

                    b.HasIndex(new[] { "PreferredContactMechId" }, "CNCT_LSTPTY_PCM");

                    b.HasIndex(new[] { "PartyId" }, "CNCT_LSTPTY_PTY");

                    b.HasIndex(new[] { "StatusId" }, "CNCT_LSTPTY_STS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_LST_PRT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_LST_PRT_TXSTP");

                    b.ToTable("CONTACT_LIST_PARTY", (string)null);
                });

            modelBuilder.Entity("Domain.ContactListPartyStatus", b =>
                {
                    b.Property<string>("ContactListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_LIST_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OptInVerifyCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("OPT_IN_VERIFY_CODE");

                    b.Property<string>("SetByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("SET_BY_USER_LOGIN_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("ContactListId", "PartyId", "FromDate", "StatusDate");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNT_LST_PRT_STS_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNT_LST_PRT_STS_TS");

                    b.HasIndex(new[] { "ContactListId", "PartyId", "FromDate" }, "CTLSTPTST_CLP");

                    b.ToTable("CONTACT_LIST_PARTY_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.ContactListType", b =>
                {
                    b.Property<string>("ContactListTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_LIST_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContactListTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_LST_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_LST_TP_TXSTMP");

                    b.ToTable("CONTACT_LIST_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ContactMech", b =>
                {
                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("ContactMechTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("InfoString")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INFO_STRING");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContactMechId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTCT_MCH_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTCT_MCH_TXSTMP");

                    b.HasIndex(new[] { "ContactMechTypeId" }, "CONT_MECH_TYPE");

                    b.HasIndex(new[] { "InfoString" }, "INFO_STRING_IDX");

                    b.ToTable("CONTACT_MECH", (string)null);
                });

            modelBuilder.Entity("Domain.ContactMechAttribute", b =>
                {
                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContactMechId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNT_MCH_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNT_MCH_ATTT_TXSTP");

                    b.HasIndex(new[] { "ContactMechId" }, "CONT_MECH_ATTR");

                    b.ToTable("CONTACT_MECH_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.ContactMechLink", b =>
                {
                    b.Property<string>("ContactMechIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID_FROM");

                    b.Property<string>("ContactMechIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID_TO");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContactMechIdFrom", "ContactMechIdTo");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_MCH_LNK_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_MCH_LNK_TXSTP");

                    b.HasIndex(new[] { "ContactMechIdFrom" }, "CONT_MECH_FCMECH");

                    b.HasIndex(new[] { "ContactMechIdTo" }, "CONT_MECH_TCMECH");

                    b.ToTable("CONTACT_MECH_LINK", (string)null);
                });

            modelBuilder.Entity("Domain.ContactMechPurposeType", b =>
                {
                    b.Property<string>("ContactMechPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ContactMechPurposeTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNT_MCH_PRS_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNT_MCH_PRS_TP_TXS");

                    b.ToTable("CONTACT_MECH_PURPOSE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ContactMechType", b =>
                {
                    b.Property<string>("ContactMechTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ContactMechTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_MCH_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_MCH_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "CONT_MECH_TYP_PAR");

                    b.ToTable("CONTACT_MECH_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ContactMechTypeAttr", b =>
                {
                    b.Property<string>("ContactMechTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContactMechTypeId", "AttrName");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNT_MCH_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNT_MCH_TP_ATR_TXS");

                    b.HasIndex(new[] { "ContactMechTypeId" }, "CONT_MECH_TYP_ATR");

                    b.ToTable("CONTACT_MECH_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.ContactMechTypePurpose", b =>
                {
                    b.Property<string>("ContactMechTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_TYPE_ID");

                    b.Property<string>("ContactMechPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContactMechTypeId", "ContactMechPurposeTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNT_MCH_TP_PRS_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNT_MCH_TP_PRS_TXS");

                    b.HasIndex(new[] { "ContactMechPurposeTypeId" }, "CONT_MECH_TP_PRPTP");

                    b.HasIndex(new[] { "ContactMechTypeId" }, "CONT_MECH_TP_TYPE");

                    b.ToTable("CONTACT_MECH_TYPE_PURPOSE", (string)null);
                });

            modelBuilder.Entity("Domain.Container", b =>
                {
                    b.Property<string>("ContainerId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTAINER_ID");

                    b.Property<string>("ContainerTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTAINER_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContainerId");

                    b.HasIndex(new[] { "ContainerTypeId" }, "CONTAINER_CTTYP");

                    b.HasIndex(new[] { "FacilityId" }, "CONTAINER_FACILITY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CONTAINER_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CONTAINER_TXSTMP");

                    b.ToTable("CONTAINER", (string)null);
                });

            modelBuilder.Entity("Domain.ContainerGeoPoint", b =>
                {
                    b.Property<string>("ContainerId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTAINER_ID");

                    b.Property<string>("GeoPointId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_POINT_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ContainerId", "GeoPointId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNR_G_PNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNR_G_PNT_TXSTMP");

                    b.HasIndex(new[] { "ContainerId" }, "CONTNRGEOPT_CONTNR");

                    b.HasIndex(new[] { "GeoPointId" }, "CONTNRGEOPT_GEOPT");

                    b.ToTable("CONTAINER_GEO_POINT", (string)null);
                });

            modelBuilder.Entity("Domain.ContainerType", b =>
                {
                    b.Property<string>("ContainerTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTAINER_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContainerTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNR_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNR_TP_TXSTMP");

                    b.ToTable("CONTAINER_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Content", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("CharacterSetId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CHARACTER_SET_ID");

                    b.Property<int?>("ChildBranchCount")
                        .HasColumnType("int")
                        .HasColumnName("CHILD_BRANCH_COUNT");

                    b.Property<int?>("ChildLeafCount")
                        .HasColumnType("int")
                        .HasColumnName("CHILD_LEAF_COUNT");

                    b.Property<string>("ContentName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONTENT_NAME");

                    b.Property<string>("ContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_TYPE_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_METHOD_ID");

                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<string>("DataSourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_ID");

                    b.Property<string>("DecoratorContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DECORATOR_CONTENT_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("InstanceOfContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INSTANCE_OF_CONTENT_ID");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LocaleString")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("LOCALE_STRING");

                    b.Property<string>("MimeTypeId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MIME_TYPE_ID");

                    b.Property<string>("OwnerContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OWNER_CONTENT_ID");

                    b.Property<string>("PrivilegeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIVILEGE_ENUM_ID");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERVICE_NAME");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("TemplateDataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TEMPLATE_DATA_RESOURCE_ID");

                    b.HasKey("ContentId");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "CONTENT_CB_ULGN");

                    b.HasIndex(new[] { "CharacterSetId" }, "CONTENT_CHST");

                    b.HasIndex(new[] { "CustomMethodId" }, "CONTENT_CUSTMET");

                    b.HasIndex(new[] { "DecoratorContentId" }, "CONTENT_DCNTNT");

                    b.HasIndex(new[] { "DataSourceId" }, "CONTENT_DTSRC");

                    b.HasIndex(new[] { "InstanceOfContentId" }, "CONTENT_IOFCNT");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "CONTENT_LMB_ULGN");

                    b.HasIndex(new[] { "OwnerContentId" }, "CONTENT_PCNTNT");

                    b.HasIndex(new[] { "PrivilegeEnumId" }, "CONTENT_PRIVENM");

                    b.HasIndex(new[] { "StatusId" }, "CONTENT_STATUS");

                    b.HasIndex(new[] { "DataResourceId" }, "CONTENT_TO_DATA");

                    b.HasIndex(new[] { "TemplateDataResourceId" }, "CONTENT_TO_TMPDATA");

                    b.HasIndex(new[] { "ContentTypeId" }, "CONTENT_TO_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CONTENT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CONTENT_TXSTMP");

                    b.ToTable("CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.ContentApproval", b =>
                {
                    b.Property<string>("ContentApprovalId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_APPROVAL_ID");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("APPROVAL_DATE");

                    b.Property<string>("ApprovalStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("APPROVAL_STATUS_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("ContentRevisionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_REVISION_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("ContentApprovalId");

                    b.HasIndex(new[] { "ApprovalStatusId" }, "CNTNTAPPR_APSI");

                    b.HasIndex(new[] { "ContentId" }, "CNTNTAPPR_CNT");

                    b.HasIndex(new[] { "PartyId" }, "CNTNTAPPR_PTY");

                    b.HasIndex(new[] { "RoleTypeId" }, "CNTNTAPPR_RLTP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNT_APPRL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNT_APPRL_TXSTMP");

                    b.ToTable("CONTENT_APPROVAL", (string)null);
                });

            modelBuilder.Entity("Domain.ContentAssoc", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("ContentIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID_TO");

                    b.Property<string>("ContentAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ASSOC_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("ContentAssocPredicateId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ASSOC_PREDICATE_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DataSourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_ID");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("LeftCoordinate")
                        .HasColumnType("int")
                        .HasColumnName("LEFT_COORDINATE");

                    b.Property<string>("MapKey")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MAP_KEY");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<int?>("UpperCoordinate")
                        .HasColumnType("int")
                        .HasColumnName("UPPER_COORDINATE");

                    b.HasKey("ContentId", "ContentIdTo", "ContentAssocTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNT_ASSC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNT_ASSC_TXSTMP");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "CONTENTASSC_CBUSR");

                    b.HasIndex(new[] { "DataSourceId" }, "CONTENTASSC_DTSRC");

                    b.HasIndex(new[] { "ContentId" }, "CONTENTASSC_FROM");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "CONTENTASSC_LMBUR");

                    b.HasIndex(new[] { "ContentAssocPredicateId" }, "CONTENTASSC_PRED");

                    b.HasIndex(new[] { "ContentIdTo" }, "CONTENTASSC_TO");

                    b.HasIndex(new[] { "ContentIdTo", "ContentAssocTypeId", "ThruDate" }, "CONTENTASSC_TOQRY");

                    b.HasIndex(new[] { "ContentAssocTypeId" }, "CONTENTASSC_TYP");

                    b.ToTable("CONTENT_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.ContentAssocPredicate", b =>
                {
                    b.Property<string>("ContentAssocPredicateId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ASSOC_PREDICATE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContentAssocPredicateId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_ASC_PRT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_ASC_PRT_TXSTP");

                    b.ToTable("CONTENT_ASSOC_PREDICATE", (string)null);
                });

            modelBuilder.Entity("Domain.ContentAssocType", b =>
                {
                    b.Property<string>("ContentAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContentAssocTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_ASC_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_ASC_TP_TXSTMP");

                    b.ToTable("CONTENT_ASSOC_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ContentAttribute", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContentId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNT_ATTRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNT_ATTRT_TXSTMP");

                    b.HasIndex(new[] { "ContentId" }, "CONTENT_ATTR");

                    b.ToTable("CONTENT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.ContentKeyword", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("Keyword")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("KEYWORD");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("RelevancyWeight")
                        .HasColumnType("int")
                        .HasColumnName("RELEVANCY_WEIGHT");

                    b.HasKey("ContentId", "Keyword");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNT_KWRD_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNT_KWRD_TXSTMP");

                    b.HasIndex(new[] { "ContentId" }, "CNT_KWD_CNT");

                    b.HasIndex(new[] { "Keyword" }, "CNT_KWD_KWD");

                    b.ToTable("CONTENT_KEYWORD", (string)null);
                });

            modelBuilder.Entity("Domain.ContentMetaDatum", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("MetaDataPredicateId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("META_DATA_PREDICATE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DataSourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MetaDataValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("META_DATA_VALUE");

                    b.HasKey("ContentId", "MetaDataPredicateId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNT_MT_DT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNT_MT_DT_TXSTMP");

                    b.HasIndex(new[] { "ContentId" }, "CONTENTMD_CNTNT");

                    b.HasIndex(new[] { "MetaDataPredicateId" }, "CONTENTMD_DMDPRD");

                    b.HasIndex(new[] { "DataSourceId" }, "CONTENTMD_DTSRC");

                    b.ToTable("CONTENT_META_DATA", (string)null);
                });

            modelBuilder.Entity("Domain.ContentOperation", b =>
                {
                    b.Property<string>("ContentOperationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_OPERATION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContentOperationId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNT_OPRTN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNT_OPRTN_TXSTMP");

                    b.ToTable("CONTENT_OPERATION", (string)null);
                });

            modelBuilder.Entity("Domain.ContentPurpose", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("ContentPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_PURPOSE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("ContentId", "ContentPurposeTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNT_PRPS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNT_PRPS_TXSTMP");

                    b.HasIndex(new[] { "ContentId" }, "CONTENT_PRP");

                    b.HasIndex(new[] { "ContentPurposeTypeId" }, "CONTENT_PRP_TYPE");

                    b.ToTable("CONTENT_PURPOSE", (string)null);
                });

            modelBuilder.Entity("Domain.ContentPurposeOperation", b =>
                {
                    b.Property<string>("ContentPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_PURPOSE_TYPE_ID");

                    b.Property<string>("ContentOperationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_OPERATION_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("PrivilegeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIVILEGE_ENUM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContentPurposeTypeId", "ContentOperationId", "RoleTypeId", "StatusId", "PrivilegeEnumId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_PRS_OPN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_PRS_OPN_TXSTP");

                    b.HasIndex(new[] { "ContentOperationId" }, "CONTENT_PRO_OPER");

                    b.HasIndex(new[] { "PrivilegeEnumId" }, "CONTENT_PRO_PEI");

                    b.HasIndex(new[] { "RoleTypeId" }, "CONTENT_PRO_RLT");

                    b.HasIndex(new[] { "StatusId" }, "CONTENT_PRO_STI");

                    b.HasIndex(new[] { "ContentPurposeTypeId" }, "CONTENT_PRO_TYPE");

                    b.ToTable("CONTENT_PURPOSE_OPERATION", (string)null);
                });

            modelBuilder.Entity("Domain.ContentPurposeType", b =>
                {
                    b.Property<string>("ContentPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_PURPOSE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContentPurposeTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_PRS_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_PRS_TP_TXSTMP");

                    b.ToTable("CONTENT_PURPOSE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ContentRevision", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("ContentRevisionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_REVISION_SEQ_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("CommittedByPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMITTED_BY_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContentId", "ContentRevisionSeqId");

                    b.HasIndex(new[] { "CommittedByPartyId" }, "CNTNTREV_CBPTY");

                    b.HasIndex(new[] { "ContentId" }, "CNTNTREV_CNT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNT_RVSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNT_RVSN_TXSTMP");

                    b.ToTable("CONTENT_REVISION", (string)null);
                });

            modelBuilder.Entity("Domain.ContentRevisionItem", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("ContentRevisionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_REVISION_SEQ_ID");

                    b.Property<string>("ItemContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ITEM_CONTENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("NewDataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NEW_DATA_RESOURCE_ID");

                    b.Property<string>("OldDataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OLD_DATA_RESOURCE_ID");

                    b.HasKey("ContentId", "ContentRevisionSeqId", "ItemContentId");

                    b.HasIndex(new[] { "ContentId", "ContentRevisionSeqId" }, "CNTNTREVIT_CNTREV");

                    b.HasIndex(new[] { "NewDataResourceId" }, "CNTNTREVIT_NEWDR");

                    b.HasIndex(new[] { "OldDataResourceId" }, "CNTNTREVIT_OLDDR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_RVN_ITM_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_RVN_ITM_TXSTP");

                    b.ToTable("CONTENT_REVISION_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.ContentRole", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ContentId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "ContentId" }, "CNTNT_RL_CNTNT");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "CNTNT_RL_PTRL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNT_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNT_RL_TXSTMP");

                    b.ToTable("CONTENT_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.ContentSearchConstraint", b =>
                {
                    b.Property<string>("ContentSearchResultId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_SEARCH_RESULT_ID");

                    b.Property<string>("ConstraintSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONSTRAINT_SEQ_ID");

                    b.Property<string>("AnyPrefix")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ANY_PREFIX")
                        .IsFixedLength();

                    b.Property<string>("AnySuffix")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ANY_SUFFIX")
                        .IsFixedLength();

                    b.Property<string>("ConstraintName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONSTRAINT_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("HighValue")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("HIGH_VALUE");

                    b.Property<string>("IncludeSubCategories")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_SUB_CATEGORIES")
                        .IsFixedLength();

                    b.Property<string>("InfoString")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INFO_STRING");

                    b.Property<string>("IsAnd")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_AND")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LowValue")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LOW_VALUE");

                    b.Property<string>("RemoveStems")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REMOVE_STEMS")
                        .IsFixedLength();

                    b.HasKey("ContentSearchResultId", "ConstraintSeqId");

                    b.HasIndex(new[] { "ContentSearchResultId" }, "CNT_SCHRSI_RES");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNT_SRH_CNSTT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNT_SRH_CNSTT_TXSP");

                    b.ToTable("CONTENT_SEARCH_CONSTRAINT", (string)null);
                });

            modelBuilder.Entity("Domain.ContentSearchResult", b =>
                {
                    b.Property<string>("ContentSearchResultId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_SEARCH_RESULT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IsAscending")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_ASCENDING")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NumResults")
                        .HasColumnType("int")
                        .HasColumnName("NUM_RESULTS");

                    b.Property<string>("OrderByName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ORDER_BY_NAME");

                    b.Property<DateTime?>("SearchDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SEARCH_DATE");

                    b.Property<double?>("SecondsTotal")
                        .HasColumnType("double")
                        .HasColumnName("SECONDS_TOTAL");

                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.HasKey("ContentSearchResultId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_SRH_RST_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_SRH_RST_TXSTP");

                    b.ToTable("CONTENT_SEARCH_RESULT", (string)null);
                });

            modelBuilder.Entity("Domain.ContentType", b =>
                {
                    b.Property<string>("ContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ContentTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTNT_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "CNTNT_TYPE_PARENT");

                    b.ToTable("CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ContentTypeAttr", b =>
                {
                    b.Property<string>("ContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContentTypeId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTT_TP_ATR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTT_TP_ATR_TXSTMP");

                    b.HasIndex(new[] { "ContentTypeId" }, "CONTENT_TPAT_TYP");

                    b.ToTable("CONTENT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.CostComponent", b =>
                {
                    b.Property<string>("CostComponentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COST_COMPONENT_ID");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("COST");

                    b.Property<string>("CostComponentCalcId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COST_COMPONENT_CALC_ID");

                    b.Property<string>("CostComponentTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COST_COMPONENT_TYPE_ID");

                    b.Property<string>("CostUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COST_UOM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("GeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.HasKey("CostComponentId");

                    b.HasIndex(new[] { "CostComponentCalcId" }, "COST_COMP_CALC");

                    b.HasIndex(new[] { "CostUomId" }, "COST_COMP_CUOM");

                    b.HasIndex(new[] { "FixedAssetId" }, "COST_COMP_FXADSST");

                    b.HasIndex(new[] { "GeoId" }, "COST_COMP_GEO");

                    b.HasIndex(new[] { "PartyId" }, "COST_COMP_PARTY");

                    b.HasIndex(new[] { "ProductFeatureId" }, "COST_COMP_PRODFEAT");

                    b.HasIndex(new[] { "ProductId" }, "COST_COMP_PRODUCT");

                    b.HasIndex(new[] { "CostComponentTypeId" }, "COST_COMP_TYPE");

                    b.HasIndex(new[] { "WorkEffortId" }, "COST_COMP_WEFF");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_CMPNNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_CMPNNT_TXSTMP");

                    b.ToTable("COST_COMPONENT", (string)null);
                });

            modelBuilder.Entity("Domain.CostComponentAttribute", b =>
                {
                    b.Property<string>("CostComponentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COST_COMPONENT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CostComponentId", "AttrName");

                    b.HasIndex(new[] { "CostComponentId" }, "COST_COMP_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_CMPT_ATTT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_CMPT_ATTT_TXSP");

                    b.ToTable("COST_COMPONENT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.CostComponentCalc", b =>
                {
                    b.Property<string>("CostComponentCalcId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COST_COMPONENT_CALC_ID");

                    b.Property<string>("CostCustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COST_CUSTOM_METHOD_ID");

                    b.Property<string>("CostGlAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COST_GL_ACCOUNT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("FixedCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("FIXED_COST");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OffsettingGlAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OFFSETTING_GL_ACCOUNT_TYPE_ID");

                    b.Property<int?>("PerMilliSecond")
                        .HasColumnType("int")
                        .HasColumnName("PER_MILLI_SECOND");

                    b.Property<decimal?>("VariableCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("VARIABLE_COST");

                    b.HasKey("CostComponentCalcId");

                    b.HasIndex(new[] { "CostGlAccountTypeId" }, "COST_COM_CGLAT");

                    b.HasIndex(new[] { "CostCustomMethodId" }, "COST_COM_CMET");

                    b.HasIndex(new[] { "CurrencyUomId" }, "COST_COM_CUOM");

                    b.HasIndex(new[] { "OffsettingGlAccountTypeId" }, "COST_COM_OGLAT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_CMPT_CLC_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_CMPT_CLC_TXSTP");

                    b.ToTable("COST_COMPONENT_CALC", (string)null);
                });

            modelBuilder.Entity("Domain.CostComponentType", b =>
                {
                    b.Property<string>("CostComponentTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COST_COMPONENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DirectIndirectClassification")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("DIRECT_INDIRECT_CLASSIFICATION");

                    b.Property<string>("FunctionalClassification")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FUNCTIONAL_CLASSIFICATION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.Property<string>("SizeRelationClassification")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SIZE_RELATION_CLASSIFICATION");

                    b.HasKey("CostComponentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "COST_COMP_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_CMPNT_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_CMPNT_TP_TXSTP");

                    b.ToTable("COST_COMPONENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.CostComponentTypeAttr", b =>
                {
                    b.Property<string>("CostComponentTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COST_COMPONENT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CostComponentTypeId", "AttrName");

                    b.HasIndex(new[] { "CostComponentTypeId" }, "COST_COMP_TATTR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_CMT_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_CMT_TP_ATR_TXS");

                    b.ToTable("COST_COMPONENT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.CountryAddressFormat", b =>
                {
                    b.Property<string>("GeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID");

                    b.Property<string>("AddressFormat")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ADDRESS_FORMAT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GeoAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ASSOC_TYPE_ID");

                    b.Property<string>("HasPostalCodeExt")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_POSTAL_CODE_EXT")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PostalCodeRegex")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("POSTAL_CODE_REGEX");

                    b.Property<string>("RequirePostalCode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_POSTAL_CODE")
                        .IsFixedLength();

                    b.Property<string>("RequirePostalCodeExt")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_POSTAL_CODE_EXT")
                        .IsFixedLength();

                    b.Property<string>("RequireStateProvinceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIRE_STATE_PROVINCE_ID");

                    b.HasKey("GeoId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNR_ADDS_FRT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNR_ADDS_FRT_TXSTP");

                    b.HasIndex(new[] { "GeoId" }, "CNY_ADR_GEO");

                    b.HasIndex(new[] { "GeoAssocTypeId" }, "CNY_ADR_GEO_TYPE");

                    b.ToTable("COUNTRY_ADDRESS_FORMAT", (string)null);
                });

            modelBuilder.Entity("Domain.CountryCapital", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COUNTRY_CODE");

                    b.Property<string>("CountryCapital1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COUNTRY_CAPITAL");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CountryCode");

                    b.HasIndex(new[] { "CountryCode" }, "CNTRY_CAP_TO_CODE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTR_CPTL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTR_CPTL_TXSTMP");

                    b.ToTable("COUNTRY_CAPITAL", (string)null);
                });

            modelBuilder.Entity("Domain.CountryCode", b =>
                {
                    b.Property<string>("CountryCode1")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COUNTRY_CODE");

                    b.Property<string>("CountryAbbr")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COUNTRY_ABBR");

                    b.Property<string>("CountryName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COUNTRY_NAME");

                    b.Property<string>("CountryNumber")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COUNTRY_NUMBER");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CountryCode1");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTR_CD_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTR_CD_TXSTMP");

                    b.ToTable("COUNTRY_CODE", (string)null);
                });

            modelBuilder.Entity("Domain.CountryTeleCode", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COUNTRY_CODE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TeleCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TELE_CODE");

                    b.HasKey("CountryCode");

                    b.HasIndex(new[] { "CountryCode" }, "CNTRY_TELE_TO_CODE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CNTR_TL_CD_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CNTR_TL_CD_TXSTMP");

                    b.ToTable("COUNTRY_TELE_CODE", (string)null);
                });

            modelBuilder.Entity("Domain.CreditCard", b =>
                {
                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CARD_NUMBER");

                    b.Property<string>("CardType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CARD_TYPE");

                    b.Property<string>("CompanyNameOnCard")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMPANY_NAME_ON_CARD");

                    b.Property<int?>("ConsecutiveFailedAuths")
                        .HasColumnType("int")
                        .HasColumnName("CONSECUTIVE_FAILED_AUTHS");

                    b.Property<int?>("ConsecutiveFailedNsf")
                        .HasColumnType("int")
                        .HasColumnName("CONSECUTIVE_FAILED_NSF");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ExpireDate")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("EXPIRE_DATE");

                    b.Property<string>("FirstNameOnCard")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FIRST_NAME_ON_CARD");

                    b.Property<string>("IssueNumber")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("ISSUE_NUMBER");

                    b.Property<DateTime?>("LastFailedAuthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_FAILED_AUTH_DATE");

                    b.Property<DateTime?>("LastFailedNsfDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_FAILED_NSF_DATE");

                    b.Property<string>("LastNameOnCard")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LAST_NAME_ON_CARD");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MiddleNameOnCard")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MIDDLE_NAME_ON_CARD");

                    b.Property<string>("SuffixOnCard")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SUFFIX_ON_CARD");

                    b.Property<string>("TitleOnCard")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TITLE_ON_CARD");

                    b.Property<string>("ValidFromDate")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("VALID_FROM_DATE");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex(new[] { "ContactMechId" }, "CREDCARD_CMECH");

                    b.HasIndex(new[] { "ContactMechId" }, "CREDCARD_PADDR");

                    b.HasIndex(new[] { "PaymentMethodId" }, "CREDCARD_PMNTMETH");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CREDIT_CARD_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CREDIT_CARD_TXSTMP");

                    b.ToTable("CREDIT_CARD", (string)null);
                });

            modelBuilder.Entity("Domain.CreditCardTypeGlAccount", b =>
                {
                    b.Property<string>("CardType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CARD_TYPE");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CardType", "OrganizationPartyId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CRT_TP_GL_ACT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CRT_TP_GL_ACT_TS");

                    b.ToTable("CREDIT_CARD_TYPE_GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequest", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<DateTime?>("ClosedDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("CLOSED_DATE_TIME");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("CustRequestCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_CATEGORY_ID");

                    b.Property<DateTime>("CustRequestDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CUST_REQUEST_DATE");

                    b.Property<string>("CustRequestName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CUST_REQUEST_NAME");

                    b.Property<string>("CustRequestTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_TYPE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("FromPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FROM_PARTY_ID");

                    b.Property<string>("FulfillContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FULFILL_CONTACT_MECH_ID");

                    b.Property<string>("InternalComment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INTERNAL_COMMENT");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MaximumAmountUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MAXIMUM_AMOUNT_UOM_ID");

                    b.Property<DateTime?>("OpenDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("OPEN_DATE_TIME");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("PRIORITY");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REASON");

                    b.Property<DateTime?>("ResponseRequiredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RESPONSE_REQUIRED_DATE");

                    b.Property<string>("SalesChannelEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_CHANNEL_ENUM_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("CustRequestId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQST_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQST_TXSTMP");

                    b.HasIndex(new[] { "MaximumAmountUomId" }, "CUST_REQ_AUOM");

                    b.HasIndex(new[] { "CustRequestCategoryId" }, "CUST_REQ_CAT");

                    b.HasIndex(new[] { "SalesChannelEnumId" }, "CUST_REQ_CHANNEL");

                    b.HasIndex(new[] { "CurrencyUomId" }, "CUST_REQ_CUOM");

                    b.HasIndex(new[] { "FromPartyId" }, "CUST_REQ_FRMPTY");

                    b.HasIndex(new[] { "FulfillContactMechId" }, "CUST_REQ_FULCM");

                    b.HasIndex(new[] { "ProductStoreId" }, "CUST_REQ_PRDS");

                    b.HasIndex(new[] { "StatusId" }, "CUST_REQ_STATUS");

                    b.HasIndex(new[] { "CustRequestTypeId" }, "CUST_REQ_TYPE");

                    b.ToTable("CUST_REQUEST", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestAttribute", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustRequestId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_ATTT_TXSTP");

                    b.HasIndex(new[] { "CustRequestId" }, "CUST_REQ_ATTR");

                    b.ToTable("CUST_REQUEST_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestCategory", b =>
                {
                    b.Property<string>("CustRequestCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_CATEGORY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustRequestTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_TYPE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustRequestCategoryId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_CTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_CTR_TXSTMP");

                    b.HasIndex(new[] { "CustRequestTypeId" }, "CUST_RQCT_TYPE");

                    b.ToTable("CUST_REQUEST_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestCommEvent", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustRequestId", "CommunicationEventId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_CMM_EVT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_CMM_EVT_TS");

                    b.HasIndex(new[] { "CommunicationEventId" }, "CUSTREQ_CEV_CEV");

                    b.HasIndex(new[] { "CustRequestId" }, "CUSTREQ_CEV_CRQ");

                    b.ToTable("CUST_REQUEST_COMM_EVENT", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestContent", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("CustRequestId", "ContentId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_CNTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_CNTT_TXSTP");

                    b.HasIndex(new[] { "ContentId" }, "CUSTREQ_CNT_CNT");

                    b.HasIndex(new[] { "CustRequestId" }, "CUSTREQ_CNT_CUSTRQ");

                    b.ToTable("CUST_REQUEST_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestItem", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("CustRequestItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                    b.Property<string>("ConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustRequestResolutionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_RESOLUTION_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("MaximumAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MAXIMUM_AMOUNT");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("PRIORITY");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<DateTime?>("RequiredByDate")
                        .HasColumnType("datetime")
                        .HasColumnName("REQUIRED_BY_DATE");

                    b.Property<decimal?>("ReservLength")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_LENGTH");

                    b.Property<decimal?>("ReservPersons")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_PERSONS");

                    b.Property<DateTime?>("ReservStart")
                        .HasColumnType("datetime")
                        .HasColumnName("RESERV_START");

                    b.Property<decimal?>("SelectedAmount")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SELECTED_AMOUNT");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("Story")
                        .HasColumnType("text")
                        .HasColumnName("STORY");

                    b.HasKey("CustRequestId", "CustRequestItemSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_ITM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_ITM_TXSTMP");

                    b.HasIndex(new[] { "CustRequestId" }, "CUST_REQITM_CREQ");

                    b.HasIndex(new[] { "ProductId" }, "CUST_REQITM_PRD");

                    b.HasIndex(new[] { "CustRequestResolutionId" }, "CUST_REQITM_RES");

                    b.HasIndex(new[] { "StatusId" }, "CUST_REQITM_STTS");

                    b.ToTable("CUST_REQUEST_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestItemNote", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("CustRequestItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustRequestId", "CustRequestItemSeqId", "NoteId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_ITM_NT_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_ITM_NT_TXS");

                    b.HasIndex(new[] { "CustRequestId", "CustRequestItemSeqId" }, "CUST_REQ_ITNT");

                    b.HasIndex(new[] { "NoteId" }, "CUST_REQ_NOTE");

                    b.ToTable("CUST_REQUEST_ITEM_NOTE", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestItemWorkEffort", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("CustRequestItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustRequestId", "CustRequestItemSeqId", "WorkEffortId")
                        .HasName("PK_CUST_REQUEST_ITEM_WORK_EFFO");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_ITM_WRK_EFT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_ITM_WRK_EFT_TS");

                    b.HasIndex(new[] { "WorkEffortId" }, "CUST_REQ_WEFF");

                    b.HasIndex(new[] { "CustRequestId", "CustRequestItemSeqId" }, "WORK_REQFL_CSTRQ");

                    b.ToTable("CUST_REQUEST_ITEM_WORK_EFFORT", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestNote", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustRequestId", "NoteId");

                    b.HasIndex(new[] { "CustRequestId" }, "CRQ_CR");

                    b.HasIndex(new[] { "NoteId" }, "CRQ_NOTE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQST_NT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQST_NT_TXSTMP");

                    b.ToTable("CUST_REQUEST_NOTE", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestParty", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("CustRequestId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "CustRequestId" }, "CREQ_RL_CRQST");

                    b.HasIndex(new[] { "PartyId" }, "CREQ_RL_PARTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "CREQ_RL_PROLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_PRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_PRT_TXSTMP");

                    b.ToTable("CUST_REQUEST_PARTY", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestResolution", b =>
                {
                    b.Property<string>("CustRequestResolutionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_RESOLUTION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustRequestTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_TYPE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustRequestResolutionId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_RSLN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_RSLN_TXSTP");

                    b.HasIndex(new[] { "CustRequestTypeId" }, "CUST_RQRS_TYPE");

                    b.ToTable("CUST_REQUEST_RESOLUTION", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestStatus", b =>
                {
                    b.Property<string>("CustRequestStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_STATUS_ID");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("CustRequestItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("CustRequestStatusId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_STS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_STS_TXSTMP");

                    b.HasIndex(new[] { "StatusId" }, "CUST_REQST_STTS");

                    b.HasIndex(new[] { "CustRequestId" }, "CUST_REQ_STRQ");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "CUST_RQSTTS_USRLGN");

                    b.ToTable("CUST_REQUEST_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestType", b =>
                {
                    b.Property<string>("CustRequestTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.HasKey("CustRequestTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQST_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQST_TP_TXSTMP");

                    b.HasIndex(new[] { "PartyId" }, "CUST_PTY_PARTY");

                    b.HasIndex(new[] { "ParentTypeId" }, "CUST_REQ_TYPE_PAR");

                    b.ToTable("CUST_REQUEST_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestTypeAttr", b =>
                {
                    b.Property<string>("CustRequestTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustRequestTypeId", "AttrName");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_TP_ATR_TXS");

                    b.HasIndex(new[] { "CustRequestTypeId" }, "CUST_REQ_TYPE_ATTR");

                    b.ToTable("CUST_REQUEST_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.CustRequestWorkEffort", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustRequestId", "WorkEffortId");

                    b.HasIndex(new[] { "CustRequestId" }, "CSTREQ_WF_CREQ");

                    b.HasIndex(new[] { "WorkEffortId" }, "CSTREQ_WF_WEFF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CST_RQT_WRK_EFT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CST_RQT_WRK_EFT_TS");

                    b.ToTable("CUST_REQUEST_WORK_EFFORT", (string)null);
                });

            modelBuilder.Entity("Domain.CustomMethod", b =>
                {
                    b.Property<string>("CustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_METHOD_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomMethodName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CUSTOM_METHOD_NAME");

                    b.Property<string>("CustomMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_METHOD_TYPE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustomMethodId");

                    b.HasIndex(new[] { "CustomMethodTypeId" }, "CME_TO_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CSTM_MTHD_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CSTM_MTHD_TXSTMP");

                    b.ToTable("CUSTOM_METHOD", (string)null);
                });

            modelBuilder.Entity("Domain.CustomMethodType", b =>
                {
                    b.Property<string>("CustomMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_METHOD_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("CustomMethodTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "CME_TYPE_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CSTM_MTD_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CSTM_MTD_TP_TXSTMP");

                    b.ToTable("CUSTOM_METHOD_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.CustomScreen", b =>
                {
                    b.Property<string>("CustomScreenId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_SCREEN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomScreenLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CUSTOM_SCREEN_LOCATION");

                    b.Property<string>("CustomScreenName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CUSTOM_SCREEN_NAME");

                    b.Property<string>("CustomScreenTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_SCREEN_TYPE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustomScreenId");

                    b.HasIndex(new[] { "CustomScreenTypeId" }, "CSCR_TO_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CSTM_SCRN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CSTM_SCRN_TXSTMP");

                    b.ToTable("CUSTOM_SCREEN", (string)null);
                });

            modelBuilder.Entity("Domain.CustomScreenType", b =>
                {
                    b.Property<string>("CustomScreenTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_SCREEN_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("CustomScreenTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CSTM_SCN_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CSTM_SCN_TP_TXSTMP");

                    b.ToTable("CUSTOM_SCREEN_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.CustomTimePeriod", b =>
                {
                    b.Property<string>("CustomTimePeriodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_TIME_PERIOD_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("IsClosed")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_CLOSED")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<string>("ParentPeriodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_PERIOD_ID");

                    b.Property<string>("PeriodName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PERIOD_NAME");

                    b.Property<int?>("PeriodNum")
                        .HasColumnType("int")
                        .HasColumnName("PERIOD_NUM");

                    b.Property<string>("PeriodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERIOD_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("CustomTimePeriodId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "CSTM_TM_PRD_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "CSTM_TM_PRD_TXSTMP");

                    b.HasIndex(new[] { "ParentPeriodId" }, "ORG_PRD_PARPER");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "ORG_PRD_PARTY");

                    b.HasIndex(new[] { "PeriodTypeId" }, "ORG_PRD_PERTYP");

                    b.ToTable("CUSTOM_TIME_PERIOD", (string)null);
                });

            modelBuilder.Entity("Domain.DataCategory", b =>
                {
                    b.Property<string>("DataCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_CATEGORY_ID");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CATEGORY_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_CATEGORY_ID");

                    b.HasKey("DataCategoryId");

                    b.HasIndex(new[] { "ParentCategoryId" }, "DATA_CAT_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DT_CTGR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DT_CTGR_TXSTMP");

                    b.ToTable("DATA_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.DataResource", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<string>("CharacterSetId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CHARACTER_SET_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DataCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_CATEGORY_ID");

                    b.Property<string>("DataResourceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DATA_RESOURCE_NAME");

                    b.Property<string>("DataResourceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_TYPE_ID");

                    b.Property<string>("DataSourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_ID");

                    b.Property<string>("DataTemplateTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_TEMPLATE_TYPE_ID");

                    b.Property<string>("IsPublic")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_PUBLIC")
                        .IsFixedLength();

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LocaleString")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("LOCALE_STRING");

                    b.Property<string>("MimeTypeId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MIME_TYPE_ID");

                    b.Property<string>("ObjectInfo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OBJECT_INFO");

                    b.Property<string>("RelatedDetailId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RELATED_DETAIL_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("SurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_ID");

                    b.Property<string>("SurveyResponseId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_RESPONSE_ID");

                    b.HasKey("DataResourceId");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "DATA_REC_CB_ULGN");

                    b.HasIndex(new[] { "CharacterSetId" }, "DATA_REC_CHST");

                    b.HasIndex(new[] { "DataSourceId" }, "DATA_REC_DTSRC");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "DATA_REC_LMB_ULGN");

                    b.HasIndex(new[] { "SurveyId" }, "DATA_REC_SURVEY");

                    b.HasIndex(new[] { "SurveyResponseId" }, "DATA_REC_SVRSP");

                    b.HasIndex(new[] { "DataCategoryId" }, "DATA_REC_TO_CAT");

                    b.HasIndex(new[] { "DataTemplateTypeId" }, "DATA_REC_TO_TTP");

                    b.HasIndex(new[] { "DataResourceTypeId" }, "DATA_REC_TO_TYPE");

                    b.HasIndex(new[] { "StatusId" }, "DTRSRC_STATUS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DT_RSRC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DT_RSRC_TXSTMP");

                    b.ToTable("DATA_RESOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.DataResourceAttribute", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DataResourceId", "AttrName");

                    b.HasIndex(new[] { "DataResourceId" }, "DATA_REC_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DT_RSC_ATTRT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DT_RSC_ATTRT_TXSTP");

                    b.ToTable("DATA_RESOURCE_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.DataResourceMetaDatum", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<string>("MetaDataPredicateId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("META_DATA_PREDICATE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DataSourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MetaDataValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("META_DATA_VALUE");

                    b.HasKey("DataResourceId", "MetaDataPredicateId");

                    b.HasIndex(new[] { "DataResourceId" }, "DATA_MD_DATREC");

                    b.HasIndex(new[] { "MetaDataPredicateId" }, "DATA_MD_DMDPRD");

                    b.HasIndex(new[] { "DataSourceId" }, "DATA_MD_DTSRC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DT_RSC_MT_DT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DT_RSC_MT_DT_TXSTP");

                    b.ToTable("DATA_RESOURCE_META_DATA", (string)null);
                });

            modelBuilder.Entity("Domain.DataResourcePurpose", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<string>("ContentPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_PURPOSE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DataResourceId", "ContentPurposeTypeId");

                    b.HasIndex(new[] { "DataResourceId" }, "DATA_REC_PRP");

                    b.HasIndex(new[] { "ContentPurposeTypeId" }, "DATA_REC_PRP_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DT_RSRC_PRS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DT_RSRC_PRS_TXSTMP");

                    b.ToTable("DATA_RESOURCE_PURPOSE", (string)null);
                });

            modelBuilder.Entity("Domain.DataResourceRole", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("DataResourceId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "DataResourceId" }, "DATARECRL_DATREC");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "DATARECRL_PTRL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DT_RSRC_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DT_RSRC_RL_TXSTMP");

                    b.ToTable("DATA_RESOURCE_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.DataResourceType", b =>
                {
                    b.Property<string>("DataResourceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("DataResourceTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "DATA_OBTYPE_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DT_RSRC_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DT_RSRC_TP_TXSTMP");

                    b.ToTable("DATA_RESOURCE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.DataResourceTypeAttr", b =>
                {
                    b.Property<string>("DataResourceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DataResourceTypeId", "AttrName");

                    b.HasIndex(new[] { "DataResourceTypeId" }, "DATA_OBTYPE_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DT_RSC_TP_ATR_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DT_RSC_TP_ATR_TXSP");

                    b.ToTable("DATA_RESOURCE_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.DataSource", b =>
                {
                    b.Property<string>("DataSourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DataSourceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_TYPE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DataSourceId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DATA_SOURCE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DATA_SOURCE_TXSTMP");

                    b.HasIndex(new[] { "DataSourceTypeId" }, "DATA_SRC_TYP");

                    b.ToTable("DATA_SOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.DataSourceType", b =>
                {
                    b.Property<string>("DataSourceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DataSourceTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DT_SRC_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DT_SRC_TP_TXSTMP");

                    b.ToTable("DATA_SOURCE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.DataTemplateType", b =>
                {
                    b.Property<string>("DataTemplateTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_TEMPLATE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Extension")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("EXTENSION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DataTemplateTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DT_TMPLT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DT_TMPLT_TP_TXSTMP");

                    b.ToTable("DATA_TEMPLATE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Deduction", b =>
                {
                    b.Property<string>("DeductionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEDUCTION_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DeductionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEDUCTION_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.HasKey("DeductionId");

                    b.HasIndex(new[] { "DeductionTypeId" }, "DEDCTN_DEDTYP");

                    b.HasIndex(new[] { "PaymentId" }, "DEDCTN_PMNT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DEDUCTION_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DEDUCTION_TXSTMP");

                    b.ToTable("DEDUCTION", (string)null);
                });

            modelBuilder.Entity("Domain.DeductionType", b =>
                {
                    b.Property<string>("DeductionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEDUCTION_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("DeductionTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DDCTN_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DDCTN_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "DEDUCT_TYP_PAR");

                    b.ToTable("DEDUCTION_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Deliverable", b =>
                {
                    b.Property<string>("DeliverableId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DELIVERABLE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DeliverableName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DELIVERABLE_NAME");

                    b.Property<string>("DeliverableTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DELIVERABLE_TYPE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DeliverableId");

                    b.HasIndex(new[] { "DeliverableTypeId" }, "DELIVERABLE_DLTYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DELIVERABLE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DELIVERABLE_TXSTMP");

                    b.ToTable("DELIVERABLE", (string)null);
                });

            modelBuilder.Entity("Domain.DeliverableType", b =>
                {
                    b.Property<string>("DeliverableTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DELIVERABLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DeliverableTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DLVRBL_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DLVRBL_TP_TXSTMP");

                    b.ToTable("DELIVERABLE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Delivery", b =>
                {
                    b.Property<string>("DeliveryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DELIVERY_ID");

                    b.Property<DateTime?>("ActualArrivalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ACTUAL_ARRIVAL_DATE");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ACTUAL_START_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DestFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEST_FACILITY_ID");

                    b.Property<decimal?>("EndMileage")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("END_MILEAGE");

                    b.Property<DateTime?>("EstimatedArrivalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_ARRIVAL_DATE");

                    b.Property<DateTime?>("EstimatedStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_START_DATE");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<decimal?>("FuelUsed")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("FUEL_USED");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OriginFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGIN_FACILITY_ID");

                    b.Property<decimal?>("StartMileage")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("START_MILEAGE");

                    b.HasKey("DeliveryId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DELIVERY_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DELIVERY_TXSTMP");

                    b.HasIndex(new[] { "DestFacilityId" }, "DELIV_DFAC");

                    b.HasIndex(new[] { "FixedAssetId" }, "DELIV_FXAS");

                    b.HasIndex(new[] { "OriginFacilityId" }, "DELIV_OFAC");

                    b.ToTable("DELIVERY", (string)null);
                });

            modelBuilder.Entity("Domain.DesiredFeature", b =>
                {
                    b.Property<string>("DesiredFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DESIRED_FEATURE_ID");

                    b.Property<string>("RequirementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OptionalInd")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("OPTIONAL_IND")
                        .IsFixedLength();

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.HasKey("DesiredFeatureId", "RequirementId");

                    b.HasIndex(new[] { "ProductFeatureId" }, "DES_FEAT_PFEAT");

                    b.HasIndex(new[] { "RequirementId" }, "DES_FEAT_REQ");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DSRD_FTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DSRD_FTR_TXSTMP");

                    b.ToTable("DESIRED_FEATURE", (string)null);
                });

            modelBuilder.Entity("Domain.Document", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DOCUMENT_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_CREATED");

                    b.Property<string>("DocumentLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DOCUMENT_LOCATION");

                    b.Property<string>("DocumentText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DOCUMENT_TEXT");

                    b.Property<string>("DocumentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DOCUMENT_TYPE_ID");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("longblob")
                        .HasColumnName("IMAGE_DATA");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DocumentId");

                    b.HasIndex(new[] { "DocumentTypeId" }, "DOCUMENT_TO_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DOCUMENT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DOCUMENT_TXSTMP");

                    b.ToTable("DOCUMENT", (string)null);
                });

            modelBuilder.Entity("Domain.DocumentAttribute", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DOCUMENT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DocumentId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DCMNT_ATTRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DCMNT_ATTRT_TXSTMP");

                    b.HasIndex(new[] { "DocumentId" }, "DOCUMENT_ATTR");

                    b.ToTable("DOCUMENT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.DocumentType", b =>
                {
                    b.Property<string>("DocumentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DOCUMENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("DocumentTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DCMNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DCMNT_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "DOC_TYPE_PARENT");

                    b.ToTable("DOCUMENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.DocumentTypeAttr", b =>
                {
                    b.Property<string>("DocumentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DOCUMENT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DocumentTypeId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "DCMT_TP_ATR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "DCMT_TP_ATR_TXSTMP");

                    b.HasIndex(new[] { "DocumentTypeId" }, "DOC_TYPE_ATTR");

                    b.ToTable("DOCUMENT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.EftAccount", b =>
                {
                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCOUNT_NUMBER");

                    b.Property<string>("AccountType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ACCOUNT_TYPE");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BANK_NAME");

                    b.Property<string>("CompanyNameOnAccount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMPANY_NAME_ON_ACCOUNT");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("NameOnAccount")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NAME_ON_ACCOUNT");

                    b.Property<string>("RoutingNumber")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ROUTING_NUMBER");

                    b.Property<int?>("YearsAtBank")
                        .HasColumnType("int")
                        .HasColumnName("YEARS_AT_BANK");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex(new[] { "ContactMechId" }, "EFTACCT_CMECH");

                    b.HasIndex(new[] { "ContactMechId" }, "EFTACCT_PADDR");

                    b.HasIndex(new[] { "PaymentMethodId" }, "EFTACCT_PMETH");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EFT_ACCOUNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EFT_ACCOUNT_TXSTMP");

                    b.ToTable("EFT_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.ElectronicText", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TextData")
                        .HasColumnType("text")
                        .HasColumnName("TEXT_DATA");

                    b.HasKey("DataResourceId");

                    b.HasIndex(new[] { "DataResourceId" }, "DATA_REC_TEXT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ELCTRNC_TXT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ELCTRNC_TXT_TXSTMP");

                    b.ToTable("ELECTRONIC_TEXT", (string)null);
                });

            modelBuilder.Entity("Domain.EmailAddressVerification", b =>
                {
                    b.Property<string>("EmailAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("EMAIL_ADDRESS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EXPIRE_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("VerifyHash")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("VERIFY_HASH");

                    b.HasKey("EmailAddress");

                    b.HasIndex(new[] { "VerifyHash" }, "EMAIL_VERIFY_HASH")
                        .IsUnique();

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EML_ADDS_VRFN_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EML_ADDS_VRFN_TXSP");

                    b.ToTable("EMAIL_ADDRESS_VERIFICATION", (string)null);
                });

            modelBuilder.Entity("Domain.EmailTemplateSetting", b =>
                {
                    b.Property<string>("EmailTemplateSettingId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMAIL_TEMPLATE_SETTING_ID");

                    b.Property<string>("BccAddress")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("BCC_ADDRESS");

                    b.Property<string>("BodyScreenLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("BODY_SCREEN_LOCATION");

                    b.Property<string>("CcAddress")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("CC_ADDRESS");

                    b.Property<string>("ContentType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONTENT_TYPE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("EmailType")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMAIL_TYPE");

                    b.Property<string>("FromAddress")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("FROM_ADDRESS");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SUBJECT");

                    b.Property<string>("XslfoAttachScreenLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("XSLFO_ATTACH_SCREEN_LOCATION");

                    b.HasKey("EmailTemplateSettingId");

                    b.HasIndex(new[] { "EmailType" }, "EMAILSET_ENUM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EML_TMPT_STG_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EML_TMPT_STG_TXSTP");

                    b.ToTable("EMAIL_TEMPLATE_SETTING", (string)null);
                });

            modelBuilder.Entity("Domain.EmplLeave", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("LeaveTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LEAVE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("ApproverPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("APPROVER_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("EmplLeaveReasonTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_LEAVE_REASON_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LeaveStatus")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LEAVE_STATUS");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "LeaveTypeId", "FromDate");

                    b.HasIndex(new[] { "ApproverPartyId" }, "EMPL_LEAVE_APPR");

                    b.HasIndex(new[] { "LeaveTypeId" }, "EMPL_LEAVE_ELETP");

                    b.HasIndex(new[] { "PartyId" }, "EMPL_LEAVE_PRTY");

                    b.HasIndex(new[] { "LeaveStatus" }, "EMPL_LEAVE_STS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EMPL_LEAVE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EMPL_LEAVE_TXSTMP");

                    b.HasIndex(new[] { "EmplLeaveReasonTypeId" }, "EMP_LEAV_REAS_ELTP");

                    b.ToTable("EMPL_LEAVE", (string)null);
                });

            modelBuilder.Entity("Domain.EmplLeaveReasonType", b =>
                {
                    b.Property<string>("EmplLeaveReasonTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_LEAVE_REASON_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("EmplLeaveReasonTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EML_LV_RSN_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EML_LV_RSN_TP_TXSP");

                    b.HasIndex(new[] { "ParentTypeId" }, "EMPL_REASON_TPAR");

                    b.ToTable("EMPL_LEAVE_REASON_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.EmplLeaveType", b =>
                {
                    b.Property<string>("LeaveTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LEAVE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("LeaveTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "EMPL_LEAVE_TPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EMPL_LV_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EMPL_LV_TP_TXSTMP");

                    b.ToTable("EMPL_LEAVE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.EmplPosition", b =>
                {
                    b.Property<string>("EmplPositionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_ID");

                    b.Property<DateTime?>("ActualFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ACTUAL_FROM_DATE");

                    b.Property<DateTime?>("ActualThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ACTUAL_THRU_DATE");

                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("BudgetItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EmplPositionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_TYPE_ID");

                    b.Property<DateTime?>("EstimatedFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_FROM_DATE");

                    b.Property<DateTime?>("EstimatedThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_THRU_DATE");

                    b.Property<string>("ExemptFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("EXEMPT_FLAG")
                        .IsFixedLength();

                    b.Property<string>("FulltimeFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FULLTIME_FLAG")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("SalaryFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SALARY_FLAG")
                        .IsFixedLength();

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("TemporaryFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TEMPORARY_FLAG")
                        .IsFixedLength();

                    b.HasKey("EmplPositionId");

                    b.HasIndex(new[] { "PartyId" }, "EMPL_POS_PRTY");

                    b.HasIndex(new[] { "StatusId" }, "EMPL_POS_STTS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EMPL_PSTN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EMPL_PSTN_TXSTMP");

                    b.ToTable("EMPL_POSITION", (string)null);
                });

            modelBuilder.Entity("Domain.EmplPositionClassType", b =>
                {
                    b.Property<string>("EmplPositionClassTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_CLASS_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("EmplPositionClassTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EML_PSN_CLS_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EML_PSN_CLS_TP_TXS");

                    b.HasIndex(new[] { "ParentTypeId" }, "EMPL_CLS_TYP_PAR");

                    b.ToTable("EMPL_POSITION_CLASS_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.EmplPositionFulfillment", b =>
                {
                    b.Property<string>("EmplPositionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("EmplPositionId", "PartyId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EML_PSN_FLFLT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EML_PSN_FLFLT_TXSP");

                    b.HasIndex(new[] { "EmplPositionId" }, "EMPL_PSFLMT_EMPS");

                    b.HasIndex(new[] { "PartyId" }, "EMPL_PSFLMT_PRTY");

                    b.ToTable("EMPL_POSITION_FULFILLMENT", (string)null);
                });

            modelBuilder.Entity("Domain.EmplPositionReportingStruct", b =>
                {
                    b.Property<string>("EmplPositionIdReportingTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_ID_REPORTING_TO");

                    b.Property<string>("EmplPositionIdManagedBy")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_ID_MANAGED_BY");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PrimaryFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PRIMARY_FLAG")
                        .IsFixedLength();

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("EmplPositionIdReportingTo", "EmplPositionIdManagedBy", "FromDate")
                        .HasName("PK_EMPL_POSITION_REPORTING_STR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EML_PSN_RPG_STT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EML_PSN_RPG_STT_TS");

                    b.HasIndex(new[] { "EmplPositionIdManagedBy" }, "EMPL_PSRPS_EMPSM");

                    b.HasIndex(new[] { "EmplPositionIdReportingTo" }, "EMPL_PSRPS_EMPSR");

                    b.ToTable("EMPL_POSITION_REPORTING_STRUCT", (string)null);
                });

            modelBuilder.Entity("Domain.EmplPositionResponsibility", b =>
                {
                    b.Property<string>("EmplPositionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_ID");

                    b.Property<string>("ResponsibilityTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RESPONSIBILITY_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("EmplPositionId", "ResponsibilityTypeId", "FromDate")
                        .HasName("PK_EMPL_POSITION_RESPONSIBILIT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EML_PSN_RSPNT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EML_PSN_RSPNT_TXSP");

                    b.HasIndex(new[] { "EmplPositionId" }, "EMPL_PSRTY_EMPS");

                    b.HasIndex(new[] { "ResponsibilityTypeId" }, "EMPL_PSRTY_RYTP");

                    b.ToTable("EMPL_POSITION_RESPONSIBILITY", (string)null);
                });

            modelBuilder.Entity("Domain.EmplPositionType", b =>
                {
                    b.Property<string>("EmplPositionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("EmplPositionTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "EMPL_POSI_TYP_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EMPL_PSN_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EMPL_PSN_TP_TXSTMP");

                    b.ToTable("EMPL_POSITION_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.EmplPositionTypeClass", b =>
                {
                    b.Property<string>("EmplPositionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_TYPE_ID");

                    b.Property<string>("EmplPositionClassTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_CLASS_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<double?>("StandardHoursPerWeek")
                        .HasColumnType("double")
                        .HasColumnName("STANDARD_HOURS_PER_WEEK");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("EmplPositionTypeId", "EmplPositionClassTypeId", "FromDate");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EML_PSN_TP_CLS_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EML_PSN_TP_CLS_TXS");

                    b.HasIndex(new[] { "EmplPositionClassTypeId" }, "EMPL_PSTPCS_EPCTP");

                    b.HasIndex(new[] { "EmplPositionTypeId" }, "EMPL_PSTPCS_EPTP");

                    b.ToTable("EMPL_POSITION_TYPE_CLASS", (string)null);
                });

            modelBuilder.Entity("Domain.EmplPositionTypeRateNew", b =>
                {
                    b.Property<string>("EmplPositionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_TYPE_ID");

                    b.Property<string>("RateTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RATE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PayGradeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAY_GRADE_ID");

                    b.Property<string>("SalaryStepSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALARY_STEP_SEQ_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("EmplPositionTypeId", "RateTypeId", "FromDate");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EML_TP_RT_NW_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EML_TP_RT_NW_TS");

                    b.HasIndex(new[] { "EmplPositionTypeId" }, "EMPL_PTPRT_EPTP");

                    b.ToTable("EMPL_POSITION_TYPE_RATE_NEW", (string)null);
                });

            modelBuilder.Entity("Domain.Employment", b =>
                {
                    b.Property<string>("RoleTypeIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_FROM");

                    b.Property<string>("RoleTypeIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_TO");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TerminationReasonId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERMINATION_REASON_ID");

                    b.Property<string>("TerminationTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERMINATION_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("RoleTypeIdFrom", "RoleTypeIdTo", "PartyIdFrom", "PartyIdTo", "FromDate");

                    b.HasIndex(new[] { "PartyIdFrom", "RoleTypeIdFrom" }, "EMPLMNT_FPTRL");

                    b.HasIndex(new[] { "PartyIdFrom" }, "EMPLMNT_FPTY");

                    b.HasIndex(new[] { "PartyIdTo", "RoleTypeIdTo" }, "EMPLMNT_TPTRL");

                    b.HasIndex(new[] { "PartyIdTo" }, "EMPLMNT_TPTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EMPLOYMENT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EMPLOYMENT_TXSTMP");

                    b.ToTable("EMPLOYMENT", (string)null);
                });

            modelBuilder.Entity("Domain.EmploymentApp", b =>
                {
                    b.Property<string>("ApplicationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("APPLICATION_ID");

                    b.Property<DateTime?>("ApplicationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("APPLICATION_DATE");

                    b.Property<string>("ApplyingPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("APPLYING_PARTY_ID");

                    b.Property<string>("ApproverPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("APPROVER_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EmplPositionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_ID");

                    b.Property<string>("EmploymentAppSourceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPLOYMENT_APP_SOURCE_TYPE_ID");

                    b.Property<string>("JobRequisitionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_REQUISITION_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ReferredByPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REFERRED_BY_PARTY_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("ApplicationId");

                    b.HasIndex(new[] { "ApproverPartyId" }, "EMPLMNT_APP_APER");

                    b.HasIndex(new[] { "JobRequisitionId" }, "EMPLMNT_APP_JBRQ");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EMPLMNT_APP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EMPLMNT_APP_TXSTMP");

                    b.ToTable("EMPLOYMENT_APP", (string)null);
                });

            modelBuilder.Entity("Domain.EmploymentAppSourceType", b =>
                {
                    b.Property<string>("EmploymentAppSourceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPLOYMENT_APP_SOURCE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("EmploymentAppSourceTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "EMPL_APP_SRC_TYP");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "EMT_APP_SRC_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "EMT_APP_SRC_TP_TXS");

                    b.ToTable("EMPLOYMENT_APP_SOURCE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.EntityAuditLog", b =>
                {
                    b.Property<string>("AuditHistorySeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AUDIT_HISTORY_SEQ_ID");

                    b.Property<string>("ChangedByInfo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CHANGED_BY_INFO");

                    b.Property<DateTime?>("ChangedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CHANGED_DATE");

                    b.Property<string>("ChangedEntityName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CHANGED_ENTITY_NAME");

                    b.Property<string>("ChangedFieldName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CHANGED_FIELD_NAME");

                    b.Property<string>("ChangedSessionInfo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CHANGED_SESSION_INFO");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("NewValueText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NEW_VALUE_TEXT");

                    b.Property<string>("OldValueText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OLD_VALUE_TEXT");

                    b.Property<string>("PkCombinedValueText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PK_COMBINED_VALUE_TEXT");

                    b.HasKey("AuditHistorySeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENTT_ADT_LG_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENTT_ADT_LG_TXSTMP");

                    b.ToTable("ENTITY_AUDIT_LOG", (string)null);
                });

            modelBuilder.Entity("Domain.EntityGroup", b =>
                {
                    b.Property<string>("EntityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENTITY_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EntityGroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ENTITY_GROUP_NAME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("EntityGroupId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENTT_GRP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENTT_GRP_TXSTMP");

                    b.ToTable("ENTITY_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.EntityGroupEntry", b =>
                {
                    b.Property<string>("EntityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENTITY_GROUP_ID");

                    b.Property<string>("EntityOrPackage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ENTITY_OR_PACKAGE");

                    b.Property<string>("ApplEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("APPL_ENUM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("EntityGroupId", "EntityOrPackage");

                    b.HasIndex(new[] { "EntityGroupId" }, "ENTGRP_GRP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENT_GRP_ENR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENT_GRP_ENR_TXSTMP");

                    b.ToTable("ENTITY_GROUP_ENTRY", (string)null);
                });

            modelBuilder.Entity("Domain.EntityKeyStore", b =>
                {
                    b.Property<string>("KeyName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("KEY_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("KeyText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("KEY_TEXT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("KeyName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENTT_K_STR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENTT_K_STR_TXSTMP");

                    b.ToTable("ENTITY_KEY_STORE", (string)null);
                });

            modelBuilder.Entity("Domain.EntitySync", b =>
                {
                    b.Property<string>("EntitySyncId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENTITY_SYNC_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ForPullOnly")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FOR_PULL_ONLY")
                        .IsFixedLength();

                    b.Property<string>("ForPushOnly")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FOR_PUSH_ONLY")
                        .IsFixedLength();

                    b.Property<double?>("KeepRemoveInfoHours")
                        .HasColumnType("double")
                        .HasColumnName("KEEP_REMOVE_INFO_HOURS");

                    b.Property<DateTime?>("LastHistoryStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_HISTORY_START_DATE");

                    b.Property<DateTime?>("LastSuccessfulSynchTime")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_SUCCESSFUL_SYNCH_TIME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("MaxRunningNoUpdateMillis")
                        .HasColumnType("int")
                        .HasColumnName("MAX_RUNNING_NO_UPDATE_MILLIS");

                    b.Property<int?>("OfflineSyncSplitMillis")
                        .HasColumnType("int")
                        .HasColumnName("OFFLINE_SYNC_SPLIT_MILLIS");

                    b.Property<DateTime?>("PreOfflineSynchTime")
                        .HasColumnType("datetime")
                        .HasColumnName("PRE_OFFLINE_SYNCH_TIME");

                    b.Property<string>("RunStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RUN_STATUS_ID");

                    b.Property<int?>("SyncEndBufferMillis")
                        .HasColumnType("int")
                        .HasColumnName("SYNC_END_BUFFER_MILLIS");

                    b.Property<int?>("SyncSplitMillis")
                        .HasColumnType("int")
                        .HasColumnName("SYNC_SPLIT_MILLIS");

                    b.Property<string>("TargetDelegatorName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TARGET_DELEGATOR_NAME");

                    b.Property<string>("TargetServiceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TARGET_SERVICE_NAME");

                    b.HasKey("EntitySyncId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENTITY_SYNC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENTITY_SYNC_TXSTMP");

                    b.ToTable("ENTITY_SYNC", (string)null);
                });

            modelBuilder.Entity("Domain.EntitySyncHistory", b =>
                {
                    b.Property<string>("EntitySyncId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENTITY_SYNC_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("START_DATE");

                    b.Property<DateTime?>("BeginningSynchTime")
                        .HasColumnType("datetime")
                        .HasColumnName("BEGINNING_SYNCH_TIME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastCandidateEndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_CANDIDATE_END_TIME");

                    b.Property<int?>("LastSplitStartTime")
                        .HasColumnType("int")
                        .HasColumnName("LAST_SPLIT_START_TIME");

                    b.Property<DateTime?>("LastSuccessfulSynchTime")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_SUCCESSFUL_SYNCH_TIME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("PerSplitMaxItems")
                        .HasColumnType("int")
                        .HasColumnName("PER_SPLIT_MAX_ITEMS");

                    b.Property<int?>("PerSplitMaxMillis")
                        .HasColumnType("int")
                        .HasColumnName("PER_SPLIT_MAX_MILLIS");

                    b.Property<int?>("PerSplitMinItems")
                        .HasColumnType("int")
                        .HasColumnName("PER_SPLIT_MIN_ITEMS");

                    b.Property<int?>("PerSplitMinMillis")
                        .HasColumnType("int")
                        .HasColumnName("PER_SPLIT_MIN_MILLIS");

                    b.Property<string>("RunStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RUN_STATUS_ID");

                    b.Property<int?>("RunningTimeMillis")
                        .HasColumnType("int")
                        .HasColumnName("RUNNING_TIME_MILLIS");

                    b.Property<int?>("ToCreateInserted")
                        .HasColumnType("int")
                        .HasColumnName("TO_CREATE_INSERTED");

                    b.Property<int?>("ToCreateNotUpdated")
                        .HasColumnType("int")
                        .HasColumnName("TO_CREATE_NOT_UPDATED");

                    b.Property<int?>("ToCreateUpdated")
                        .HasColumnType("int")
                        .HasColumnName("TO_CREATE_UPDATED");

                    b.Property<int?>("ToRemoveAlreadyDeleted")
                        .HasColumnType("int")
                        .HasColumnName("TO_REMOVE_ALREADY_DELETED");

                    b.Property<int?>("ToRemoveDeleted")
                        .HasColumnType("int")
                        .HasColumnName("TO_REMOVE_DELETED");

                    b.Property<int?>("ToStoreInserted")
                        .HasColumnType("int")
                        .HasColumnName("TO_STORE_INSERTED");

                    b.Property<int?>("ToStoreNotUpdated")
                        .HasColumnType("int")
                        .HasColumnName("TO_STORE_NOT_UPDATED");

                    b.Property<int?>("ToStoreUpdated")
                        .HasColumnType("int")
                        .HasColumnName("TO_STORE_UPDATED");

                    b.Property<int?>("TotalRowsExported")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_ROWS_EXPORTED");

                    b.Property<int?>("TotalRowsToCreate")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_ROWS_TO_CREATE");

                    b.Property<int?>("TotalRowsToRemove")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_ROWS_TO_REMOVE");

                    b.Property<int?>("TotalRowsToStore")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_ROWS_TO_STORE");

                    b.Property<int?>("TotalSplits")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_SPLITS");

                    b.Property<int?>("TotalStoreCalls")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_STORE_CALLS");

                    b.HasKey("EntitySyncId", "StartDate");

                    b.HasIndex(new[] { "EntitySyncId" }, "ENTSYNC_HSTSNC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENT_SNC_HSR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENT_SNC_HSR_TXSTMP");

                    b.ToTable("ENTITY_SYNC_HISTORY", (string)null);
                });

            modelBuilder.Entity("Domain.EntitySyncInclude", b =>
                {
                    b.Property<string>("EntitySyncId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENTITY_SYNC_ID");

                    b.Property<string>("EntityOrPackage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ENTITY_OR_PACKAGE");

                    b.Property<string>("ApplEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("APPL_ENUM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("EntitySyncId", "EntityOrPackage");

                    b.HasIndex(new[] { "EntitySyncId" }, "ENTSYNC_INCSNC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENT_SNC_INCD_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENT_SNC_INCD_TXSTP");

                    b.ToTable("ENTITY_SYNC_INCLUDE", (string)null);
                });

            modelBuilder.Entity("Domain.EntitySyncIncludeGroup", b =>
                {
                    b.Property<string>("EntitySyncId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENTITY_SYNC_ID");

                    b.Property<string>("EntityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENTITY_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("EntitySyncId", "EntityGroupId");

                    b.HasIndex(new[] { "EntityGroupId" }, "ENTSNCGU_GRP");

                    b.HasIndex(new[] { "EntitySyncId" }, "ENTSNCGU_SNC");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENT_SNC_IND_GRP_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENT_SNC_IND_GRP_TS");

                    b.ToTable("ENTITY_SYNC_INCLUDE_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.EntitySyncRemove", b =>
                {
                    b.Property<string>("EntitySyncRemoveId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENTITY_SYNC_REMOVE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PrimaryKeyRemoved")
                        .HasColumnType("text")
                        .HasColumnName("PRIMARY_KEY_REMOVED");

                    b.HasKey("EntitySyncRemoveId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENT_SNC_RMV_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENT_SNC_RMV_TXSTMP");

                    b.ToTable("ENTITY_SYNC_REMOVE", (string)null);
                });

            modelBuilder.Entity("Domain.Enumeration", b =>
                {
                    b.Property<string>("EnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENUM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("EnumCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ENUM_CODE");

                    b.Property<string>("EnumTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENUM_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("SequenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEQUENCE_ID");

                    b.HasKey("EnumId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENUMERATION_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENUMERATION_TXSTMP");

                    b.HasIndex(new[] { "EnumTypeId" }, "ENUM_TO_TYPE");

                    b.ToTable("ENUMERATION", (string)null);
                });

            modelBuilder.Entity("Domain.EnumerationType", b =>
                {
                    b.Property<string>("EnumTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENUM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("EnumTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ENMRTN_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ENMRTN_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "ENUM_TYPE_PARENT");

                    b.ToTable("ENUMERATION_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Facility", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CLOSED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<int?>("DefaultDaysToShip")
                        .HasColumnType("int")
                        .HasColumnName("DEFAULT_DAYS_TO_SHIP");

                    b.Property<string>("DefaultDimensionUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_DIMENSION_UOM_ID");

                    b.Property<string>("DefaultInventoryItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_INVENTORY_ITEM_TYPE_ID");

                    b.Property<string>("DefaultWeightUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_WEIGHT_UOM_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int?>("FacilityLevel")
                        .HasColumnType("int")
                        .HasColumnName("FACILITY_LEVEL");

                    b.Property<string>("FacilityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FACILITY_NAME");

                    b.Property<decimal?>("FacilitySize")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("FACILITY_SIZE");

                    b.Property<string>("FacilitySizeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_SIZE_UOM_ID");

                    b.Property<string>("FacilityTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_TYPE_ID");

                    b.Property<string>("GeoPointId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_POINT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("OpenedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("OPENED_DATE");

                    b.Property<string>("OwnerPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OWNER_PARTY_ID");

                    b.Property<string>("ParentFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_FACILITY_ID");

                    b.Property<string>("PrimaryFacilityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_FACILITY_GROUP_ID");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<int?>("SquareFootage")
                        .HasColumnType("int")
                        .HasColumnName("SQUARE_FOOTAGE");

                    b.HasKey("FacilityId");

                    b.HasIndex(new[] { "FacilityTypeId" }, "FACILITY_FCTYP");

                    b.HasIndex(new[] { "GeoPointId" }, "FACILITY_GEOPT");

                    b.HasIndex(new[] { "OwnerPartyId" }, "FACILITY_OWNER");

                    b.HasIndex(new[] { "ParentFacilityId" }, "FACILITY_PARENT");

                    b.HasIndex(new[] { "PrimaryFacilityGroupId" }, "FACILITY_PGRP");

                    b.HasIndex(new[] { "FacilitySizeUomId" }, "FACILITY_SUOM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FACILITY_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FACILITY_TXSTMP");

                    b.HasIndex(new[] { "DefaultDimensionUomId" }, "FAC_DEF_DUOM");

                    b.HasIndex(new[] { "DefaultWeightUomId" }, "FAC_DEF_WUOM");

                    b.HasIndex(new[] { "DefaultInventoryItemTypeId" }, "FAC_INVITM_TYPE");

                    b.ToTable("FACILITY", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityAssocType", b =>
                {
                    b.Property<string>("FacilityAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FacilityAssocTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_ASC_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_ASC_TP_TXSTMP");

                    b.ToTable("FACILITY_ASSOC_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityAttribute", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FacilityId", "AttrName");

                    b.HasIndex(new[] { "FacilityId" }, "FACILITY_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_ATTRBT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_ATTRBT_TXSTMP");

                    b.ToTable("FACILITY_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityCalendar", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("CalendarId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CALENDAR_ID");

                    b.Property<string>("FacilityCalendarTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_CALENDAR_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FacilityId", "CalendarId", "FacilityCalendarTypeId", "FromDate");

                    b.HasIndex(new[] { "FacilityId" }, "FACILITY_CAL_FAC");

                    b.HasIndex(new[] { "FacilityCalendarTypeId" }, "FACILITY_CAL_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_CLNDR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_CLNDR_TXSTMP");

                    b.ToTable("FACILITY_CALENDAR", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityCalendarType", b =>
                {
                    b.Property<string>("FacilityCalendarTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_CALENDAR_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("FacilityCalendarTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCT_CLNR_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCT_CLNR_TP_TXSTMP");

                    b.ToTable("FACILITY_CALENDAR_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityCarrierShipment", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FacilityId", "PartyId", "RoleTypeId", "ShipmentMethodTypeId");

                    b.HasIndex(new[] { "ShipmentMethodTypeId", "PartyId", "RoleTypeId" }, "FACILITY_CSH_CSM");

                    b.HasIndex(new[] { "FacilityId" }, "FACILITY_CSH_FAC");

                    b.HasIndex(new[] { "PartyId" }, "FACILITY_CSH_PTY");

                    b.HasIndex(new[] { "ShipmentMethodTypeId" }, "FACILITY_CSH_STP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCT_CRR_SHPT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCT_CRR_SHPT_TXSTP");

                    b.ToTable("FACILITY_CARRIER_SHIPMENT", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityContactMech", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Extension")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("EXTENSION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FacilityId", "ContactMechId", "FromDate");

                    b.HasIndex(new[] { "ContactMechId" }, "FACIL_CMECH_CMECH");

                    b.HasIndex(new[] { "FacilityId" }, "FACIL_CMECH_FACIL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCT_CNTT_MCH_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCT_CNTT_MCH_TXSTP");

                    b.ToTable("FACILITY_CONTACT_MECH", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityContactMechPurpose", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("ContactMechPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FacilityId", "ContactMechId", "ContactMechPurposeTypeId", "FromDate")
                        .HasName("PK_FACILITY_CONTACT_MECH_PURPO");

                    b.HasIndex(new[] { "ContactMechId" }, "FACIL_CMPRP_CMECH");

                    b.HasIndex(new[] { "FacilityId" }, "FACIL_CMPRP_FACIL");

                    b.HasIndex(new[] { "ContactMechPurposeTypeId" }, "FACIL_CMPRP_TYPE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCT_CNT_MCH_PRS_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCT_CNT_MCH_PRS_TS");

                    b.ToTable("FACILITY_CONTACT_MECH_PURPOSE", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityContent", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FacilityId", "ContentId", "FromDate");

                    b.HasIndex(new[] { "ContentId" }, "FAC_CNT_CNT");

                    b.HasIndex(new[] { "FacilityId" }, "FAC_CNT_FAC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_CNTNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_CNTNT_TXSTMP");

                    b.ToTable("FACILITY_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityGroup", b =>
                {
                    b.Property<string>("FacilityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("FacilityGroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FACILITY_GROUP_NAME");

                    b.Property<string>("FacilityGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_GROUP_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PrimaryParentGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_PARENT_GROUP_ID");

                    b.HasKey("FacilityGroupId");

                    b.HasIndex(new[] { "PrimaryParentGroupId" }, "FACILITY_GP_PGRP");

                    b.HasIndex(new[] { "FacilityGroupTypeId" }, "FACILITY_GP_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_GRP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_GRP_TXSTMP");

                    b.ToTable("FACILITY_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityGroupMember", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("FacilityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_GROUP_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FacilityId", "FacilityGroupId", "FromDate");

                    b.HasIndex(new[] { "FacilityId" }, "FACILITY_MEM_FAC");

                    b.HasIndex(new[] { "FacilityGroupId" }, "FACILITY_MEM_FGRP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCT_GRP_MMR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCT_GRP_MMR_TXSTMP");

                    b.ToTable("FACILITY_GROUP_MEMBER", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityGroupRole", b =>
                {
                    b.Property<string>("FacilityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_GROUP_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FacilityGroupId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_GRP_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_GRP_RL_TXSTMP");

                    b.HasIndex(new[] { "FacilityGroupId" }, "FGROUP_RLE_FGRP");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "FGROUP_RLE_PTRLE");

                    b.ToTable("FACILITY_GROUP_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityGroupRollup", b =>
                {
                    b.Property<string>("FacilityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_GROUP_ID");

                    b.Property<string>("ParentFacilityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_FACILITY_GROUP_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FacilityGroupId", "ParentFacilityGroupId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCT_GRP_RLP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCT_GRP_RLP_TXSTMP");

                    b.HasIndex(new[] { "FacilityGroupId" }, "FGRP_FRLP_CURRENT");

                    b.HasIndex(new[] { "ParentFacilityGroupId" }, "FGRP_FRLP_PARENT");

                    b.ToTable("FACILITY_GROUP_ROLLUP", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityGroupType", b =>
                {
                    b.Property<string>("FacilityGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_GROUP_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FacilityGroupTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_GRP_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_GRP_TP_TXSTMP");

                    b.ToTable("FACILITY_GROUP_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityLocation", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("LocationSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCATION_SEQ_ID");

                    b.Property<string>("AisleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AISLE_ID");

                    b.Property<string>("AreaId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AREA_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GeoPointId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_POINT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LevelId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LEVEL_ID");

                    b.Property<string>("LocationTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCATION_TYPE_ENUM_ID");

                    b.Property<string>("PositionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("POSITION_ID");

                    b.Property<string>("SectionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SECTION_ID");

                    b.HasKey("FacilityId", "LocationSeqId");

                    b.HasIndex(new[] { "FacilityId" }, "FACILITY_LOC_FAC");

                    b.HasIndex(new[] { "GeoPointId" }, "FACILITY_LOC_GEOPT");

                    b.HasIndex(new[] { "LocationTypeEnumId" }, "FACILITY_LOC_TENM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_LCTN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_LCTN_TXSTMP");

                    b.ToTable("FACILITY_LOCATION", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityLocationGeoPoint", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("LocationSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCATION_SEQ_ID");

                    b.Property<string>("GeoPointId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_POINT_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FacilityId", "LocationSeqId", "GeoPointId", "FromDate");

                    b.HasIndex(new[] { "FacilityId", "LocationSeqId" }, "FACLOCGEOPT_FACLOC");

                    b.HasIndex(new[] { "GeoPointId" }, "FACLOCGEOPT_GEOPT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCT_LCN_G_PNT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCT_LCN_G_PNT_TXSP");

                    b.ToTable("FACILITY_LOCATION_GEO_POINT", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityParty", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FacilityId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "FACILITY_PRTY_ROLE");

                    b.HasIndex(new[] { "FacilityId" }, "FACILITY_RLE_FACI");

                    b.HasIndex(new[] { "PartyId" }, "FACILITY_RLE_PRT");

                    b.HasIndex(new[] { "RoleTypeId" }, "FACILITY_RLE_ROL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_PRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_PRT_TXSTMP");

                    b.ToTable("FACILITY_PARTY", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityType", b =>
                {
                    b.Property<string>("FacilityTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("FacilityTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "FACILITY_TYPEPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_TP_TXSTMP");

                    b.ToTable("FACILITY_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.FacilityTypeAttr", b =>
                {
                    b.Property<string>("FacilityTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FacilityTypeId", "AttrName");

                    b.HasIndex(new[] { "FacilityTypeId" }, "FACILITY_TPAT_FT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FCLT_TP_ATR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FCLT_TP_ATR_TXSTMP");

                    b.ToTable("FACILITY_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.FileExtension", b =>
                {
                    b.Property<string>("FileExtensionId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("FILE_EXTENSION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MimeTypeId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MIME_TYPE_ID");

                    b.HasKey("FileExtensionId");

                    b.HasIndex(new[] { "MimeTypeId" }, "FILEEXT_MMTYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FL_EXTNSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FL_EXTNSN_TXSTMP");

                    b.ToTable("FILE_EXTENSION", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccount", b =>
                {
                    b.Property<string>("FinAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_ID");

                    b.Property<decimal?>("ActualBalance")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ACTUAL_BALANCE");

                    b.Property<decimal?>("AvailableBalance")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AVAILABLE_BALANCE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("FinAccountCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FIN_ACCOUNT_CODE");

                    b.Property<string>("FinAccountName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FIN_ACCOUNT_NAME");

                    b.Property<string>("FinAccountPin")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FIN_ACCOUNT_PIN");

                    b.Property<string>("FinAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TYPE_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("IsRefundable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_REFUNDABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<string>("OwnerPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OWNER_PARTY_ID");

                    b.Property<string>("PostToGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("POST_TO_GL_ACCOUNT_ID");

                    b.Property<decimal?>("ReplenishLevel")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("REPLENISH_LEVEL");

                    b.Property<string>("ReplenishPaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REPLENISH_PAYMENT_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FinAccountId");

                    b.HasIndex(new[] { "CurrencyUomId" }, "FINACCT_CURUOM");

                    b.HasIndex(new[] { "PostToGlAccountId" }, "FINACCT_GLAC");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "FINACCT_ORGPTY");

                    b.HasIndex(new[] { "OwnerPartyId" }, "FINACCT_OWNPTY");

                    b.HasIndex(new[] { "ReplenishPaymentId" }, "FINACCT_PAYMETH");

                    b.HasIndex(new[] { "FinAccountTypeId" }, "FINACCT_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FIN_ACCOUNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FIN_ACCOUNT_TXSTMP");

                    b.ToTable("FIN_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountAttribute", b =>
                {
                    b.Property<string>("FinAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FinAccountId", "AttrName");

                    b.HasIndex(new[] { "FinAccountId" }, "FINACCT_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_ACCT_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_ACCT_ATTT_TXSTP");

                    b.ToTable("FIN_ACCOUNT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountAuth", b =>
                {
                    b.Property<string>("FinAccountAuthId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_AUTH_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("AuthorizationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AUTHORIZATION_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("FinAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FinAccountAuthId");

                    b.HasIndex(new[] { "FinAccountId" }, "FINACT_AUTH_FINACT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_ACCT_ATH_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_ACCT_ATH_TXSTMP");

                    b.ToTable("FIN_ACCOUNT_AUTH", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountRole", b =>
                {
                    b.Property<string>("FinAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FinAccountId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "FinAccountId" }, "FIN_ACT_RL_FNACT");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "FIN_ACT_RL_RTRL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_ACCNT_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_ACCNT_RL_TXSTMP");

                    b.ToTable("FIN_ACCOUNT_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountStatus", b =>
                {
                    b.Property<string>("FinAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("StatusEndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_END_DATE");

                    b.HasKey("FinAccountId", "StatusId", "StatusDate");

                    b.HasIndex(new[] { "FinAccountId" }, "FINACT_STTS_FNA");

                    b.HasIndex(new[] { "StatusId" }, "FINACT_STTS_STI");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "FINACT_STTS_USER");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_ACCT_STS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_ACCT_STS_TXSTMP");

                    b.ToTable("FIN_ACCOUNT_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountTran", b =>
                {
                    b.Property<string>("FinAccountTransId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TRANS_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("FinAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_ID");

                    b.Property<string>("FinAccountTransTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TRANS_TYPE_ID");

                    b.Property<string>("GlReconciliationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_RECONCILIATION_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<string>("PerformedByPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERFORMED_BY_PARTY_ID");

                    b.Property<string>("ReasonEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REASON_ENUM_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("TRANSACTION_DATE");

                    b.HasKey("FinAccountTransId");

                    b.HasIndex(new[] { "FinAccountTransTypeId" }, "FINACCT_TX_TYPE");

                    b.HasIndex(new[] { "ReasonEnumId" }, "FIN_ACT_REAS_ENUM");

                    b.HasIndex(new[] { "FinAccountId" }, "FIN_ACT_TX_FNACT");

                    b.HasIndex(new[] { "GlReconciliationId" }, "FIN_ACT_TX_GLREC");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "FIN_ACT_TX_ODITM");

                    b.HasIndex(new[] { "PartyId" }, "FIN_ACT_TX_PARTY");

                    b.HasIndex(new[] { "PerformedByPartyId" }, "FIN_ACT_TX_PBPTY");

                    b.HasIndex(new[] { "PaymentId" }, "FIN_ACT_TX_PMT");

                    b.HasIndex(new[] { "StatusId" }, "FIN_ACT_TX_STI");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_ACCT_TRS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_ACCT_TRS_TXSTMP");

                    b.ToTable("FIN_ACCOUNT_TRANS", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountTransAttribute", b =>
                {
                    b.Property<string>("FinAccountTransId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TRANS_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FinAccountTransId", "AttrName");

                    b.HasIndex(new[] { "FinAccountTransId" }, "FINACCT_TX_ATTR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_ACT_TRS_ATT_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_ACT_TRS_ATT_TXS");

                    b.ToTable("FIN_ACCOUNT_TRANS_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountTransType", b =>
                {
                    b.Property<string>("FinAccountTransTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TRANS_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("FinAccountTransTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "FINACCT_TX_TYPPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_ACT_TRS_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_ACT_TRS_TP_TXSP");

                    b.ToTable("FIN_ACCOUNT_TRANS_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountTransTypeAttr", b =>
                {
                    b.Property<string>("FinAccountTransTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TRANS_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FinAccountTransTypeId", "AttrName");

                    b.HasIndex(new[] { "FinAccountTransTypeId" }, "FINACCT_TX_TYPATR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_TRS_TP_ATR_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_TRS_TP_ATR_TS");

                    b.ToTable("FIN_ACCOUNT_TRANS_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountType", b =>
                {
                    b.Property<string>("FinAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<string>("IsRefundable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_REFUNDABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.Property<string>("ReplenishEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REPLENISH_ENUM_ID");

                    b.HasKey("FinAccountTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "FINACCT_TYPE_PAR");

                    b.HasIndex(new[] { "ReplenishEnumId" }, "FINACCT_TYPE_RENUM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_ACCNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_ACCNT_TP_TXSTMP");

                    b.ToTable("FIN_ACCOUNT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountTypeAttr", b =>
                {
                    b.Property<string>("FinAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FinAccountTypeId", "AttrName");

                    b.HasIndex(new[] { "FinAccountTypeId" }, "FINACCT_TYPE_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_ACT_TP_ATR_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_ACT_TP_ATR_TXSP");

                    b.ToTable("FIN_ACCOUNT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.FinAccountTypeGlAccount", b =>
                {
                    b.Property<string>("FinAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TYPE_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FinAccountTypeId", "OrganizationPartyId");

                    b.HasIndex(new[] { "GlAccountId" }, "FINACCT_TGA_GLAC");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "FINACCT_TGA_OPTY");

                    b.HasIndex(new[] { "FinAccountTypeId" }, "FINACCT_TGA_PMT");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FN_TP_GL_ACT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FN_TP_GL_ACT_TS");

                    b.ToTable("FIN_ACCOUNT_TYPE_GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAsset", b =>
                {
                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("AcquireOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACQUIRE_ORDER_ID");

                    b.Property<string>("AcquireOrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACQUIRE_ORDER_ITEM_SEQ_ID");

                    b.Property<DateTime?>("ActualEndOfLife")
                        .HasColumnType("datetime")
                        .HasColumnName("ACTUAL_END_OF_LIFE");

                    b.Property<string>("CalendarId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CALENDAR_ID");

                    b.Property<string>("ClassEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CLASS_ENUM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DateAcquired")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_ACQUIRED");

                    b.Property<DateTime?>("DateLastServiced")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_LAST_SERVICED");

                    b.Property<DateTime?>("DateNextService")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_NEXT_SERVICE");

                    b.Property<decimal?>("Depreciation")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("DEPRECIATION");

                    b.Property<DateTime?>("ExpectedEndOfLife")
                        .HasColumnType("datetime")
                        .HasColumnName("EXPECTED_END_OF_LIFE");

                    b.Property<string>("FixedAssetName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FIXED_ASSET_NAME");

                    b.Property<string>("FixedAssetTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_TYPE_ID");

                    b.Property<string>("InstanceOfProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INSTANCE_OF_PRODUCT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LocatedAtFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCATED_AT_FACILITY_ID");

                    b.Property<string>("LocatedAtLocationSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCATED_AT_LOCATION_SEQ_ID");

                    b.Property<string>("ParentFixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_FIXED_ASSET_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<decimal?>("ProductionCapacity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PRODUCTION_CAPACITY");

                    b.Property<decimal?>("PurchaseCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PURCHASE_COST");

                    b.Property<string>("PurchaseCostUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PURCHASE_COST_UOM_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<decimal?>("SalvageValue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("SALVAGE_VALUE");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERIAL_NUMBER");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("FixedAssetId");

                    b.HasIndex(new[] { "CalendarId" }, "FIXEDAST_CALENDAR");

                    b.HasIndex(new[] { "ClassEnumId" }, "FIXEDAST_CLSENM");

                    b.HasIndex(new[] { "LocatedAtFacilityId" }, "FIXEDAST_FAC");

                    b.HasIndex(new[] { "InstanceOfProductId" }, "FIXEDAST_IOPROD");

                    b.HasIndex(new[] { "AcquireOrderId" }, "FIXEDAST_ORDHDR");

                    b.HasIndex(new[] { "AcquireOrderId", "AcquireOrderItemSeqId" }, "FIXEDAST_ORDITM");

                    b.HasIndex(new[] { "ParentFixedAssetId" }, "FIXEDAST_PAR");

                    b.HasIndex(new[] { "PartyId" }, "FIXEDAST_PARTY");

                    b.HasIndex(new[] { "RoleTypeId" }, "FIXEDAST_ROLETYP");

                    b.HasIndex(new[] { "FixedAssetTypeId" }, "FIXEDAST_TYPE");

                    b.HasIndex(new[] { "UomId" }, "FIXEDAST_UOM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FIXED_ASSET_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FIXED_ASSET_TXSTMP");

                    b.ToTable("FIXED_ASSET", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetAttribute", b =>
                {
                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FixedAssetId", "AttrName");

                    b.HasIndex(new[] { "FixedAssetId" }, "FIXEDAST_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_ATTT_TXSTP");

                    b.ToTable("FIXED_ASSET_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetDepMethod", b =>
                {
                    b.Property<string>("DepreciationCustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEPRECIATION_CUSTOM_METHOD_ID");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("DepreciationCustomMethodId", "FixedAssetId");

                    b.HasIndex(new[] { "DepreciationCustomMethodId" }, "FIXDAST_DM_CMET");

                    b.HasIndex(new[] { "FixedAssetId" }, "FIXDAST_DM_FXAST");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_DP_MTD_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_DP_MTD_TXS");

                    b.ToTable("FIXED_ASSET_DEP_METHOD", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetGeoPoint", b =>
                {
                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("GeoPointId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_POINT_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FixedAssetId", "GeoPointId", "FromDate");

                    b.HasIndex(new[] { "FixedAssetId" }, "FXDASTGEOPT_FXDAST");

                    b.HasIndex(new[] { "GeoPointId" }, "FXDASTGEOPT_GEOPT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_G_PNT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_G_PNT_TXSP");

                    b.ToTable("FIXED_ASSET_GEO_POINT", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetIdent", b =>
                {
                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("FixedAssetIdentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_IDENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IdValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ID_VALUE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FixedAssetId", "FixedAssetIdentTypeId");

                    b.HasIndex(new[] { "FixedAssetId" }, "FIXDASTID_FXAST");

                    b.HasIndex(new[] { "FixedAssetIdentTypeId" }, "FIXDASTID_IDTYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_IDT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_IDT_TXSTMP");

                    b.ToTable("FIXED_ASSET_IDENT", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetIdentType", b =>
                {
                    b.Property<string>("FixedAssetIdentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_IDENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FixedAssetIdentTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_IDT_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_IDT_TP_TXS");

                    b.ToTable("FIXED_ASSET_IDENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetMaint", b =>
                {
                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("MaintHistSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MAINT_HIST_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IntervalMeterTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INTERVAL_METER_TYPE_ID");

                    b.Property<decimal?>("IntervalQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("INTERVAL_QUANTITY");

                    b.Property<string>("IntervalUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INTERVAL_UOM_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductMaintSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_MAINT_SEQ_ID");

                    b.Property<string>("ProductMaintTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_MAINT_TYPE_ID");

                    b.Property<string>("PurchaseOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PURCHASE_ORDER_ID");

                    b.Property<string>("ScheduleWorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SCHEDULE_WORK_EFFORT_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("FixedAssetId", "MaintHistSeqId");

                    b.HasIndex(new[] { "FixedAssetId" }, "FXDASTMNT_FXAST");

                    b.HasIndex(new[] { "IntervalUomId" }, "FXDASTMNT_INTUOM");

                    b.HasIndex(new[] { "IntervalMeterTypeId" }, "FXDASTMNT_PDMTTYP");

                    b.HasIndex(new[] { "ProductMaintTypeId" }, "FXDASTMNT_PMNTP");

                    b.HasIndex(new[] { "PurchaseOrderId" }, "FXDASTMNT_PURORD");

                    b.HasIndex(new[] { "ScheduleWorkEffortId" }, "FXDASTMNT_SCHWE");

                    b.HasIndex(new[] { "StatusId" }, "FXDASTMNT_SI");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_MNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_MNT_TXSTMP");

                    b.ToTable("FIXED_ASSET_MAINT", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetMaintOrder", b =>
                {
                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("MaintHistSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MAINT_HIST_SEQ_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FixedAssetId", "MaintHistSeqId", "OrderId", "OrderItemSeqId");

                    b.HasIndex(new[] { "OrderId" }, "FXDASTMNT_ORD");

                    b.HasIndex(new[] { "FixedAssetId" }, "FXDASTMNT_ORD_FXAS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_MNT_ORR_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_MNT_ORR_TS");

                    b.ToTable("FIXED_ASSET_MAINT_ORDER", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetMeter", b =>
                {
                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("ProductMeterTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_METER_TYPE_ID");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("READING_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MaintHistSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MAINT_HIST_SEQ_ID");

                    b.Property<decimal?>("MeterValue")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("METER_VALUE");

                    b.Property<string>("ReadingReasonEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("READING_REASON_ENUM_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.HasKey("FixedAssetId", "ProductMeterTypeId", "ReadingDate");

                    b.HasIndex(new[] { "FixedAssetId", "MaintHistSeqId" }, "FXDASTMTR_FAMNT");

                    b.HasIndex(new[] { "ProductMeterTypeId" }, "FXDASTMTR_PMTYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_MTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_MTR_TXSTMP");

                    b.ToTable("FIXED_ASSET_METER", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetProduct", b =>
                {
                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("FixedAssetProductTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_PRODUCT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("QuantityUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUANTITY_UOM_ID");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FixedAssetId", "ProductId", "FixedAssetProductTypeId", "FromDate");

                    b.HasIndex(new[] { "FixedAssetId" }, "FIXDASTPRD_FA");

                    b.HasIndex(new[] { "FixedAssetProductTypeId" }, "FIXDASTPRD_FAPT");

                    b.HasIndex(new[] { "ProductId" }, "FIXDASTPRD_PRD");

                    b.HasIndex(new[] { "QuantityUomId" }, "FIXDASTPRD_UOM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_PRDT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_PRDT_TXSTP");

                    b.ToTable("FIXED_ASSET_PRODUCT", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetProductType", b =>
                {
                    b.Property<string>("FixedAssetProductTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_PRODUCT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FixedAssetProductTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_PRT_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_PRT_TP_TXS");

                    b.ToTable("FIXED_ASSET_PRODUCT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetRegistration", b =>
                {
                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GovAgencyPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GOV_AGENCY_PARTY_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LICENSE_NUMBER");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("REGISTRATION_DATE");

                    b.Property<string>("RegistrationNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REGISTRATION_NUMBER");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FixedAssetId", "FromDate");

                    b.HasIndex(new[] { "FixedAssetId" }, "FIXDASTREG_FXAST");

                    b.HasIndex(new[] { "GovAgencyPartyId" }, "FIXDASTREG_GVAPTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_RGSTN_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_RGSTN_TXSP");

                    b.ToTable("FIXED_ASSET_REGISTRATION", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetStdCost", b =>
                {
                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("FixedAssetStdCostTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_STD_COST_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<string>("AmountUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AMOUNT_UOM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("FixedAssetId", "FixedAssetStdCostTypeId", "FromDate");

                    b.HasIndex(new[] { "AmountUomId" }, "FIXASTCO_AMCURR");

                    b.HasIndex(new[] { "FixedAssetId" }, "FIXASTCO_FIXAST");

                    b.HasIndex(new[] { "FixedAssetStdCostTypeId" }, "FIXASTCO_TYPCOS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_STD_CST_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_STD_CST_TS");

                    b.ToTable("FIXED_ASSET_STD_COST", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetStdCostType", b =>
                {
                    b.Property<string>("FixedAssetStdCostTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_STD_COST_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("FixedAssetStdCostTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "FIXASTCO_TYPPAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_STD_CST_TP_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_STD_CST_TP_TS");

                    b.ToTable("FIXED_ASSET_STD_COST_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetType", b =>
                {
                    b.Property<string>("FixedAssetTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("FixedAssetTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "FIXEDAST_TYPPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_ASST_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_ASST_TP_TXSTMP");

                    b.ToTable("FIXED_ASSET_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetTypeAttr", b =>
                {
                    b.Property<string>("FixedAssetTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FixedAssetTypeId", "AttrName");

                    b.HasIndex(new[] { "FixedAssetTypeId" }, "FIXEDAST_TYPATTR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_AST_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_AST_TP_ATR_TXS");

                    b.ToTable("FIXED_ASSET_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.FixedAssetTypeGlAccount", b =>
                {
                    b.Property<string>("FixedAssetTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_TYPE_ID");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<string>("AccDepGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACC_DEP_GL_ACCOUNT_ID");

                    b.Property<string>("AssetGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ASSET_GL_ACCOUNT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DepGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEP_GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LossGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOSS_GL_ACCOUNT_ID");

                    b.Property<string>("ProfitGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROFIT_GL_ACCOUNT_ID");

                    b.HasKey("FixedAssetTypeId", "FixedAssetId", "OrganizationPartyId");

                    b.HasIndex(new[] { "AccDepGlAccountId" }, "FATGL_ACCDGL");

                    b.HasIndex(new[] { "AssetGlAccountId" }, "FATGL_AGL");

                    b.HasIndex(new[] { "DepGlAccountId" }, "FATGL_DGL");

                    b.HasIndex(new[] { "LossGlAccountId" }, "FATGL_LGL");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "FATGL_OP");

                    b.HasIndex(new[] { "ProfitGlAccountId" }, "FATGL_PGL");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FXD_TP_GL_ACT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FXD_TP_GL_ACT_TS");

                    b.ToTable("FIXED_ASSET_TYPE_GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.FtpAddress", b =>
                {
                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("BinaryTransfer")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("BINARY_TRANSFER")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<int?>("DefaultTimeout")
                        .HasColumnType("int")
                        .HasColumnName("DEFAULT_TIMEOUT");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FILE_PATH");

                    b.Property<string>("FtpPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FTP_PASSWORD");

                    b.Property<string>("Hostname")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HOSTNAME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PassiveMode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PASSIVE_MODE")
                        .IsFixedLength();

                    b.Property<int?>("Port")
                        .HasColumnType("int")
                        .HasColumnName("PORT");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("ZipFile")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ZIP_FILE")
                        .IsFixedLength();

                    b.HasKey("ContactMechId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "FTP_ADDRESS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "FTP_ADDRESS_TXSTMP");

                    b.HasIndex(new[] { "ContactMechId" }, "FTP_SRV_CMECH");

                    b.ToTable("FTP_ADDRESS", (string)null);
                });

            modelBuilder.Entity("Domain.Geo", b =>
                {
                    b.Property<string>("GeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ABBREVIATION");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GeoCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("GEO_CODE");

                    b.Property<string>("GeoName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("GEO_NAME");

                    b.Property<string>("GeoSecCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("GEO_SEC_CODE");

                    b.Property<string>("GeoTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("WellKnownText")
                        .HasColumnType("text")
                        .HasColumnName("WELL_KNOWN_TEXT");

                    b.HasKey("GeoId");

                    b.HasIndex(new[] { "GeoTypeId" }, "GEO_TO_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GEO_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GEO_TXSTMP");

                    b.ToTable("GEO", (string)null);
                });

            modelBuilder.Entity("Domain.GeoAssoc", b =>
                {
                    b.Property<string>("GeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID");

                    b.Property<string>("GeoIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID_TO");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GeoAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GeoId", "GeoIdTo");

                    b.HasIndex(new[] { "GeoIdTo" }, "GEO_ASSC_TO_ASSC");

                    b.HasIndex(new[] { "GeoId" }, "GEO_ASSC_TO_MAIN");

                    b.HasIndex(new[] { "GeoAssocTypeId" }, "GEO_ASSC_TO_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GEO_ASSOC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GEO_ASSOC_TXSTMP");

                    b.ToTable("GEO_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.GeoAssocType", b =>
                {
                    b.Property<string>("GeoAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GeoAssocTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "G_ASSC_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "G_ASSC_TP_TXSTMP");

                    b.ToTable("GEO_ASSOC_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.GeoPoint", b =>
                {
                    b.Property<string>("GeoPointId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_POINT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DataSourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("Elevation")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("ELEVATION");

                    b.Property<string>("ElevationUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ELEVATION_UOM_ID");

                    b.Property<string>("GeoPointTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_POINT_TYPE_ENUM_ID");

                    b.Property<string>("Information")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INFORMATION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("LATITUDE");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("LONGITUDE");

                    b.HasKey("GeoPointId");

                    b.HasIndex(new[] { "DataSourceId" }, "GEOPOINT_DTSRC");

                    b.HasIndex(new[] { "GeoPointTypeEnumId" }, "GEOPOINT_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GEO_POINT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GEO_POINT_TXSTMP");

                    b.HasIndex(new[] { "ElevationUomId" }, "GPT_ELEV_UOM");

                    b.ToTable("GEO_POINT", (string)null);
                });

            modelBuilder.Entity("Domain.GeoType", b =>
                {
                    b.Property<string>("GeoTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("GeoTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "GEO_TYPE_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GEO_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GEO_TYPE_TXSTMP");

                    b.ToTable("GEO_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.GiftCard", b =>
                {
                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CARD_NUMBER");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ExpireDate")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("EXPIRE_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PinNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PIN_NUMBER");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex(new[] { "ContactMechId" }, "GIFTCARD_CMECH");

                    b.HasIndex(new[] { "ContactMechId" }, "GIFTCARD_PADDR");

                    b.HasIndex(new[] { "PaymentMethodId" }, "GIFTCARD_PMNTMETH");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GIFT_CARD_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GIFT_CARD_TXSTMP");

                    b.ToTable("GIFT_CARD", (string)null);
                });

            modelBuilder.Entity("Domain.GiftCardFulfillment", b =>
                {
                    b.Property<string>("FulfillmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FULFILLMENT_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<string>("AuthCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("AUTH_CODE");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CARD_NUMBER");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FulfillmentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FULFILLMENT_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MerchantId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MERCHANT_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PinNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PIN_NUMBER");

                    b.Property<string>("ReferenceNum")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("REFERENCE_NUM");

                    b.Property<string>("ResponseCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("RESPONSE_CODE");

                    b.Property<string>("SurveyResponseId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_RESPONSE_ID");

                    b.Property<string>("TypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TYPE_ENUM_ID");

                    b.HasKey("FulfillmentId");

                    b.HasIndex(new[] { "TypeEnumId" }, "GC_FILL_ENUM");

                    b.HasIndex(new[] { "OrderId" }, "GC_FILL_ODRH");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "GC_FILL_ODRI");

                    b.HasIndex(new[] { "PartyId" }, "GC_FILL_PARTY");

                    b.HasIndex(new[] { "SurveyResponseId" }, "GC_FILL_SURVY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GFT_CRD_FLFLT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GFT_CRD_FLFLT_TXSP");

                    b.ToTable("GIFT_CARD_FULFILLMENT", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccount", b =>
                {
                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<string>("AccountCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ACCOUNT_CODE");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ACCOUNT_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXTERNAL_ID");

                    b.Property<string>("GlAccountClassId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_CLASS_ID");

                    b.Property<string>("GlAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_TYPE_ID");

                    b.Property<string>("GlResourceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_RESOURCE_TYPE_ID");

                    b.Property<string>("GlXbrlClassId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_XBRL_CLASS_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_GL_ACCOUNT_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.HasKey("GlAccountId");

                    b.HasIndex(new[] { "GlAccountClassId" }, "GLACCT_CLSS");

                    b.HasIndex(new[] { "ParentGlAccountId" }, "GLACCT_PAR");

                    b.HasIndex(new[] { "GlResourceTypeId" }, "GLACCT_REC");

                    b.HasIndex(new[] { "GlAccountTypeId" }, "GLACCT_TYPE");

                    b.HasIndex(new[] { "AccountCode" }, "GLACCT_UNQCD")
                        .IsUnique();

                    b.HasIndex(new[] { "GlXbrlClassId" }, "GLACCT_XBRLCLS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACCOUNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACCOUNT_TXSTMP");

                    b.ToTable("GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountCategory", b =>
                {
                    b.Property<string>("GlAccountCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_CATEGORY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("GlAccountCategoryTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_CATEGORY_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GlAccountCategoryId");

                    b.HasIndex(new[] { "GlAccountCategoryTypeId" }, "GLACT_CAT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACCT_CTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACCT_CTR_TXSTMP");

                    b.ToTable("GL_ACCOUNT_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountCategoryMember", b =>
                {
                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<string>("GlAccountCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_CATEGORY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<decimal?>("AmountPercentage")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("AMOUNT_PERCENTAGE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("GlAccountId", "GlAccountCategoryId", "FromDate");

                    b.HasIndex(new[] { "GlAccountId" }, "GLACT_CATMBR_AC");

                    b.HasIndex(new[] { "GlAccountCategoryId" }, "GLACT_CATMBR_CAT");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACT_CTR_MMR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACT_CTR_MMR_TXS");

                    b.ToTable("GL_ACCOUNT_CATEGORY_MEMBER", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountCategoryType", b =>
                {
                    b.Property<string>("GlAccountCategoryTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_CATEGORY_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GlAccountCategoryTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACT_CTR_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACT_CTR_TP_TXSP");

                    b.ToTable("GL_ACCOUNT_CATEGORY_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountClass", b =>
                {
                    b.Property<string>("GlAccountClassId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_CLASS_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("IsAssetClass")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_ASSET_CLASS")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentClassId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_CLASS_ID");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("GlAccountClassId");

                    b.HasIndex(new[] { "ParentClassId" }, "GLACTCLS_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACCT_CLS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACCT_CLS_TXSTMP");

                    b.ToTable("GL_ACCOUNT_CLASS", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountGroup", b =>
                {
                    b.Property<string>("GlAccountGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("GlAccountGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_GROUP_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GlAccountGroupId");

                    b.HasIndex(new[] { "GlAccountGroupTypeId" }, "GLACT_GRP_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACCT_GRP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACCT_GRP_TXSTMP");

                    b.ToTable("GL_ACCOUNT_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountGroupMember", b =>
                {
                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<string>("GlAccountGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_GROUP_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_GROUP_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GlAccountId", "GlAccountGroupTypeId");

                    b.HasIndex(new[] { "GlAccountId" }, "GLACT_GPMBR_AC");

                    b.HasIndex(new[] { "GlAccountGroupId" }, "GLACT_GPMBR_GP");

                    b.HasIndex(new[] { "GlAccountGroupTypeId" }, "GLACT_GPMBR_TP");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACT_GRP_MMR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACT_GRP_MMR_TXS");

                    b.ToTable("GL_ACCOUNT_GROUP_MEMBER", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountGroupType", b =>
                {
                    b.Property<string>("GlAccountGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_GROUP_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GlAccountGroupTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACT_GRP_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACT_GRP_TP_TXSP");

                    b.ToTable("GL_ACCOUNT_GROUP_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountHierarchyView", b =>
                {
                    b.Property<string>("GlAccountId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AccountCode")
                        .HasColumnType("longtext");

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext");

                    b.Property<string>("GlAccountClassId")
                        .HasColumnType("longtext");

                    b.Property<string>("GlAccountTypeId")
                        .HasColumnType("longtext");

                    b.Property<string>("GlResourceTypeId")
                        .HasColumnType("longtext");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<string>("ParentGlAccountId")
                        .HasColumnType("longtext");

                    b.HasKey("GlAccountId");

                    b.ToTable((string)null);

                    b.ToView("GlAccountHierarchyView", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountHistory", b =>
                {
                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<string>("CustomTimePeriodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_TIME_PERIOD_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("EndingBalance")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ENDING_BALANCE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("OpeningBalance")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("OPENING_BALANCE");

                    b.Property<decimal?>("PostedCredits")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("POSTED_CREDITS");

                    b.Property<decimal?>("PostedDebits")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("POSTED_DEBITS");

                    b.HasKey("GlAccountId", "OrganizationPartyId", "CustomTimePeriodId");

                    b.HasIndex(new[] { "CustomTimePeriodId" }, "GLACCT_HST_CTP");

                    b.HasIndex(new[] { "GlAccountId" }, "GLACCT_HST_GLA");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "GLACCT_HST_PARTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACCT_HSR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACCT_HSR_TXSTMP");

                    b.ToTable("GL_ACCOUNT_HISTORY", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountOrganization", b =>
                {
                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("GlAccountId", "OrganizationPartyId");

                    b.HasIndex(new[] { "GlAccountId" }, "GLACCT_ORG_GLA");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "GLACCT_ORG_PARTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACT_ORGNN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACT_ORGNN_TXSTP");

                    b.ToTable("GL_ACCOUNT_ORGANIZATION", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountRole", b =>
                {
                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("GlAccountId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "GlAccountId" }, "GLACCT_RL_GLA");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "GLACCT_RL_PTRLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACCNT_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACCNT_RL_TXSTMP");

                    b.ToTable("GL_ACCOUNT_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountType", b =>
                {
                    b.Property<string>("GlAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("GlAccountTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "GLACTTY_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACCNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACCNT_TP_TXSTMP");

                    b.ToTable("GL_ACCOUNT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.GlAccountTypeDefault", b =>
                {
                    b.Property<string>("GlAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_TYPE_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GlAccountTypeId", "OrganizationPartyId");

                    b.HasIndex(new[] { "GlAccountId" }, "GLACCT_TPDF_GLA");

                    b.HasIndex(new[] { "GlAccountTypeId" }, "GLACCT_TPDF_GLAT");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "GLACCT_TPDF_OPTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_ACT_TP_DFT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_ACT_TP_DFT_TXSP");

                    b.ToTable("GL_ACCOUNT_TYPE_DEFAULT", (string)null);
                });

            modelBuilder.Entity("Domain.GlBudgetXref", b =>
                {
                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<string>("BudgetItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<decimal?>("AllocationPercentage")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("ALLOCATION_PERCENTAGE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("GlAccountId", "BudgetItemTypeId", "FromDate");

                    b.HasIndex(new[] { "BudgetItemTypeId" }, "GL_BDGT_XRF_BIT");

                    b.HasIndex(new[] { "GlAccountId" }, "GL_BDGT_XRF_GLA");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_BDGT_XRF_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_BDGT_XRF_TXSTMP");

                    b.ToTable("GL_BUDGET_XREF", (string)null);
                });

            modelBuilder.Entity("Domain.GlFiscalType", b =>
                {
                    b.Property<string>("GlFiscalTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_FISCAL_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GlFiscalTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_FSCL_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_FSCL_TP_TXSTMP");

                    b.ToTable("GL_FISCAL_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.GlJournal", b =>
                {
                    b.Property<string>("GlJournalId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_JOURNAL_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlJournalName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("GL_JOURNAL_NAME");

                    b.Property<string>("IsPosted")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_POSTED")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<DateTime?>("PostedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("POSTED_DATE");

                    b.HasKey("GlJournalId");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "GLJOURN_PARTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_JOURNAL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_JOURNAL_TXSTMP");

                    b.ToTable("GL_JOURNAL", (string)null);
                });

            modelBuilder.Entity("Domain.GlReconciliation", b =>
                {
                    b.Property<string>("GlReconciliationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_RECONCILIATION_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<string>("GlReconciliationName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("GL_RECONCILIATION_NAME");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("OpeningBalance")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("OPENING_BALANCE");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<decimal?>("ReconciledBalance")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("RECONCILED_BALANCE");

                    b.Property<DateTime?>("ReconciledDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RECONCILED_DATE");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("GlReconciliationId");

                    b.HasIndex(new[] { "GlAccountId" }, "GLREC_GLACCT");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "GLREC_GLPARTY");

                    b.HasIndex(new[] { "StatusId" }, "GLREC_STI");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_RCNCLTN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_RCNCLTN_TXSTMP");

                    b.ToTable("GL_RECONCILIATION", (string)null);
                });

            modelBuilder.Entity("Domain.GlReconciliationEntry", b =>
                {
                    b.Property<string>("GlReconciliationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_RECONCILIATION_ID");

                    b.Property<string>("AcctgTransId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_ID");

                    b.Property<string>("AcctgTransEntrySeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCTG_TRANS_ENTRY_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("ReconciledAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("RECONCILED_AMOUNT");

                    b.HasKey("GlReconciliationId", "AcctgTransId", "AcctgTransEntrySeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_RCNCN_ENR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_RCNCN_ENR_TXSTP");

                    b.HasIndex(new[] { "AcctgTransId", "AcctgTransEntrySeqId" }, "GL_RECENT_ACTTXE");

                    b.HasIndex(new[] { "GlReconciliationId" }, "GL_RECENT_GLREC");

                    b.ToTable("GL_RECONCILIATION_ENTRY", (string)null);
                });

            modelBuilder.Entity("Domain.GlResourceType", b =>
                {
                    b.Property<string>("GlResourceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_RESOURCE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GlResourceTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_RSRC_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_RSRC_TP_TXSTMP");

                    b.ToTable("GL_RESOURCE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.GlXbrlClass", b =>
                {
                    b.Property<string>("GlXbrlClassId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_XBRL_CLASS_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentGlXbrlClassId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_GL_XBRL_CLASS_ID");

                    b.HasKey("GlXbrlClassId");

                    b.HasIndex(new[] { "ParentGlXbrlClassId" }, "GL_XBRL_CLSPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GL_XBRL_CLS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GL_XBRL_CLS_TXSTMP");

                    b.ToTable("GL_XBRL_CLASS", (string)null);
                });

            modelBuilder.Entity("Domain.GoodIdentification", b =>
                {
                    b.Property<string>("GoodIdentificationTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GOOD_IDENTIFICATION_TYPE_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IdValue")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ID_VALUE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GoodIdentificationTypeId", "ProductId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GD_IDNTFCTN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GD_IDNTFCTN_TXSTMP");

                    b.HasIndex(new[] { "ProductId" }, "GOOD_ID_PRODICT");

                    b.HasIndex(new[] { "GoodIdentificationTypeId" }, "GOOD_ID_TYPE");

                    b.HasIndex(new[] { "IdValue" }, "GOOD_ID_VALIDX");

                    b.ToTable("GOOD_IDENTIFICATION", (string)null);
                });

            modelBuilder.Entity("Domain.GoodIdentificationType", b =>
                {
                    b.Property<string>("GoodIdentificationTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GOOD_IDENTIFICATION_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("GoodIdentificationTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "GD_IDNTFN_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "GD_IDNTFN_TP_TXSTP");

                    b.HasIndex(new[] { "ParentTypeId" }, "GOOD_ID_TYPE_PAR");

                    b.ToTable("GOOD_IDENTIFICATION_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ImageDataResource", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("longblob")
                        .HasColumnName("IMAGE_DATA");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DataResourceId");

                    b.HasIndex(new[] { "DataResourceId" }, "DATA_REC_IMAGE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "IMG_DT_RSRC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "IMG_DT_RSRC_TXSTMP");

                    b.ToTable("IMAGE_DATA_RESOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItem", b =>
                {
                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<decimal?>("AccountingQuantityTotal")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("ACCOUNTING_QUANTITY_TOTAL");

                    b.Property<string>("ActivationNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACTIVATION_NUMBER");

                    b.Property<DateTime?>("ActivationValidThru")
                        .HasColumnType("datetime")
                        .HasColumnName("ACTIVATION_VALID_THRU");

                    b.Property<decimal?>("AvailableToPromise")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("AVAILABLE_TO_PROMISE");

                    b.Property<decimal?>("AvailableToPromiseTotal")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("AVAILABLE_TO_PROMISE_TOTAL");

                    b.Property<string>("BinNumber")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BIN_NUMBER");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("ContainerId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTAINER_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<DateTime?>("DatetimeManufactured")
                        .HasColumnType("datetime")
                        .HasColumnName("DATETIME_MANUFACTURED");

                    b.Property<DateTime?>("DatetimeReceived")
                        .HasColumnType("datetime")
                        .HasColumnName("DATETIME_RECEIVED");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EXPIRE_DATE");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("InventoryItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LocationSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCATION_SEQ_ID");

                    b.Property<string>("LotId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOT_ID");

                    b.Property<string>("OwnerPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OWNER_PARTY_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("QuantityOnHand")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_ON_HAND");

                    b.Property<decimal?>("QuantityOnHandTotal")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_ON_HAND_TOTAL");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERIAL_NUMBER");

                    b.Property<string>("SoftIdentifier")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SOFT_IDENTIFIER");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("UNIT_COST");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("InventoryItemId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVNTR_ITM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVNTR_ITM_TXSTMP");

                    b.HasIndex(new[] { "ContainerId" }, "INV_ITEM_CONTAINER");

                    b.HasIndex(new[] { "CurrencyUomId" }, "INV_ITEM_CUOM");

                    b.HasIndex(new[] { "FacilityId" }, "INV_ITEM_FACILITY");

                    b.HasIndex(new[] { "LotId" }, "INV_ITEM_LOT");

                    b.HasIndex(new[] { "OwnerPartyId" }, "INV_ITEM_OWNPARTY");

                    b.HasIndex(new[] { "PartyId" }, "INV_ITEM_PARTY");

                    b.HasIndex(new[] { "ProductId" }, "INV_ITEM_PRODUCT");

                    b.HasIndex(new[] { "StatusId" }, "INV_ITEM_STTSITM");

                    b.HasIndex(new[] { "InventoryItemTypeId" }, "INV_ITEM_TYPE");

                    b.HasIndex(new[] { "UomId" }, "INV_ITEM_UOM");

                    b.HasIndex(new[] { "FixedAssetId" }, "IYIM_FAST");

                    b.ToTable("INVENTORY_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItemAttribute", b =>
                {
                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InventoryItemId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVR_ITM_ATTT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVR_ITM_ATTT_TXSP");

                    b.HasIndex(new[] { "InventoryItemId" }, "INV_ITEM_ATTR");

                    b.ToTable("INVENTORY_ITEM_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItemDetail", b =>
                {
                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("InventoryItemDetailSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_DETAIL_SEQ_ID");

                    b.Property<decimal?>("AccountingQuantityDiff")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("ACCOUNTING_QUANTITY_DIFF");

                    b.Property<decimal?>("AvailableToPromiseDiff")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("AVAILABLE_TO_PROMISE_DIFF");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EFFECTIVE_DATE");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("ItemIssuanceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ITEM_ISSUANCE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MaintHistSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MAINT_HIST_SEQ_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("PhysicalInventoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PHYSICAL_INVENTORY_ID");

                    b.Property<decimal?>("QuantityOnHandDiff")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_ON_HAND_DIFF");

                    b.Property<string>("ReasonEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REASON_ENUM_ID");

                    b.Property<string>("ReceiptId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECEIPT_ID");

                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("ReturnItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_SEQ_ID");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("UNIT_COST");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.HasKey("InventoryItemId", "InventoryItemDetailSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVR_ITM_DTL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVR_ITM_DTL_TXSTP");

                    b.HasIndex(new[] { "FixedAssetId", "MaintHistSeqId" }, "INV_ITDTL_FAMNT");

                    b.HasIndex(new[] { "InventoryItemId" }, "INV_ITDTL_INVIT");

                    b.HasIndex(new[] { "ItemIssuanceId" }, "INV_ITDTL_ITMIS");

                    b.HasIndex(new[] { "PhysicalInventoryId" }, "INV_ITDTL_PHINV");

                    b.HasIndex(new[] { "ReasonEnumId" }, "INV_ITDTL_REAS");

                    b.HasIndex(new[] { "ReceiptId" }, "INV_ITDTL_SHRCT");

                    b.HasIndex(new[] { "WorkEffortId" }, "INV_ITDTL_WEFF");

                    b.ToTable("INVENTORY_ITEM_DETAIL", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItemLabel", b =>
                {
                    b.Property<string>("InventoryItemLabelId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_LABEL_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("InventoryItemLabelTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_LABEL_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InventoryItemLabelId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVR_ITM_LBL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVR_ITM_LBL_TXSTP");

                    b.HasIndex(new[] { "InventoryItemLabelTypeId" }, "INV_ITLA_TYPE");

                    b.ToTable("INVENTORY_ITEM_LABEL", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItemLabelAppl", b =>
                {
                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("InventoryItemLabelTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_LABEL_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("InventoryItemLabelId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_LABEL_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("InventoryItemId", "InventoryItemLabelTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INR_ITM_LBL_APL_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INR_ITM_LBL_APL_TS");

                    b.HasIndex(new[] { "InventoryItemId" }, "INV_ITLAP_ITEM");

                    b.HasIndex(new[] { "InventoryItemLabelId" }, "INV_ITLAP_LAB");

                    b.HasIndex(new[] { "InventoryItemLabelTypeId" }, "INV_ITLAP_TYPE");

                    b.ToTable("INVENTORY_ITEM_LABEL_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItemLabelType", b =>
                {
                    b.Property<string>("InventoryItemLabelTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_LABEL_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("InventoryItemLabelTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INR_ITM_LBL_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INR_ITM_LBL_TP_TXS");

                    b.HasIndex(new[] { "ParentTypeId" }, "INV_ITLT_TYPPAR");

                    b.ToTable("INVENTORY_ITEM_LABEL_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItemStatus", b =>
                {
                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime>("StatusDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATETIME");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OwnerPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OWNER_PARTY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<DateTime?>("StatusEndDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_END_DATETIME");

                    b.HasKey("InventoryItemId", "StatusId", "StatusDatetime");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVR_ITM_STS_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVR_ITM_STS_TXSTP");

                    b.HasIndex(new[] { "InventoryItemId" }, "INV_ITEM_STTS_II");

                    b.HasIndex(new[] { "StatusId" }, "INV_ITEM_STTS_SI");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "INV_ITEM_STTS_USER");

                    b.ToTable("INVENTORY_ITEM_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItemTempRe", b =>
                {
                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<DateTime?>("ReservedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RESERVED_DATE");

                    b.HasKey("VisitId", "ProductId", "ProductStoreId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INR_ITM_TMP_RS_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INR_ITM_TMP_RS_TXS");

                    b.HasIndex(new[] { "ProductStoreId" }, "INV_ITEM_TR_PRDS");

                    b.HasIndex(new[] { "ProductId" }, "INV_ITEM_TR_PROD");

                    b.ToTable("INVENTORY_ITEM_TEMP_RES", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItemType", b =>
                {
                    b.Property<string>("InventoryItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("InventoryItemTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVNR_ITM_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVNR_ITM_TP_TXSTP");

                    b.HasIndex(new[] { "ParentTypeId" }, "INV_ITEM_TYPPAR");

                    b.ToTable("INVENTORY_ITEM_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItemTypeAttr", b =>
                {
                    b.Property<string>("InventoryItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InventoryItemTypeId", "AttrName");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INR_ITM_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INR_ITM_TP_ATR_TXS");

                    b.HasIndex(new[] { "InventoryItemTypeId" }, "INV_ITEM_TYP_ATTR");

                    b.ToTable("INVENTORY_ITEM_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryItemVariance", b =>
                {
                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("PhysicalInventoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PHYSICAL_INVENTORY_ID");

                    b.Property<decimal?>("AvailableToPromiseVar")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("AVAILABLE_TO_PROMISE_VAR");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("QuantityOnHandVar")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_ON_HAND_VAR");

                    b.Property<string>("VarianceReasonId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VARIANCE_REASON_ID");

                    b.HasKey("InventoryItemId", "PhysicalInventoryId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVR_ITM_VRC_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVR_ITM_VRC_TXSTP");

                    b.HasIndex(new[] { "InventoryItemId" }, "INV_ITEM_VAR_ITEM");

                    b.HasIndex(new[] { "PhysicalInventoryId" }, "INV_ITEM_VAR_PINV");

                    b.HasIndex(new[] { "VarianceReasonId" }, "INV_ITEM_VAR_RSN");

                    b.ToTable("INVENTORY_ITEM_VARIANCE", (string)null);
                });

            modelBuilder.Entity("Domain.InventoryTransfer", b =>
                {
                    b.Property<string>("InventoryTransferId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_TRANSFER_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("ContainerId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTAINER_ID");

                    b.Property<string>("ContainerIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTAINER_ID_TO");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("FacilityIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID_TO");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("ItemIssuanceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ITEM_ISSUANCE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LocationSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCATION_SEQ_ID");

                    b.Property<string>("LocationSeqIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCATION_SEQ_ID_TO");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RECEIVE_DATE");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SEND_DATE");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("InventoryTransferId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVNR_TRNSR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVNR_TRNSR_TXSTMP");

                    b.HasIndex(new[] { "ContainerId" }, "INV_XFER_CONT");

                    b.HasIndex(new[] { "FacilityId" }, "INV_XFER_FAC");

                    b.HasIndex(new[] { "ItemIssuanceId" }, "INV_XFER_ISSU");

                    b.HasIndex(new[] { "InventoryItemId" }, "INV_XFER_ITEM");

                    b.HasIndex(new[] { "StatusId" }, "INV_XFER_STTS");

                    b.HasIndex(new[] { "ContainerIdTo" }, "INV_XFER_TCNT");

                    b.HasIndex(new[] { "FacilityIdTo" }, "INV_XFER_TFAC");

                    b.ToTable("INVENTORY_TRANSFER", (string)null);
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_ACCOUNT_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DUE_DATE");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime")
                        .HasColumnName("INVOICE_DATE");

                    b.Property<string>("InvoiceMessage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INVOICE_MESSAGE");

                    b.Property<string>("InvoiceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PAID_DATE");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("RecurrenceInfoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECURRENCE_INFO_ID");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("REFERENCE_NUMBER");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("InvoiceId");

                    b.HasIndex(new[] { "BillingAccountId" }, "INVOICE_BILLACCT");

                    b.HasIndex(new[] { "ContactMechId" }, "INVOICE_CMECH");

                    b.HasIndex(new[] { "CurrencyUomId" }, "INVOICE_CUOM");

                    b.HasIndex(new[] { "InvoiceTypeId" }, "INVOICE_INVTYP");

                    b.HasIndex(new[] { "PartyId" }, "INVOICE_PARTY");

                    b.HasIndex(new[] { "PartyIdFrom" }, "INVOICE_PARTY_FRM");

                    b.HasIndex(new[] { "RecurrenceInfoId" }, "INVOICE_RECINFO");

                    b.HasIndex(new[] { "RoleTypeId" }, "INVOICE_ROLETYP");

                    b.HasIndex(new[] { "StatusId" }, "INVOICE_STTSITM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVOICE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVOICE_TXSTMP");

                    b.ToTable("INVOICE", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceAttribute", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InvoiceId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVC_ATTRBT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVC_ATTRBT_TXSTMP");

                    b.HasIndex(new[] { "InvoiceId" }, "INVOICE_ATTR");

                    b.ToTable("INVOICE_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceContactMech", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("ContactMechPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InvoiceId", "ContactMechPurposeTypeId", "ContactMechId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INC_CNTT_MCH_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INC_CNTT_MCH_TXSTP");

                    b.HasIndex(new[] { "ContactMechId" }, "INVOICE_CMECH_CM");

                    b.HasIndex(new[] { "ContactMechPurposeTypeId" }, "INVOICE_CMECH_CMPT");

                    b.HasIndex(new[] { "InvoiceId" }, "INVOICE_CMECH_HDR");

                    b.ToTable("INVOICE_CONTACT_MECH", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceContent", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ContentId", "InvoiceId", "InvoiceContentTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVC_CNTNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVC_CNTNT_TXSTMP");

                    b.HasIndex(new[] { "ContentId" }, "INV_CNT_CNT");

                    b.HasIndex(new[] { "InvoiceId" }, "INV_CNT_PROD");

                    b.HasIndex(new[] { "InvoiceContentTypeId" }, "INV_CNT_TYPE");

                    b.ToTable("INVOICE_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceContentType", b =>
                {
                    b.Property<string>("InvoiceContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("InvoiceContentTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INC_CNTT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INC_CNTT_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "INVCT_TYP_PARENT");

                    b.ToTable("INVOICE_CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceItem", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("InvoiceItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OverrideGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                    b.Property<string>("OverrideOrgPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OVERRIDE_ORG_PARTY_ID");

                    b.Property<string>("ParentInvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_INVOICE_ID");

                    b.Property<string>("ParentInvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_INVOICE_ITEM_SEQ_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("SalesOpportunityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_OPPORTUNITY_ID");

                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.Property<string>("TaxAuthorityRateSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID");

                    b.Property<string>("TaxableFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TAXABLE_FLAG")
                        .IsFixedLength();

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("InvoiceId", "InvoiceItemSeqId");

                    b.HasIndex(new[] { "InvoiceId" }, "INVCE_ITM_INVCE");

                    b.HasIndex(new[] { "InventoryItemId" }, "INVCE_ITM_INVITM");

                    b.HasIndex(new[] { "OverrideGlAccountId" }, "INVCE_ITM_ORGLA");

                    b.HasIndex(new[] { "OverrideOrgPartyId" }, "INVCE_ITM_OVRPTY");

                    b.HasIndex(new[] { "ParentInvoiceId", "ParentInvoiceItemSeqId" }, "INVCE_ITM_PINVIT");

                    b.HasIndex(new[] { "ProductFeatureId" }, "INVCE_ITM_PRDFT");

                    b.HasIndex(new[] { "ProductId" }, "INVCE_ITM_PROD");

                    b.HasIndex(new[] { "SalesOpportunityId" }, "INVCE_ITM_SLSOPP");

                    b.HasIndex(new[] { "TaxAuthGeoId" }, "INVCE_ITM_TAXGEO");

                    b.HasIndex(new[] { "TaxAuthPartyId" }, "INVCE_ITM_TAXPTY");

                    b.HasIndex(new[] { "UomId" }, "INVCE_ITM_UOM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVC_ITM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVC_ITM_TXSTMP");

                    b.HasIndex(new[] { "InvoiceItemTypeId" }, "INVOICE_ITMITYP");

                    b.HasIndex(new[] { "TaxAuthorityRateSeqId" }, "INVOICE_ITM_TARP");

                    b.ToTable("INVOICE_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceItemAssoc", b =>
                {
                    b.Property<string>("InvoiceIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID_FROM");

                    b.Property<string>("InvoiceItemSeqIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID_FROM");

                    b.Property<string>("InvoiceIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID_TO");

                    b.Property<string>("InvoiceItemSeqIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID_TO");

                    b.Property<string>("InvoiceItemAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_ASSOC_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("InvoiceIdFrom", "InvoiceItemSeqIdFrom", "InvoiceIdTo", "InvoiceItemSeqIdTo", "InvoiceItemAssocTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INC_ITM_ASC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INC_ITM_ASC_TXSTMP");

                    b.HasIndex(new[] { "InvoiceItemAssocTypeId" }, "INITMASCTYP_IIASC");

                    b.HasIndex(new[] { "InvoiceIdFrom", "InvoiceItemSeqIdFrom" }, "INITMASC_FIITM");

                    b.HasIndex(new[] { "InvoiceIdTo", "InvoiceItemSeqIdTo" }, "INITMASC_TIITM");

                    b.ToTable("INVOICE_ITEM_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceItemAssocType", b =>
                {
                    b.Property<string>("InvoiceItemAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("InvoiceItemAssocTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INC_ITM_ASC_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INC_ITM_ASC_TP_TXS");

                    b.HasIndex(new[] { "ParentTypeId" }, "INITMASCTYP_PRNT");

                    b.ToTable("INVOICE_ITEM_ASSOC_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceItemAttribute", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InvoiceId", "InvoiceItemSeqId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INC_ITM_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INC_ITM_ATTT_TXSTP");

                    b.HasIndex(new[] { "InvoiceId", "InvoiceItemSeqId" }, "INVOICE_IMAT_ITM");

                    b.ToTable("INVOICE_ITEM_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceItemType", b =>
                {
                    b.Property<string>("InvoiceItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DefaultGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_GL_ACCOUNT_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("InvoiceItemTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVC_ITM_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVC_ITM_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "INVOICE_ITEM_TPAR");

                    b.HasIndex(new[] { "DefaultGlAccountId" }, "INVOICE_ITM_DGLAC");

                    b.ToTable("INVOICE_ITEM_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceItemTypeAttr", b =>
                {
                    b.Property<string>("InvoiceItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InvoiceItemTypeId", "AttrName");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INC_ITM_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INC_ITM_TP_ATR_TXS");

                    b.HasIndex(new[] { "InvoiceItemTypeId" }, "INVOICE_ITEM_TATR");

                    b.ToTable("INVOICE_ITEM_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceItemTypeGlAccount", b =>
                {
                    b.Property<string>("InvoiceItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_TYPE_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InvoiceItemTypeId", "OrganizationPartyId")
                        .HasName("PK_INVOICE_ITEM_TYPE_GL_ACCOUN");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INC_TP_GL_ACT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INC_TP_GL_ACT_TS");

                    b.HasIndex(new[] { "GlAccountId" }, "INVOICE_ITGA_GLAC");

                    b.HasIndex(new[] { "InvoiceItemTypeId" }, "INVOICE_ITGA_IIT");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "INVOICE_ITGA_OPTY");

                    b.ToTable("INVOICE_ITEM_TYPE_GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceItemTypeMap", b =>
                {
                    b.Property<string>("InvoiceItemMapKey")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_MAP_KEY");

                    b.Property<string>("InvoiceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("InvoiceItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InvoiceItemMapKey", "InvoiceTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INC_ITM_TP_MP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INC_ITM_TP_MP_TXSP");

                    b.HasIndex(new[] { "InvoiceTypeId" }, "INVITMMAP_INVTYP");

                    b.HasIndex(new[] { "InvoiceItemTypeId" }, "INVOICE_ITEM_MAP");

                    b.ToTable("INVOICE_ITEM_TYPE_MAP", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceNote", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InvoiceId", "NoteId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVC_NT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVC_NT_TXSTMP");

                    b.HasIndex(new[] { "InvoiceId" }, "INVOICE_NOTE_INV");

                    b.HasIndex(new[] { "NoteId" }, "INVOICE_NOTE_NOTE");

                    b.ToTable("INVOICE_NOTE", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceRole", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DatetimePerformed")
                        .HasColumnType("datetime")
                        .HasColumnName("DATETIME_PERFORMED");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PERCENTAGE");

                    b.HasKey("InvoiceId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "InvoiceId" }, "INVCE_RLE_INVCE");

                    b.HasIndex(new[] { "PartyId" }, "INVCE_RLE_PARTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "INVCE_RLE_PTRL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVC_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVC_RL_TXSTMP");

                    b.ToTable("INVOICE_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceStatus", b =>
                {
                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("StatusId", "InvoiceId", "StatusDate");

                    b.HasIndex(new[] { "InvoiceId" }, "INVCE_STS_INVCE");

                    b.HasIndex(new[] { "StatusId" }, "INVCE_STS_STSITM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVC_STTS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVC_STTS_TXSTMP");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "INV_STTS_USRLGN");

                    b.ToTable("INVOICE_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceTerm", b =>
                {
                    b.Property<string>("InvoiceTermId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_TERM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("TermDays")
                        .HasColumnType("int")
                        .HasColumnName("TERM_DAYS");

                    b.Property<string>("TermTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERM_TYPE_ID");

                    b.Property<decimal?>("TermValue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TERM_VALUE");

                    b.Property<string>("TextValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TEXT_VALUE");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("InvoiceTermId");

                    b.HasIndex(new[] { "InvoiceId" }, "INVCE_TRM_INVCE");

                    b.HasIndex(new[] { "TermTypeId" }, "INVCE_TRM_TRM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVC_TRM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVC_TRM_TXSTMP");

                    b.ToTable("INVOICE_TERM", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceTermAttribute", b =>
                {
                    b.Property<string>("InvoiceTermId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_TERM_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InvoiceTermId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INC_TRM_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INC_TRM_ATTT_TXSTP");

                    b.HasIndex(new[] { "InvoiceTermId" }, "INVOICE_TRM_ATTR");

                    b.ToTable("INVOICE_TERM_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceType", b =>
                {
                    b.Property<string>("InvoiceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("InvoiceTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVC_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVC_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "INVOICE_TYPE_PAR");

                    b.ToTable("INVOICE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.InvoiceTypeAttr", b =>
                {
                    b.Property<string>("InvoiceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("InvoiceTypeId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "INVC_TP_ATR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "INVC_TP_ATR_TXSTMP");

                    b.HasIndex(new[] { "InvoiceTypeId" }, "INVOICE_TPAT_TYP");

                    b.ToTable("INVOICE_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.ItemIssuance", b =>
                {
                    b.Property<string>("ItemIssuanceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ITEM_ISSUANCE_ID");

                    b.Property<decimal?>("CancelQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("CANCEL_QUANTITY");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("IssuedByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ISSUED_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("IssuedDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("ISSUED_DATE_TIME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MaintHistSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MAINT_HIST_SEQ_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                    b.HasKey("ItemIssuanceId");

                    b.HasIndex(new[] { "FixedAssetId", "MaintHistSeqId" }, "ITEM_ISS_FAMNT");

                    b.HasIndex(new[] { "IssuedByUserLoginId" }, "ITEM_ISS_IBUL");

                    b.HasIndex(new[] { "InventoryItemId" }, "ITEM_ISS_INVITM");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ITEM_ISS_ORITM");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentItemSeqId" }, "ITEM_ISS_SHITM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ITM_ISSNC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ITM_ISSNC_TXSTMP");

                    b.ToTable("ITEM_ISSUANCE", (string)null);
                });

            modelBuilder.Entity("Domain.ItemIssuanceRole", b =>
                {
                    b.Property<string>("ItemIssuanceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ITEM_ISSUANCE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ItemIssuanceId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "ItemIssuanceId" }, "ITEM_ISSRL_ITMIS");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "ITEM_ISSRL_PTRL");

                    b.HasIndex(new[] { "PartyId" }, "ITEM_ISSRL_PTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ITM_ISSC_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ITM_ISSC_RL_TXSTMP");

                    b.ToTable("ITEM_ISSUANCE_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.JavaResource", b =>
                {
                    b.Property<string>("ResourceName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("RESOURCE_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<byte[]>("ResourceValue")
                        .HasColumnType("longblob")
                        .HasColumnName("RESOURCE_VALUE");

                    b.HasKey("ResourceName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "JV_RSRC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "JV_RSRC_TXSTMP");

                    b.ToTable("JAVA_RESOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.JobInterview", b =>
                {
                    b.Property<string>("JobInterviewId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_INTERVIEW_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GradeSecuredEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GRADE_SECURED_ENUM_ID");

                    b.Property<DateTime?>("JobInterviewDate")
                        .HasColumnType("datetime")
                        .HasColumnName("JOB_INTERVIEW_DATE");

                    b.Property<string>("JobInterviewResult")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_INTERVIEW_RESULT");

                    b.Property<string>("JobInterviewTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_INTERVIEW_TYPE_ID");

                    b.Property<string>("JobIntervieweePartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_INTERVIEWEE_PARTY_ID");

                    b.Property<string>("JobInterviewerPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_INTERVIEWER_PARTY_ID");

                    b.Property<string>("JobRequisitionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_REQUISITION_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("JobInterviewId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "JB_INTRVW_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "JB_INTRVW_TXSTMP");

                    b.HasIndex(new[] { "GradeSecuredEnumId" }, "JOB_INTW_ENUM");

                    b.HasIndex(new[] { "JobIntervieweePartyId" }, "JOB_INTW_IEPR");

                    b.HasIndex(new[] { "JobInterviewTypeId" }, "JOB_INTW_INTYP");

                    b.HasIndex(new[] { "JobInterviewerPartyId" }, "JOB_INTW_IRPR");

                    b.HasIndex(new[] { "JobRequisitionId" }, "JOB_INTW_JBREQ");

                    b.ToTable("JOB_INTERVIEW", (string)null);
                });

            modelBuilder.Entity("Domain.JobInterviewType", b =>
                {
                    b.Property<string>("JobInterviewTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_INTERVIEW_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("JobInterviewTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "JB_INTRW_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "JB_INTRW_TP_TXSTMP");

                    b.ToTable("JOB_INTERVIEW_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.JobManagerLock", b =>
                {
                    b.Property<string>("InstanceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INSTANCE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ReasonEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REASON_ENUM_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("InstanceId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "JB_MNGR_LCK_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "JB_MNGR_LCK_TXSTMP");

                    b.HasIndex(new[] { "ReasonEnumId" }, "JOBLK_ENUM_REAS");

                    b.ToTable("JOB_MANAGER_LOCK", (string)null);
                });

            modelBuilder.Entity("Domain.JobRequisition", b =>
                {
                    b.Property<string>("JobRequisitionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_REQUISITION_ID");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("AGE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<int?>("DurationMonths")
                        .HasColumnType("int")
                        .HasColumnName("DURATION_MONTHS");

                    b.Property<string>("ExamTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXAM_TYPE_ENUM_ID");

                    b.Property<int?>("ExperienceMonths")
                        .HasColumnType("int")
                        .HasColumnName("EXPERIENCE_MONTHS");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int")
                        .HasColumnName("EXPERIENCE_YEARS");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("GENDER")
                        .IsFixedLength();

                    b.Property<string>("JobLocation")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_LOCATION");

                    b.Property<string>("JobPostingTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_POSTING_TYPE_ENUM_ID");

                    b.Property<DateTime?>("JobRequisitionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("JOB_REQUISITION_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NoOfResources")
                        .HasColumnType("int")
                        .HasColumnName("NO_OF_RESOURCES");

                    b.Property<string>("Qualification")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("QUALIFICATION");

                    b.Property<DateTime?>("RequiredOnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("REQUIRED_ON_DATE");

                    b.Property<string>("SkillTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SKILL_TYPE_ID");

                    b.HasKey("JobRequisitionId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "JB_RQSTN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "JB_RQSTN_TXSTMP");

                    b.HasIndex(new[] { "ExamTypeEnumId" }, "JOB_REQ_ENUMEXM");

                    b.HasIndex(new[] { "JobPostingTypeEnumId" }, "JOB_REQ_ENUMJBP");

                    b.HasIndex(new[] { "SkillTypeId" }, "JOB_REQ_SKTYP");

                    b.ToTable("JOB_REQUISITION", (string)null);
                });

            modelBuilder.Entity("Domain.JobSandbox", b =>
                {
                    b.Property<string>("JobId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_ID");

                    b.Property<string>("AuthUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("AUTH_USER_LOGIN_ID");

                    b.Property<DateTime?>("CancelDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("CANCEL_DATE_TIME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<int?>("CurrentRecurrenceCount")
                        .HasColumnType("int")
                        .HasColumnName("CURRENT_RECURRENCE_COUNT");

                    b.Property<int?>("CurrentRetryCount")
                        .HasColumnType("int")
                        .HasColumnName("CURRENT_RETRY_COUNT");

                    b.Property<DateTime?>("FinishDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("FINISH_DATE_TIME");

                    b.Property<string>("JobName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("JOB_NAME");

                    b.Property<string>("JobResult")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("JOB_RESULT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LoaderName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LOADER_NAME");

                    b.Property<int?>("MaxRecurrenceCount")
                        .HasColumnType("int")
                        .HasColumnName("MAX_RECURRENCE_COUNT");

                    b.Property<int?>("MaxRetry")
                        .HasColumnType("int")
                        .HasColumnName("MAX_RETRY");

                    b.Property<string>("ParentJobId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_JOB_ID");

                    b.Property<string>("PoolId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("POOL_ID");

                    b.Property<string>("PreviousJobId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PREVIOUS_JOB_ID");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("PRIORITY");

                    b.Property<string>("RecurrenceInfoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECURRENCE_INFO_ID");

                    b.Property<string>("RecurrenceTimeZone")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("RECURRENCE_TIME_ZONE");

                    b.Property<string>("RunAsUser")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("RUN_AS_USER");

                    b.Property<string>("RunByInstanceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RUN_BY_INSTANCE_ID");

                    b.Property<DateTime?>("RunTime")
                        .HasColumnType("datetime")
                        .HasColumnName("RUN_TIME");

                    b.Property<string>("RuntimeDataId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RUNTIME_DATA_ID");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SERVICE_NAME");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("START_DATE_TIME");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("TempExprId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TEMP_EXPR_ID");

                    b.HasKey("JobId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "JOB_SANDBOX_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "JOB_SANDBOX_TXSTMP");

                    b.HasIndex(new[] { "AuthUserLoginId" }, "JOB_SNDBX_AUSRLGN");

                    b.HasIndex(new[] { "RecurrenceInfoId" }, "JOB_SNDBX_RECINFO");

                    b.HasIndex(new[] { "RuntimeDataId" }, "JOB_SNDBX_RNTMDTA");

                    b.HasIndex(new[] { "RunByInstanceId", "StatusId" }, "JOB_SNDBX_RUNSTAT");

                    b.HasIndex(new[] { "StatusId" }, "JOB_SNDBX_STTS");

                    b.HasIndex(new[] { "TempExprId" }, "JOB_SNDBX_TEMPEXPR");

                    b.HasIndex(new[] { "RunAsUser" }, "JOB_SNDBX_USRLGN");

                    b.ToTable("JOB_SANDBOX", (string)null);
                });

            modelBuilder.Entity("Domain.KeywordThesauru", b =>
                {
                    b.Property<string>("EnteredKeyword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ENTERED_KEYWORD");

                    b.Property<string>("AlternateKeyword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ALTERNATE_KEYWORD");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RelationshipEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RELATIONSHIP_ENUM_ID");

                    b.HasKey("EnteredKeyword", "AlternateKeyword");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "KWRD_THSRS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "KWRD_THSRS_TXSTMP");

                    b.HasIndex(new[] { "RelationshipEnumId" }, "KW_THRS_RLENM");

                    b.ToTable("KEYWORD_THESAURUS", (string)null);
                });

            modelBuilder.Entity("Domain.Lot", b =>
                {
                    b.Property<string>("LotId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATION_DATE");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EXPIRATION_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.HasKey("LotId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "LOT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "LOT_TXSTMP");

                    b.ToTable("LOT", (string)null);
                });

            modelBuilder.Entity("Domain.MarketInterest", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("PartyClassificationGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductCategoryId", "PartyClassificationGroupId", "FromDate");

                    b.HasIndex(new[] { "ProductCategoryId" }, "MARKET_INT_PCAT");

                    b.HasIndex(new[] { "PartyClassificationGroupId" }, "MARKET_INT_PCGRP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MRKT_INTRST_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MRKT_INTRST_TXSTMP");

                    b.ToTable("MARKET_INTEREST", (string)null);
                });

            modelBuilder.Entity("Domain.MarketingCampaign", b =>
                {
                    b.Property<string>("MarketingCampaignId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MARKETING_CAMPAIGN_ID");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ACTUAL_COST");

                    b.Property<decimal?>("BudgetedCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("BUDGETED_COST");

                    b.Property<string>("CampaignName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CAMPAIGN_NAME");

                    b.Property<string>("CampaignSummary")
                        .HasColumnType("text")
                        .HasColumnName("CAMPAIGN_SUMMARY");

                    b.Property<string>("ConvertedLeads")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONVERTED_LEADS");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ESTIMATED_COST");

                    b.Property<double?>("ExpectedResponsePercent")
                        .HasColumnType("double")
                        .HasColumnName("EXPECTED_RESPONSE_PERCENT");

                    b.Property<decimal?>("ExpectedRevenue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("EXPECTED_REVENUE");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("IsActive")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_ACTIVE")
                        .IsFixedLength();

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NumSent")
                        .HasColumnType("int")
                        .HasColumnName("NUM_SENT");

                    b.Property<string>("ParentCampaignId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_CAMPAIGN_ID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("START_DATE");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("MarketingCampaignId");

                    b.HasIndex(new[] { "CurrencyUomId" }, "MKTGCPN_CUOM");

                    b.HasIndex(new[] { "ParentCampaignId" }, "MKTGCPN_PRNT");

                    b.HasIndex(new[] { "StatusId" }, "MKTGCPN_STS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MRKTNG_CMPN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MRKTNG_CMPN_TXSTMP");

                    b.ToTable("MARKETING_CAMPAIGN", (string)null);
                });

            modelBuilder.Entity("Domain.MarketingCampaignNote", b =>
                {
                    b.Property<string>("MarketingCampaignId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MARKETING_CAMPAIGN_ID");

                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("MarketingCampaignId", "NoteId");

                    b.HasIndex(new[] { "MarketingCampaignId" }, "MKTGCPN_NOTE_CMPN");

                    b.HasIndex(new[] { "NoteId" }, "MKTGCPN_NOTE_NOTE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MRKTG_CMN_NT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MRKTG_CMN_NT_TXSTP");

                    b.ToTable("MARKETING_CAMPAIGN_NOTE", (string)null);
                });

            modelBuilder.Entity("Domain.MarketingCampaignPrice", b =>
                {
                    b.Property<string>("MarketingCampaignId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MARKETING_CAMPAIGN_ID");

                    b.Property<string>("ProductPriceRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_RULE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("MarketingCampaignId", "ProductPriceRuleId", "FromDate");

                    b.HasIndex(new[] { "MarketingCampaignId" }, "MKTGCPN_PRICE_MC");

                    b.HasIndex(new[] { "ProductPriceRuleId" }, "MKTGCPN_PRICE_PP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MRKG_CMN_PRC_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MRKG_CMN_PRC_TXSTP");

                    b.ToTable("MARKETING_CAMPAIGN_PRICE", (string)null);
                });

            modelBuilder.Entity("Domain.MarketingCampaignPromo", b =>
                {
                    b.Property<string>("MarketingCampaignId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MARKETING_CAMPAIGN_ID");

                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("MarketingCampaignId", "ProductPromoId", "FromDate");

                    b.HasIndex(new[] { "MarketingCampaignId" }, "MKTGCPN_PROMO_MC");

                    b.HasIndex(new[] { "ProductPromoId" }, "MKTGCPN_PROMO_PP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MRKG_CMN_PRM_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MRKG_CMN_PRM_TXSTP");

                    b.ToTable("MARKETING_CAMPAIGN_PROMO", (string)null);
                });

            modelBuilder.Entity("Domain.MarketingCampaignRole", b =>
                {
                    b.Property<string>("MarketingCampaignId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MARKETING_CAMPAIGN_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("MarketingCampaignId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "MarketingCampaignId" }, "MKTGCPN_ROLE_MC");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "MKTGCPN_ROLE_PR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MRKTG_CMN_RL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MRKTG_CMN_RL_TXSTP");

                    b.ToTable("MARKETING_CAMPAIGN_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.MetaDataPredicate", b =>
                {
                    b.Property<string>("MetaDataPredicateId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("META_DATA_PREDICATE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("MetaDataPredicateId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MT_DT_PRDCT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MT_DT_PRDCT_TXSTMP");

                    b.ToTable("META_DATA_PREDICATE", (string)null);
                });

            modelBuilder.Entity("Domain.MimeType", b =>
                {
                    b.Property<string>("MimeTypeId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MIME_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("MimeTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MIME_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MIME_TYPE_TXSTMP");

                    b.ToTable("MIME_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.MimeTypeHtmlTemplate", b =>
                {
                    b.Property<string>("MimeTypeId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MIME_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TemplateLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TEMPLATE_LOCATION");

                    b.HasKey("MimeTypeId");

                    b.HasIndex(new[] { "MimeTypeId" }, "MIMETYPE_TPL_MT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MM_TP_HTL_TMT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MM_TP_HTL_TMT_TXSP");

                    b.ToTable("MIME_TYPE_HTML_TEMPLATE", (string)null);
                });

            modelBuilder.Entity("Domain.MrpEvent", b =>
                {
                    b.Property<string>("MrpId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MRP_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EVENT_DATE");

                    b.Property<string>("MrpEventTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MRP_EVENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EventName")
                        .HasColumnType("text")
                        .HasColumnName("EVENT_NAME");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("FacilityIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID_TO");

                    b.Property<string>("IsLate")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_LATE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double")
                        .HasColumnName("QUANTITY");

                    b.HasKey("MrpId", "ProductId", "EventDate", "MrpEventTypeId");

                    b.HasIndex(new[] { "FacilityId" }, "MRPEV_FAC");

                    b.HasIndex(new[] { "ProductId" }, "MRPEV_PROD");

                    b.HasIndex(new[] { "MrpEventTypeId" }, "MRPEV_TYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MRP_EVENT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MRP_EVENT_TXSTMP");

                    b.ToTable("MRP_EVENT", (string)null);
                });

            modelBuilder.Entity("Domain.MrpEventType", b =>
                {
                    b.Property<string>("MrpEventTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MRP_EVENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("MrpEventTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "MRP_EVNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "MRP_EVNT_TP_TXSTMP");

                    b.ToTable("MRP_EVENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.NeedType", b =>
                {
                    b.Property<string>("NeedTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NEED_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("NeedTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "NEED_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "NEED_TYPE_TXSTMP");

                    b.ToTable("NEED_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.NoteDatum", b =>
                {
                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MoreInfoItemId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MORE_INFO_ITEM_ID");

                    b.Property<string>("MoreInfoItemName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MORE_INFO_ITEM_NAME");

                    b.Property<string>("MoreInfoUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MORE_INFO_URL");

                    b.Property<DateTime?>("NoteDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("NOTE_DATE_TIME");

                    b.Property<string>("NoteInfo")
                        .HasColumnType("text")
                        .HasColumnName("NOTE_INFO");

                    b.Property<string>("NoteName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOTE_NAME");

                    b.Property<string>("NoteParty")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_PARTY");

                    b.HasKey("NoteId");

                    b.HasIndex(new[] { "NoteParty" }, "NOTE_DATA_PTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "NOTE_DATA_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "NOTE_DATA_TXSTMP");

                    b.HasIndex(new[] { "NoteName" }, "systemInfo");

                    b.ToTable("NOTE_DATA", (string)null);
                });

            modelBuilder.Entity("Domain.OrderAdjustment", b =>
                {
                    b.Property<string>("OrderAdjustmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ADJUSTMENT_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("AMOUNT");

                    b.Property<decimal?>("AmountAlreadyIncluded")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("AMOUNT_ALREADY_INCLUDED");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("CorrespondingProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CORRESPONDING_PRODUCT_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomerReferenceId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CUSTOMER_REFERENCE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("ExemptAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("EXEMPT_AMOUNT");

                    b.Property<string>("IncludeInShipping")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_IN_SHIPPING")
                        .IsFixedLength();

                    b.Property<string>("IncludeInTax")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_IN_TAX")
                        .IsFixedLength();

                    b.Property<string>("IsManual")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_MANUAL")
                        .IsFixedLength();

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderAdjustmentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("OriginalAdjustmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGINAL_ADJUSTMENT_ID");

                    b.Property<string>("OverrideGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                    b.Property<string>("PrimaryGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_GEO_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<string>("ProductPromoActionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<string>("ProductPromoRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_RULE_ID");

                    b.Property<decimal?>("RecurringAmount")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("RECURRING_AMOUNT");

                    b.Property<string>("SecondaryGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SECONDARY_GEO_ID");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<decimal?>("SourcePercentage")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SOURCE_PERCENTAGE");

                    b.Property<string>("SourceReferenceId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SOURCE_REFERENCE_ID");

                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.Property<string>("TaxAuthorityRateSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID");

                    b.HasKey("OrderAdjustmentId");

                    b.HasIndex(new[] { "OverrideGlAccountId" }, "ORDER_ADJ_OGLA");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_ADJ_OHEAD");

                    b.HasIndex(new[] { "PrimaryGeoId" }, "ORDER_ADJ_PRGEO");

                    b.HasIndex(new[] { "ProductPromoId" }, "ORDER_ADJ_PROMO");

                    b.HasIndex(new[] { "SecondaryGeoId" }, "ORDER_ADJ_SCGEO");

                    b.HasIndex(new[] { "TaxAuthorityRateSeqId" }, "ORDER_ADJ_TARP");

                    b.HasIndex(new[] { "TaxAuthGeoId", "TaxAuthPartyId" }, "ORDER_ADJ_TXA");

                    b.HasIndex(new[] { "OrderAdjustmentTypeId" }, "ORDER_ADJ_TYPE");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "ORDER_ADJ_USERL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ADJSTMT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ADJSTMT_TXSTMP");

                    b.ToTable("ORDER_ADJUSTMENT", (string)null);
                });

            modelBuilder.Entity("Domain.OrderAdjustmentAttribute", b =>
                {
                    b.Property<string>("OrderAdjustmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ADJUSTMENT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderAdjustmentId", "AttrName");

                    b.HasIndex(new[] { "OrderAdjustmentId" }, "ORDER_ADJ_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ADJST_ATT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ADJST_ATT_TXSP");

                    b.ToTable("ORDER_ADJUSTMENT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderAdjustmentBilling", b =>
                {
                    b.Property<string>("OrderAdjustmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ADJUSTMENT_ID");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderAdjustmentId", "InvoiceId", "InvoiceItemSeqId");

                    b.HasIndex(new[] { "InvoiceId", "InvoiceItemSeqId" }, "ORDER_ADJBLNG_IITM");

                    b.HasIndex(new[] { "OrderAdjustmentId" }, "ORDER_ADJBLNG_OA");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ADJST_BLG_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ADJST_BLG_TXSP");

                    b.ToTable("ORDER_ADJUSTMENT_BILLING", (string)null);
                });

            modelBuilder.Entity("Domain.OrderAdjustmentType", b =>
                {
                    b.Property<string>("OrderAdjustmentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("OrderAdjustmentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "ORDER_ADJ_TYPPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ADJSTT_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ADJSTT_TP_TXSP");

                    b.ToTable("ORDER_ADJUSTMENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderAdjustmentTypeAttr", b =>
                {
                    b.Property<string>("OrderAdjustmentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderAdjustmentTypeId", "AttrName");

                    b.HasIndex(new[] { "OrderAdjustmentTypeId" }, "ORDER_ADJ_TYPATTR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ADJT_TP_ATR_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ADJT_TP_ATR_TS");

                    b.ToTable("ORDER_ADJUSTMENT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.OrderAttribute", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "AttrName");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_ATTR_HDR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_ATTRBT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_ATTRBT_TXSTMP");

                    b.ToTable("ORDER_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderBlacklist", b =>
                {
                    b.Property<string>("BlacklistString")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("BLACKLIST_STRING");

                    b.Property<string>("OrderBlacklistTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_BLACKLIST_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BlacklistString", "OrderBlacklistTypeId");

                    b.HasIndex(new[] { "OrderBlacklistTypeId" }, "ORDER_BKL_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_BLCKLT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_BLCKLT_TXSTMP");

                    b.ToTable("ORDER_BLACKLIST", (string)null);
                });

            modelBuilder.Entity("Domain.OrderBlacklistType", b =>
                {
                    b.Property<string>("OrderBlacklistTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_BLACKLIST_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderBlacklistTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_BLCKT_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_BLCKT_TP_TXSTP");

                    b.ToTable("ORDER_BLACKLIST_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderContactMech", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("ContactMechPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "ContactMechPurposeTypeId", "ContactMechId");

                    b.HasIndex(new[] { "ContactMechId" }, "ORDER_CMECH_CM");

                    b.HasIndex(new[] { "ContactMechPurposeTypeId" }, "ORDER_CMECH_CMPT");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_CMECH_HDR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_CNTT_MCH_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_CNTT_MCH_TXSTP");

                    b.ToTable("ORDER_CONTACT_MECH", (string)null);
                });

            modelBuilder.Entity("Domain.OrderContent", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("OrderContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ContentId", "OrderId", "OrderItemSeqId", "OrderContentTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_CNTNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_CNTNT_TXSTMP");

                    b.HasIndex(new[] { "ContentId" }, "ORD_CNT_CNT");

                    b.HasIndex(new[] { "OrderId" }, "ORD_CNT_PROD");

                    b.HasIndex(new[] { "OrderContentTypeId" }, "ORD_CNT_TYPE");

                    b.ToTable("ORDER_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.OrderContentType", b =>
                {
                    b.Property<string>("OrderContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("OrderContentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "ORDCT_TYP_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_CNTT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_CNTT_TP_TXSTMP");

                    b.ToTable("ORDER_CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderDeliverySchedule", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<int?>("Cartons")
                        .HasColumnType("int")
                        .HasColumnName("CARTONS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("EstimatedReadyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_READY_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SkidsPallets")
                        .HasColumnType("int")
                        .HasColumnName("SKIDS_PALLETS");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<decimal?>("TotalCubicSize")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("TOTAL_CUBIC_SIZE");

                    b.Property<string>("TotalCubicUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TOTAL_CUBIC_UOM_ID");

                    b.Property<decimal?>("TotalWeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("TOTAL_WEIGHT");

                    b.Property<string>("TotalWeightUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TOTAL_WEIGHT_UOM_ID");

                    b.Property<decimal?>("UnitsPieces")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("UNITS_PIECES");

                    b.HasKey("OrderId", "OrderItemSeqId");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_DELSCH_OHDR");

                    b.HasIndex(new[] { "StatusId" }, "ORDER_DELSCH_STTS");

                    b.HasIndex(new[] { "TotalCubicUomId" }, "ORDER_DELSCH_TCUOM");

                    b.HasIndex(new[] { "TotalWeightUomId" }, "ORDER_DELSCH_TWUOM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_DLR_SCHL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_DLR_SCHL_TXSTP");

                    b.ToTable("ORDER_DELIVERY_SCHEDULE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderDenylist", b =>
                {
                    b.Property<string>("DenylistString")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DENYLIST_STRING");

                    b.Property<string>("OrderDenylistTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_DENYLIST_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DenylistString", "OrderDenylistTypeId");

                    b.HasIndex(new[] { "OrderDenylistTypeId" }, "ORDER_DNY_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_DNLST_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_DNLST_TXSTMP");

                    b.ToTable("ORDER_DENYLIST", (string)null);
                });

            modelBuilder.Entity("Domain.OrderDenylistType", b =>
                {
                    b.Property<string>("OrderDenylistTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_DENYLIST_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderDenylistTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_DNLT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_DNLT_TP_TXSTMP");

                    b.ToTable("ORDER_DENYLIST_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderHeader", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AutoOrderShoppingListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AUTO_ORDER_SHOPPING_LIST_ID");

                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_ACCOUNT_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM");

                    b.Property<int?>("CurrentMileage")
                        .HasColumnType("int")
                        .HasColumnName("CURRENT_MILEAGE");

                    b.Property<string>("CustomerRemarks")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CUSTOMER_REMARKS");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXTERNAL_ID");

                    b.Property<string>("FirstAttemptOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIRST_ATTEMPT_ORDER_ID");

                    b.Property<decimal?>("GrandTotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("GRAND_TOTAL");

                    b.Property<string>("InternalCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("INTERNAL_CODE");

                    b.Property<string>("InternalRemarks")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INTERNAL_REMARKS");

                    b.Property<string>("InvoicePerShipment")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INVOICE_PER_SHIPMENT")
                        .IsFixedLength();

                    b.Property<string>("IsRushOrder")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_RUSH_ORDER")
                        .IsFixedLength();

                    b.Property<string>("IsViewed")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_VIEWED")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("NeedsInventoryIssuance")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("NEEDS_INVENTORY_ISSUANCE")
                        .IsFixedLength();

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ORDER_DATE");

                    b.Property<string>("OrderName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ORDER_NAME");

                    b.Property<string>("OrderTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_TYPE_ID");

                    b.Property<string>("OriginFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGIN_FACILITY_ID");

                    b.Property<DateTime?>("PickSheetPrintedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PICK_SHEET_PRINTED_DATE");

                    b.Property<string>("Priority")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PRIORITY")
                        .IsFixedLength();

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<decimal?>("RemainingSubTotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("REMAINING_SUB_TOTAL");

                    b.Property<string>("SalesChannelEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_CHANNEL_ENUM_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("SyncStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SYNC_STATUS_ID");

                    b.Property<string>("TerminalId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TERMINAL_ID");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TRANSACTION_ID");

                    b.Property<string>("VehicleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VEHICLE_ID");

                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.Property<string>("WebSiteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_ID");

                    b.HasKey("OrderId");

                    b.HasIndex("VehicleId");

                    b.HasIndex(new[] { "ExternalId" }, "ORDEREXT_ID_IDX");

                    b.HasIndex(new[] { "AutoOrderShoppingListId" }, "ORDER_HDR_AOSHLST");

                    b.HasIndex(new[] { "BillingAccountId" }, "ORDER_HDR_BACCT");

                    b.HasIndex(new[] { "CreatedBy" }, "ORDER_HDR_CBUL");

                    b.HasIndex(new[] { "CurrencyUom" }, "ORDER_HDR_CUOM");

                    b.HasIndex(new[] { "OriginFacilityId" }, "ORDER_HDR_OFAC");

                    b.HasIndex(new[] { "ProductStoreId" }, "ORDER_HDR_PDSTR");

                    b.HasIndex(new[] { "SalesChannelEnumId" }, "ORDER_HDR_SCENUM");

                    b.HasIndex(new[] { "StatusId" }, "ORDER_HDR_STTS");

                    b.HasIndex(new[] { "SyncStatusId" }, "ORDER_HDR_SYST");

                    b.HasIndex(new[] { "OrderTypeId" }, "ORDER_HDR_TYPE");

                    b.HasIndex(new[] { "WebSiteId" }, "ORDER_HDR_WS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_HDR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_HDR_TXSTMP");

                    b.ToTable("ORDER_HEADER", (string)null);
                });

            modelBuilder.Entity("Domain.OrderHeaderNote", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("InternalNote")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INTERNAL_NOTE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "NoteId");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_HDRNT_HDR");

                    b.HasIndex(new[] { "NoteId" }, "ORDER_HDRNT_NOTE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_HDR_NT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_HDR_NT_TXSTMP");

                    b.ToTable("ORDER_HEADER_NOTE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderHeaderWorkEffort", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "WorkEffortId");

                    b.HasIndex(new[] { "OrderId" }, "ORDERHDWE_OH");

                    b.HasIndex(new[] { "WorkEffortId" }, "ORDERHDWE_WEFF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_HDR_WRK_EFT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_HDR_WRK_EFT_TS");

                    b.ToTable("ORDER_HEADER_WORK_EFFORT", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItem", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<DateTime?>("AutoCancelDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AUTO_CANCEL_DATE");

                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("BudgetItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CancelBackOrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CANCEL_BACK_ORDER_DATE");

                    b.Property<decimal?>("CancelQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("CANCEL_QUANTITY");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("CorrespondingPoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CORRESPONDING_PO_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DeploymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEPLOYMENT_ID");

                    b.Property<DateTime?>("DontCancelSetDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DONT_CANCEL_SET_DATE");

                    b.Property<string>("DontCancelSetUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("DONT_CANCEL_SET_USER_LOGIN");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_DELIVERY_DATE");

                    b.Property<DateTime?>("EstimatedShipDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_SHIP_DATE");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXTERNAL_ID");

                    b.Property<string>("FromInventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FROM_INVENTORY_ITEM_ID");

                    b.Property<string>("IsItemGroupPrimary")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_ITEM_GROUP_PRIMARY")
                        .IsFixedLength();

                    b.Property<string>("IsModifiedPrice")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_MODIFIED_PRICE")
                        .IsFixedLength();

                    b.Property<string>("IsPromo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_PROMO")
                        .IsFixedLength();

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ITEM_DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderItemGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_GROUP_SEQ_ID");

                    b.Property<string>("OrderItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_TYPE_ID");

                    b.Property<string>("OverrideGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                    b.Property<string>("ParentOrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_ORDER_ITEM_SEQ_ID");

                    b.Property<string>("ProdCatalogId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CATALOG_ID");

                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<string>("QuoteItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ITEM_SEQ_ID");

                    b.Property<string>("RecurringFreqUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECURRING_FREQ_UOM_ID");

                    b.Property<DateTime?>("ReserveAfterDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RESERVE_AFTER_DATE");

                    b.Property<string>("SalesOpportunityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_OPPORTUNITY_ID");

                    b.Property<decimal?>("SelectedAmount")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SELECTED_AMOUNT");

                    b.Property<DateTime?>("ShipAfterDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SHIP_AFTER_DATE");

                    b.Property<DateTime?>("ShipBeforeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SHIP_BEFORE_DATE");

                    b.Property<string>("ShoppingListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOPPING_LIST_ID");

                    b.Property<string>("ShoppingListItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOPPING_LIST_ITEM_SEQ_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("SubscriptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_ID");

                    b.Property<string>("SupplierProductId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SUPPLIER_PRODUCT_ID");

                    b.Property<string>("SyncStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SYNC_STATUS_ID");

                    b.Property<decimal?>("UnitAverageCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("UNIT_AVERAGE_COST");

                    b.Property<decimal?>("UnitListPrice")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("UNIT_LIST_PRICE");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("UNIT_PRICE");

                    b.Property<decimal?>("UnitRecurringPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("UNIT_RECURRING_PRICE");

                    b.HasKey("OrderId", "OrderItemSeqId");

                    b.HasIndex(new[] { "DontCancelSetUserLogin" }, "ORDER_ITEM_DCUL");

                    b.HasIndex(new[] { "FromInventoryItemId" }, "ORDER_ITEM_FMINV");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_ITEM_HDR");

                    b.HasIndex(new[] { "OrderId", "OrderItemGroupSeqId" }, "ORDER_ITEM_ITGRP");

                    b.HasIndex(new[] { "OverrideGlAccountId" }, "ORDER_ITEM_OGLA");

                    b.HasIndex(new[] { "OrderItemTypeId" }, "ORDER_ITEM_ORTYP");

                    b.HasIndex(new[] { "ProductId" }, "ORDER_ITEM_PRODUCT");

                    b.HasIndex(new[] { "QuoteId", "QuoteItemSeqId" }, "ORDER_ITEM_QUIT");

                    b.HasIndex(new[] { "RecurringFreqUomId" }, "ORDER_ITEM_RFUOM");

                    b.HasIndex(new[] { "SalesOpportunityId" }, "ORDER_ITEM_SLSOPP");

                    b.HasIndex(new[] { "StatusId" }, "ORDER_ITEM_STTS");

                    b.HasIndex(new[] { "SyncStatusId" }, "ORDER_ITEM_SYST");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDER_ITEM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDER_ITEM_TXSTMP");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "ORDER_ITEM_USRLGN");

                    b.HasIndex(new[] { "ExternalId" }, "ORDITMEXT_ID_IDX");

                    b.ToTable("ORDER_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemAssoc", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<string>("ToOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TO_ORDER_ID");

                    b.Property<string>("ToOrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TO_ORDER_ITEM_SEQ_ID");

                    b.Property<string>("ToShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TO_SHIP_GROUP_SEQ_ID");

                    b.Property<string>("OrderItemAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.HasKey("OrderId", "OrderItemSeqId", "ShipGroupSeqId", "ToOrderId", "ToOrderItemSeqId", "ToShipGroupSeqId", "OrderItemAssocTypeId");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_ITASS_FRHD");

                    b.HasIndex(new[] { "ToOrderId" }, "ORDER_ITASS_TOHD");

                    b.HasIndex(new[] { "OrderItemAssocTypeId" }, "ORDER_ITASS_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_ASC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_ASC_TXSTMP");

                    b.ToTable("ORDER_ITEM_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemAssocType", b =>
                {
                    b.Property<string>("OrderItemAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("OrderItemAssocTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "ORDER_ITAS_TYPPAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_ASC_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_ASC_TP_TXS");

                    b.ToTable("ORDER_ITEM_ASSOC_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemAttribute", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "OrderItemSeqId", "AttrName");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ORDER_ITEM_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_ATTT_TXSTP");

                    b.ToTable("ORDER_ITEM_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemBilling", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ItemIssuanceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ITEM_ISSUANCE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("ShipmentReceiptId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_RECEIPT_ID");

                    b.HasKey("OrderId", "OrderItemSeqId", "InvoiceId", "InvoiceItemSeqId");

                    b.HasIndex(new[] { "ItemIssuanceId" }, "ORDER_ITBLNG_IISS");

                    b.HasIndex(new[] { "InvoiceId", "InvoiceItemSeqId" }, "ORDER_ITBLNG_IITM");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_ITBLNG_OHDR");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ORDER_ITBLNG_OITM");

                    b.HasIndex(new[] { "ShipmentReceiptId" }, "ORDER_ITBL_SHIPRCP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_BLLG_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_BLLG_TXSTP");

                    b.ToTable("ORDER_ITEM_BILLING", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemChange", b =>
                {
                    b.Property<string>("OrderItemChangeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_CHANGE_ID");

                    b.Property<decimal?>("CancelQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("CANCEL_QUANTITY");

                    b.Property<string>("ChangeComments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CHANGE_COMMENTS");

                    b.Property<DateTime?>("ChangeDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("CHANGE_DATETIME");

                    b.Property<string>("ChangeTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CHANGE_TYPE_ENUM_ID");

                    b.Property<string>("ChangeUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_USER_LOGIN");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ITEM_DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("ReasonEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REASON_ENUM_ID");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("UNIT_PRICE");

                    b.HasKey("OrderItemChangeId");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ORDER_ITCH_OITM");

                    b.HasIndex(new[] { "ReasonEnumId" }, "ORDER_ITCH_REAS");

                    b.HasIndex(new[] { "ChangeTypeEnumId" }, "ORDER_ITCH_TYPE");

                    b.HasIndex(new[] { "ChangeUserLogin" }, "ORDER_ITCH_USER");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_CHG_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_CHG_TXSTMP");

                    b.ToTable("ORDER_ITEM_CHANGE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemContactMech", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("ContactMechPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "OrderItemSeqId", "ContactMechPurposeTypeId");

                    b.HasIndex(new[] { "ContactMechId" }, "ORDER_ITCM_CMECH");

                    b.HasIndex(new[] { "ContactMechPurposeTypeId" }, "ORDER_ITCM_CMPT");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ORDER_ITCM_OITM");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_CNT_MCH_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_CNT_MCH_TS");

                    b.ToTable("ORDER_ITEM_CONTACT_MECH", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemGroup", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_GROUP_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("GROUP_NAME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_GROUP_SEQ_ID");

                    b.HasKey("OrderId", "OrderItemGroupSeqId");

                    b.HasIndex(new[] { "OrderId" }, "ORDERITMGRP_HDR");

                    b.HasIndex(new[] { "OrderId", "ParentGroupSeqId" }, "ORDERITMGRP_PGRP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_GRP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_GRP_TXSTMP");

                    b.ToTable("ORDER_ITEM_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemGroupOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("GroupOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GROUP_ORDER_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "OrderItemSeqId", "GroupOrderId");

                    b.HasIndex(new[] { "GroupOrderId" }, "OIGO_GROUP_ORDER");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "OIGO_ORDER_ITEM");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_GRP_ORR_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_GRP_ORR_TS");

                    b.ToTable("ORDER_ITEM_GROUP_ORDER", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemPriceInfo", b =>
                {
                    b.Property<string>("OrderItemPriceInfoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_PRICE_INFO_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("ModifyAmount")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("MODIFY_AMOUNT");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("ProductPriceActionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_ACTION_SEQ_ID");

                    b.Property<string>("ProductPriceRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_RULE_ID");

                    b.Property<string>("RateCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("RATE_CODE");

                    b.HasKey("OrderItemPriceInfoId");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ORDER_OIPI_OITM");

                    b.HasIndex(new[] { "ProductPriceRuleId", "ProductPriceActionSeqId" }, "ORDER_OIPI_PRAI");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_PRC_INF_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_PRC_INF_TS");

                    b.ToTable("ORDER_ITEM_PRICE_INFO", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemRole", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "OrderItemSeqId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_ITRL_OHDR");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ORDER_ITRL_OITM");

                    b.HasIndex(new[] { "PartyId" }, "ORDER_ITRL_PARTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "ORDER_ITRL_PTRLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_ITM_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_ITM_RL_TXSTMP");

                    b.ToTable("ORDER_ITEM_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemShipGroup", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<string>("CarrierPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CARRIER_PARTY_ID");

                    b.Property<string>("CarrierRoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CARRIER_ROLE_TYPE_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_DELIVERY_DATE");

                    b.Property<DateTime?>("EstimatedShipDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_SHIP_DATE");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("GiftMessage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("GIFT_MESSAGE");

                    b.Property<string>("IsGift")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_GIFT")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MaySplit")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("MAY_SPLIT")
                        .IsFixedLength();

                    b.Property<DateTime?>("ShipAfterDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SHIP_AFTER_DATE");

                    b.Property<DateTime?>("ShipByDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SHIP_BY_DATE");

                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.Property<string>("ShippingInstructions")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SHIPPING_INSTRUCTIONS");

                    b.Property<string>("SupplierAgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUPPLIER_AGREEMENT_ID");

                    b.Property<string>("SupplierPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUPPLIER_PARTY_ID");

                    b.Property<string>("TelecomContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TELECOM_CONTACT_MECH_ID");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TRACKING_NUMBER");

                    b.Property<string>("VendorPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VENDOR_PARTY_ID");

                    b.HasKey("OrderId", "ShipGroupSeqId");

                    b.HasIndex(new[] { "ContactMechId" }, "ORDER_ITSG_CNTM");

                    b.HasIndex(new[] { "CarrierPartyId", "CarrierRoleTypeId" }, "ORDER_ITSG_CPRLE");

                    b.HasIndex(new[] { "CarrierPartyId" }, "ORDER_ITSG_CPRTY");

                    b.HasIndex(new[] { "ShipmentMethodTypeId", "CarrierPartyId", "CarrierRoleTypeId" }, "ORDER_ITSG_CSHM");

                    b.HasIndex(new[] { "FacilityId" }, "ORDER_ITSG_FAC");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_ITSG_ORDH");

                    b.HasIndex(new[] { "ContactMechId" }, "ORDER_ITSG_PADR");

                    b.HasIndex(new[] { "SupplierAgreementId" }, "ORDER_ITSG_SAGR");

                    b.HasIndex(new[] { "ShipmentMethodTypeId" }, "ORDER_ITSG_SHMTP");

                    b.HasIndex(new[] { "SupplierPartyId" }, "ORDER_ITSG_SPRTY");

                    b.HasIndex(new[] { "TelecomContactMechId" }, "ORDER_ITSG_TCNB");

                    b.HasIndex(new[] { "TelecomContactMechId" }, "ORDER_ITSG_TCNT");

                    b.HasIndex(new[] { "VendorPartyId" }, "ORDER_ITSG_VPRTY");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_SHP_GRP_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_SHP_GRP_TS");

                    b.ToTable("ORDER_ITEM_SHIP_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemShipGroupAssoc", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<decimal?>("CancelQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("CANCEL_QUANTITY");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.HasKey("OrderId", "OrderItemSeqId", "ShipGroupSeqId");

                    b.HasIndex(new[] { "OrderId", "ShipGroupSeqId" }, "ORDER_ISGA_OISG");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_ISGA_ORDH");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ORDER_ISGA_ORDI");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_SHP_GRP_ASC_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_SHP_GRP_ASC_TS");

                    b.ToTable("ORDER_ITEM_SHIP_GROUP_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemShipGrpInvRes", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<DateTime?>("CreatedDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATETIME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("CurrentPromisedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CURRENT_PROMISED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("PickStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PICK_START_DATE");

                    b.Property<int?>("Priority")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("PRIORITY")
                        .IsFixedLength();

                    b.Property<DateTime?>("PromisedDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("PROMISED_DATETIME");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<decimal?>("QuantityNotAvailable")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_NOT_AVAILABLE");

                    b.Property<string>("ReserveOrderEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RESERVE_ORDER_ENUM_ID");

                    b.Property<DateTime?>("ReservedDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("RESERVED_DATETIME");

                    b.Property<int?>("SequenceId")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_ID");

                    b.HasKey("OrderId", "ShipGroupSeqId", "OrderItemSeqId", "InventoryItemId");

                    b.HasIndex(new[] { "InventoryItemId" }, "ORDER_ITIR_INVITM");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ORDER_ITIR_OITM");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_GRP_INV_RS_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_GRP_INV_RS_TS");

                    b.ToTable("ORDER_ITEM_SHIP_GRP_INV_RES", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemType", b =>
                {
                    b.Property<string>("OrderItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("OrderItemTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "ORDER_ITEM_TYPPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_ITM_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_ITM_TP_TXSTMP");

                    b.ToTable("ORDER_ITEM_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderItemTypeAttr", b =>
                {
                    b.Property<string>("OrderItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderItemTypeId", "AttrName");

                    b.HasIndex(new[] { "OrderItemTypeId" }, "ORDER_ITEM_TYPATR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_ITM_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_ITM_TP_ATR_TXS");

                    b.ToTable("ORDER_ITEM_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.OrderNotification", b =>
                {
                    b.Property<string>("OrderNotificationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_NOTIFICATION_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EmailType")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMAIL_TYPE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("NOTIFICATION_DATE");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.HasKey("OrderNotificationId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_NTFCTN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_NTFCTN_TXSTMP");

                    b.HasIndex(new[] { "EmailType" }, "ORD_NOTIFY_ENUM");

                    b.HasIndex(new[] { "OrderId" }, "ORD_NOTIFY_ORDHDR");

                    b.ToTable("ORDER_NOTIFICATION", (string)null);
                });

            modelBuilder.Entity("Domain.OrderPaymentPreference", b =>
                {
                    b.Property<string>("OrderPaymentPreferenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID");

                    b.Property<string>("BillingPostalCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("BILLING_POSTAL_CODE");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FinAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_ID");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ManualAuthCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("MANUAL_AUTH_CODE");

                    b.Property<string>("ManualRefNum")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("MANUAL_REF_NUM");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MAX_AMOUNT");

                    b.Property<string>("NeedsNsfRetry")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("NEEDS_NSF_RETRY")
                        .IsFixedLength();

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("OverflowFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("OVERFLOW_FLAG")
                        .IsFixedLength();

                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<string>("PaymentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                    b.Property<string>("PresentFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PRESENT_FLAG")
                        .IsFixedLength();

                    b.Property<int?>("ProcessAttempt")
                        .HasColumnType("int")
                        .HasColumnName("PROCESS_ATTEMPT");

                    b.Property<string>("ProductPricePurposeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_PURPOSE_ID");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SECURITY_CODE");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("SwipedFlag")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SWIPED_FLAG")
                        .IsFixedLength();

                    b.Property<string>("Track2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TRACK2");

                    b.HasKey("OrderPaymentPreferenceId");

                    b.HasIndex(new[] { "NeedsNsfRetry" }, "NSF_RETRY_CHECK");

                    b.HasIndex(new[] { "FinAccountId" }, "ORDER_PMPRF_FINACT");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_PMPRF_OHDR");

                    b.HasIndex(new[] { "PaymentMethodId" }, "ORDER_PMPRF_PMETH");

                    b.HasIndex(new[] { "PaymentMethodTypeId" }, "ORDER_PMPRF_PMTP");

                    b.HasIndex(new[] { "ProductPricePurposeId" }, "ORDER_PMPRF_PPRP");

                    b.HasIndex(new[] { "StatusId" }, "ORDER_PMPRF_STTS");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "ORDER_PMPRF_USRL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_PMT_PRFC_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_PMT_PRFC_TXSTP");

                    b.ToTable("ORDER_PAYMENT_PREFERENCE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderProductPromoCode", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("ProductPromoCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_CODE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "ProductPromoCodeId");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_PPCD_ORD");

                    b.HasIndex(new[] { "ProductPromoCodeId" }, "ORDER_PPCD_PPC");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_PRT_PRM_CD_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_PRT_PRM_CD_TXS");

                    b.ToTable("ORDER_PRODUCT_PROMO_CODE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderRequirementCommitment", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("RequirementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.HasKey("OrderId", "OrderItemSeqId", "RequirementId")
                        .HasName("PK_ORDER_REQUIREMENT_COMMITMEN");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "ORDREQ_CMT_OITM");

                    b.HasIndex(new[] { "OrderId" }, "ORDREQ_CMT_ORD");

                    b.HasIndex(new[] { "RequirementId" }, "ORDREQ_CMT_REQ");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_RQRT_CMMT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_RQRT_CMMT_TXSP");

                    b.ToTable("ORDER_REQUIREMENT_COMMITMENT", (string)null);
                });

            modelBuilder.Entity("Domain.OrderRole", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_ROLE_OHDR");

                    b.HasIndex(new[] { "PartyId" }, "ORDER_ROLE_PARTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "ORDER_ROLE_PROLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDER_ROLE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDER_ROLE_TXSTMP");

                    b.ToTable("ORDER_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderShipment", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.HasKey("OrderId", "OrderItemSeqId", "ShipGroupSeqId", "ShipmentId", "ShipmentItemSeqId");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_SHPMT_OHDR");

                    b.HasIndex(new[] { "ShipmentId" }, "ORDER_SHPMT_SHPMT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_SHPMNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_SHPMNT_TXSTMP");

                    b.ToTable("ORDER_SHIPMENT", (string)null);
                });

            modelBuilder.Entity("Domain.OrderStatus", b =>
                {
                    b.Property<string>("OrderStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_STATUS_ID");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CHANGE_REASON");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("OrderPaymentPreferenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID");

                    b.Property<DateTime?>("StatusDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATETIME");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("StatusUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("STATUS_USER_LOGIN");

                    b.HasKey("OrderStatusId");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_STTS_OHDR");

                    b.HasIndex(new[] { "StatusId" }, "ORDER_STTS_STTS");

                    b.HasIndex(new[] { "StatusUserLogin" }, "ORDER_STTS_USER");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_STTS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_STTS_TXSTMP");

                    b.ToTable("ORDER_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.OrderSummaryEntry", b =>
                {
                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("GrossSales")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("GROSS_SALES");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("ProductCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PRODUCT_COST");

                    b.Property<decimal?>("TotalQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("TOTAL_QUANTITY");

                    b.HasKey("EntryDate", "ProductId", "FacilityId");

                    b.HasIndex(new[] { "FacilityId" }, "ORDER_SMENT_FAC");

                    b.HasIndex(new[] { "ProductId" }, "ORDER_SMENT_PROD");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_SMR_ENR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_SMR_ENR_TXSTMP");

                    b.ToTable("ORDER_SUMMARY_ENTRY", (string)null);
                });

            modelBuilder.Entity("Domain.OrderTerm", b =>
                {
                    b.Property<string>("TermTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERM_TYPE_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("TermDays")
                        .HasColumnType("int")
                        .HasColumnName("TERM_DAYS");

                    b.Property<decimal?>("TermValue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TERM_VALUE");

                    b.Property<string>("TextValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TEXT_VALUE");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("TermTypeId", "OrderId", "OrderItemSeqId");

                    b.HasIndex(new[] { "OrderId" }, "ORDER_TERM_OHDR");

                    b.HasIndex(new[] { "TermTypeId" }, "ORDER_TERM_TTYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDER_TERM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDER_TERM_TXSTMP");

                    b.HasIndex(new[] { "UomId" }, "ORDER_TERM_UOM");

                    b.ToTable("ORDER_TERM", (string)null);
                });

            modelBuilder.Entity("Domain.OrderTermAttribute", b =>
                {
                    b.Property<string>("TermTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERM_TYPE_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TermTypeId", "OrderId", "OrderItemSeqId", "AttrName");

                    b.HasIndex(new[] { "TermTypeId", "OrderId", "OrderItemSeqId" }, "ORDER_TATTR_OTRM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORR_TRM_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORR_TRM_ATTT_TXSTP");

                    b.ToTable("ORDER_TERM_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderType", b =>
                {
                    b.Property<string>("OrderTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("OrderTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "ORDER_TYPE_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDER_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDER_TYPE_TXSTMP");

                    b.ToTable("ORDER_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.OrderTypeAttr", b =>
                {
                    b.Property<string>("OrderTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrderTypeId", "AttrName");

                    b.HasIndex(new[] { "OrderTypeId" }, "ORDER_TPAT_ORTYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ORDR_TP_ATR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ORDR_TP_ATR_TXSTMP");

                    b.ToTable("ORDER_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.OrderView", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AgreementId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BillingAccountId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CurrencyUomDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CurrencyUomId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FromPartyId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FromPartyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FromPartyNameDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderTypeDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderTypeId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentMethodTypeId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrderId");

                    b.ToTable((string)null);

                    b.ToView("OrderView", (string)null);
                });

            modelBuilder.Entity("Domain.OtherDataResource", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<byte[]>("DataResourceContent")
                        .HasColumnType("longblob")
                        .HasColumnName("DATA_RESOURCE_CONTENT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DataResourceId");

                    b.HasIndex(new[] { "DataResourceId" }, "DATA_REC_OTHER");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "OTHR_DT_RSC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "OTHR_DT_RSC_TXSTMP");

                    b.ToTable("OTHER_DATA_RESOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.Party", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DataSourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_ID");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXTERNAL_ID");

                    b.Property<string>("IsUnread")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_UNREAD")
                        .IsFixedLength();

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MainRole")
                        .HasColumnType("longtext")
                        .HasColumnName("MAIN_ROLE");

                    b.Property<string>("PartyTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_TYPE_ID");

                    b.Property<string>("PreferredCurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PREFERRED_CURRENCY_UOM_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("PartyId");

                    b.HasIndex(new[] { "ExternalId" }, "PARTYEXT_ID_IDX");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "PARTY_CUL");

                    b.HasIndex(new[] { "DataSourceId" }, "PARTY_DATSRC");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "PARTY_LMCUL");

                    b.HasIndex(new[] { "PreferredCurrencyUomId" }, "PARTY_PREF_CRNCY");

                    b.HasIndex(new[] { "PartyTypeId" }, "PARTY_PTY_TYP");

                    b.HasIndex(new[] { "StatusId" }, "PARTY_STATUSITM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PARTY_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PARTY_TXSTMP");

                    b.ToTable("PARTY", (string)null);
                });

            modelBuilder.Entity("Domain.PartyAcctgPreference", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("BaseCurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BASE_CURRENCY_UOM_ID");

                    b.Property<string>("CogsMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COGS_METHOD_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EnableAccounting")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ENABLE_ACCOUNTING")
                        .IsFixedLength();

                    b.Property<string>("ErrorGlJournalId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ERROR_GL_JOURNAL_ID");

                    b.Property<int?>("FiscalYearStartDay")
                        .HasColumnType("int")
                        .HasColumnName("FISCAL_YEAR_START_DAY");

                    b.Property<int?>("FiscalYearStartMonth")
                        .HasColumnType("int")
                        .HasColumnName("FISCAL_YEAR_START_MONTH");

                    b.Property<string>("InvoiceIdPrefix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("INVOICE_ID_PREFIX");

                    b.Property<string>("InvoiceSeqCustMethId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_SEQ_CUST_METH_ID");

                    b.Property<string>("InvoiceSequenceEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_SEQUENCE_ENUM_ID");

                    b.Property<int?>("LastInvoiceNumber")
                        .HasColumnType("int")
                        .HasColumnName("LAST_INVOICE_NUMBER");

                    b.Property<DateTime?>("LastInvoiceRestartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_INVOICE_RESTART_DATE");

                    b.Property<int?>("LastOrderNumber")
                        .HasColumnType("int")
                        .HasColumnName("LAST_ORDER_NUMBER");

                    b.Property<int?>("LastQuoteNumber")
                        .HasColumnType("int")
                        .HasColumnName("LAST_QUOTE_NUMBER");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderIdPrefix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ORDER_ID_PREFIX");

                    b.Property<string>("OrderSeqCustMethId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_SEQ_CUST_METH_ID");

                    b.Property<string>("OrderSequenceEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_SEQUENCE_ENUM_ID");

                    b.Property<string>("QuoteIdPrefix")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("QUOTE_ID_PREFIX");

                    b.Property<string>("QuoteSeqCustMethId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_SEQ_CUST_METH_ID");

                    b.Property<string>("QuoteSequenceEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_SEQUENCE_ENUM_ID");

                    b.Property<string>("RefundPaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REFUND_PAYMENT_METHOD_ID");

                    b.Property<string>("TaxFormId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_FORM_ID");

                    b.Property<string>("UseInvoiceIdForReturns")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("USE_INVOICE_ID_FOR_RETURNS")
                        .IsFixedLength();

                    b.HasKey("PartyId");

                    b.HasIndex(new[] { "BaseCurrencyUomId" }, "ACCTGPREF_CURNCY");

                    b.HasIndex(new[] { "CogsMethodId" }, "ACTGPREF_COGS");

                    b.HasIndex(new[] { "ErrorGlJournalId" }, "ACTGPREF_GLJRNL");

                    b.HasIndex(new[] { "InvoiceSeqCustMethId" }, "ACTGPREF_INVCM");

                    b.HasIndex(new[] { "InvoiceSequenceEnumId" }, "ACTGPREF_INVSQ");

                    b.HasIndex(new[] { "OrderSeqCustMethId" }, "ACTGPREF_ODRCM");

                    b.HasIndex(new[] { "OrderSequenceEnumId" }, "ACTGPREF_ODRSQ");

                    b.HasIndex(new[] { "RefundPaymentMethodId" }, "ACTGPREF_PAYMTH");

                    b.HasIndex(new[] { "QuoteSeqCustMethId" }, "ACTGPREF_QTECM");

                    b.HasIndex(new[] { "QuoteSequenceEnumId" }, "ACTGPREF_QTESQ");

                    b.HasIndex(new[] { "TaxFormId" }, "ACTGPREF_TAXFORM");

                    b.HasIndex(new[] { "PartyId" }, "ACTG_PREF_PTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_ACG_PRFC_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_ACG_PRFC_TXSTP");

                    b.ToTable("PARTY_ACCTG_PREFERENCE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyAttribute", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PartyId", "AttrName");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_ATTRBT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_ATTRBT_TXSTMP");

                    b.ToTable("PARTY_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyBenefit", b =>
                {
                    b.Property<string>("RoleTypeIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_FROM");

                    b.Property<string>("RoleTypeIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_TO");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<string>("BenefitTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BENEFIT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<double?>("ActualEmployerPaidPercent")
                        .HasColumnType("double")
                        .HasColumnName("ACTUAL_EMPLOYER_PAID_PERCENT");

                    b.Property<int?>("AvailableTime")
                        .HasColumnType("int")
                        .HasColumnName("AVAILABLE_TIME");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("COST");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PeriodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERIOD_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("RoleTypeIdFrom", "RoleTypeIdTo", "PartyIdFrom", "PartyIdTo", "BenefitTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_BNFT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_BNFT_TXSTMP");

                    b.HasIndex(new[] { "BenefitTypeId" }, "PTY_BNFT_BNFTTP");

                    b.HasIndex(new[] { "PartyIdFrom", "RoleTypeIdFrom" }, "PTY_BNFT_FPTRL");

                    b.HasIndex(new[] { "PartyIdFrom" }, "PTY_BNFT_FPTY");

                    b.HasIndex(new[] { "PartyIdTo", "RoleTypeIdTo" }, "PTY_BNFT_TPTRL");

                    b.HasIndex(new[] { "PartyIdTo" }, "PTY_BNFT_TPTY");

                    b.ToTable("PARTY_BENEFIT", (string)null);
                });

            modelBuilder.Entity("Domain.PartyCarrierAccount", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("CarrierPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CARRIER_PARTY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOUNT_NUMBER");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "CarrierPartyId", "FromDate");

                    b.HasIndex(new[] { "CarrierPartyId" }, "PARTY_CRRACT_CPT");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_CRRACT_PTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CRR_ACCT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CRR_ACCT_TXSTP");

                    b.ToTable("PARTY_CARRIER_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.PartyClassification", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PartyClassificationGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "PartyClassificationGroupId", "FromDate");

                    b.HasIndex(new[] { "PartyClassificationGroupId" }, "PARTY_CLASS_GRP");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_CLASS_PARTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CLSSFCN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CLSSFCN_TXSTMP");

                    b.ToTable("PARTY_CLASSIFICATION", (string)null);
                });

            modelBuilder.Entity("Domain.PartyClassificationGroup", b =>
                {
                    b.Property<string>("PartyClassificationGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_GROUP_ID");

                    b.Property<string>("PartyClassificationTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_CLASSIFICATION_TYPE_ID");

                    b.HasKey("PartyClassificationGroupId");

                    b.HasIndex(new[] { "ParentGroupId" }, "PARTY_CLASS_GRPPAR");

                    b.HasIndex(new[] { "PartyClassificationTypeId" }, "PARTY_CLSGRP_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CLSSN_GRP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CLSSN_GRP_TXSP");

                    b.ToTable("PARTY_CLASSIFICATION_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.PartyClassificationType", b =>
                {
                    b.Property<string>("PartyClassificationTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_CLASSIFICATION_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PartyClassificationTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PARTY_CLASS_TYPPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CLSSFN_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CLSSFN_TP_TXSP");

                    b.ToTable("PARTY_CLASSIFICATION_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyContactMech", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("AllowSolicitation")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALLOW_SOLICITATION")
                        .IsFixedLength();

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Extension")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EXTENSION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("MonthsWithContactMech")
                        .HasColumnType("int")
                        .HasColumnName("MONTHS_WITH_CONTACT_MECH");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<string>("Verified")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("VERIFIED")
                        .IsFixedLength();

                    b.Property<int?>("YearsWithContactMech")
                        .HasColumnType("int")
                        .HasColumnName("YEARS_WITH_CONTACT_MECH");

                    b.HasKey("PartyId", "ContactMechId", "FromDate");

                    b.HasIndex(new[] { "ContactMechId" }, "PARTY_CMECH_CMECH");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_CMECH_PARTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PARTY_CMECH_PROLE");

                    b.HasIndex(new[] { "RoleTypeId" }, "PARTY_CMECH_ROLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CNTT_MCH_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CNTT_MCH_TXSTP");

                    b.ToTable("PARTY_CONTACT_MECH", (string)null);
                });

            modelBuilder.Entity("Domain.PartyContactMechPurpose", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("ContactMechPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "ContactMechId", "ContactMechPurposeTypeId", "FromDate");

                    b.HasIndex(new[] { "ContactMechId" }, "PARTY_CMPRP_CMECH");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_CMPRP_PARTY");

                    b.HasIndex(new[] { "ContactMechPurposeTypeId" }, "PARTY_CMPRP_TYPE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CNT_MCH_PRS_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CNT_MCH_PRS_TS");

                    b.ToTable("PARTY_CONTACT_MECH_PURPOSE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyContent", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("PartyContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "ContentId", "PartyContentTypeId", "FromDate");

                    b.HasIndex(new[] { "ContentId" }, "PARTY_CNT_CNT");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_CNT_PARTY");

                    b.HasIndex(new[] { "PartyContentTypeId" }, "PARTY_CNT_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CNTNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CNTNT_TXSTMP");

                    b.ToTable("PARTY_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.PartyContentType", b =>
                {
                    b.Property<string>("PartyContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PartyContentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PARTYCNT_TP_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CNTT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CNTT_TP_TXSTMP");

                    b.ToTable("PARTY_CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyDataSource", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("DataSourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IsCreate")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_CREATE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.HasKey("PartyId", "DataSourceId", "FromDate");

                    b.HasIndex(new[] { "DataSourceId" }, "PARTY_DATSRC_DSC");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_DATSRC_PTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_DT_SRC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_DT_SRC_TXSTMP");

                    b.ToTable("PARTY_DATA_SOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyFixedAssetAssignment", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("AllocatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ALLOCATED_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "RoleTypeId", "FixedAssetId", "FromDate")
                        .HasName("PK_PARTY_FIXED_ASSET_ASSIGNMEN");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_FXD_AST_AST_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_FXD_AST_AST_TS");

                    b.HasIndex(new[] { "FixedAssetId" }, "PTY_FASTAS_FA");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PTY_FASTAS_PTRL");

                    b.HasIndex(new[] { "StatusId" }, "PTY_FASTAS_SI");

                    b.ToTable("PARTY_FIXED_ASSET_ASSIGNMENT", (string)null);
                });

            modelBuilder.Entity("Domain.PartyGeoPoint", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("GeoPointId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_POINT_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "GeoPointId", "FromDate");

                    b.HasIndex(new[] { "GeoPointId" }, "PARTYGEOPT_GEOPT");

                    b.HasIndex(new[] { "PartyId" }, "PARTYGEOPT_PARTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_G_PNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_G_PNT_TXSTMP");

                    b.ToTable("PARTY_GEO_POINT", (string)null);
                });

            modelBuilder.Entity("Domain.PartyGlAccount", b =>
                {
                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("GlAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("OrganizationPartyId", "PartyId", "RoleTypeId", "GlAccountTypeId");

                    b.HasIndex(new[] { "GlAccountId" }, "PRTYGLACCT_GLACCT");

                    b.HasIndex(new[] { "GlAccountTypeId" }, "PRTYGLACCT_GLAT");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "PRTYGLACCT_ORGPRTY");

                    b.HasIndex(new[] { "PartyId" }, "PRTYGLACCT_PRTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PRTYGLACCT_PTRL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_GL_ACCT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_GL_ACCT_TXSTMP");

                    b.ToTable("PARTY_GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.PartyGroup", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<decimal?>("AnnualRevenue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ANNUAL_REVENUE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("GROUP_NAME");

                    b.Property<string>("GroupNameLocal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("GROUP_NAME_LOCAL");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LogoImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("LOGO_IMAGE_URL");

                    b.Property<int?>("NumEmployees")
                        .HasColumnType("int")
                        .HasColumnName("NUM_EMPLOYEES");

                    b.Property<string>("OfficeSiteName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OFFICE_SITE_NAME");

                    b.Property<string>("TickerSymbol")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TICKER_SYMBOL");

                    b.HasKey("PartyId");

                    b.HasIndex(new[] { "GroupName" }, "GROUP_NAME_IDX");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PARTY_GROUP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PARTY_GROUP_TXSTMP");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_GRP_PARTY");

                    b.ToTable("PARTY_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.PartyIcsAvsOverride", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("AvsDeclineString")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AVS_DECLINE_STRING");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PartyId");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_ICSAVS_PARTY");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_ICS_AVS_OVD_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_ICS_AVS_OVD_TS");

                    b.ToTable("PARTY_ICS_AVS_OVERRIDE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyIdentification", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PartyIdentificationTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_IDENTIFICATION_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IdValue")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ID_VALUE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PartyId", "PartyIdentificationTypeId");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_ID_PRODUCT");

                    b.HasIndex(new[] { "PartyIdentificationTypeId" }, "PARTY_ID_TYPE");

                    b.HasIndex(new[] { "IdValue" }, "PARTY_ID_VALIDX");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_IDNTFCN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_IDNTFCN_TXSTMP");

                    b.ToTable("PARTY_IDENTIFICATION", (string)null);
                });

            modelBuilder.Entity("Domain.PartyIdentificationType", b =>
                {
                    b.Property<string>("PartyIdentificationTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_IDENTIFICATION_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PartyIdentificationTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PARTY_ID_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_IDNTFN_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_IDNTFN_TP_TXSP");

                    b.ToTable("PARTY_IDENTIFICATION_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyInvitation", b =>
                {
                    b.Property<string>("PartyInvitationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_INVITATION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EMAIL_ADDRESS");

                    b.Property<DateTime?>("LastInviteDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_INVITE_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("ToName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TO_NAME");

                    b.HasKey("PartyInvitationId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_INVTTN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_INVTTN_TXSTMP");

                    b.HasIndex(new[] { "PartyIdFrom" }, "PTYINV_PTY");

                    b.HasIndex(new[] { "StatusId" }, "PTYINV_STTS");

                    b.ToTable("PARTY_INVITATION", (string)null);
                });

            modelBuilder.Entity("Domain.PartyInvitationGroupAssoc", b =>
                {
                    b.Property<string>("PartyInvitationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_INVITATION_ID");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PartyInvitationId", "PartyIdTo")
                        .HasName("PK_PARTY_INVITATION_GROUP_ASSO");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_INN_GRP_ASC_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_INN_GRP_ASC_TS");

                    b.HasIndex(new[] { "PartyIdTo" }, "PTYINVGA_PTYGRP");

                    b.HasIndex(new[] { "PartyInvitationId" }, "PTYINVGA_PTYINV");

                    b.HasIndex(new[] { "PartyIdTo" }, "PTYINVGA_PTYTO");

                    b.ToTable("PARTY_INVITATION_GROUP_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.PartyInvitationRoleAssoc", b =>
                {
                    b.Property<string>("PartyInvitationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_INVITATION_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PartyInvitationId", "RoleTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_INN_RL_ASC_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_INN_RL_ASC_TXS");

                    b.HasIndex(new[] { "PartyInvitationId" }, "PTYINVROLE_PTYINV");

                    b.HasIndex(new[] { "RoleTypeId" }, "PTYINVROLE_ROLET");

                    b.ToTable("PARTY_INVITATION_ROLE_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.PartyNameHistory", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("GROUP_NAME");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LAST_NAME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MIDDLE_NAME");

                    b.Property<string>("PersonalTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PERSONAL_TITLE");

                    b.Property<string>("Suffix")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SUFFIX");

                    b.HasKey("PartyId", "ChangeDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_NM_HSTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_NM_HSTR_TXSTMP");

                    b.HasIndex(new[] { "PartyId" }, "PTY_NMHIS_PARTY");

                    b.ToTable("PARTY_NAME_HISTORY", (string)null);
                });

            modelBuilder.Entity("Domain.PartyNeed", b =>
                {
                    b.Property<string>("PartyNeedId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_NEED_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DatetimeRecorded")
                        .HasColumnType("datetime")
                        .HasColumnName("DATETIME_RECORDED");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("NeedTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NEED_TYPE_ID");

                    b.Property<string>("PartyTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_TYPE_ID");

                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.HasKey("PartyNeedId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "CommunicationEventId" }, "PARTY_NEED_CMEV");

                    b.HasIndex(new[] { "NeedTypeId" }, "PARTY_NEED_NDTP");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PARTY_NEED_PCAT");

                    b.HasIndex(new[] { "ProductId" }, "PARTY_NEED_PROD");

                    b.HasIndex(new[] { "PartyTypeId" }, "PARTY_NEED_PTTP");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_NEED_PTY");

                    b.HasIndex(new[] { "RoleTypeId" }, "PARTY_NEED_RTYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PARTY_NEED_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PARTY_NEED_TXSTMP");

                    b.ToTable("PARTY_NEED", (string)null);
                });

            modelBuilder.Entity("Domain.PartyNote", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PartyId", "NoteId");

                    b.HasIndex(new[] { "NoteId" }, "PARTY_NOTE_NOTE");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_NOTE_PARTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PARTY_NOTE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PARTY_NOTE_TXSTMP");

                    b.ToTable("PARTY_NOTE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyPrefDocTypeTpl", b =>
                {
                    b.Property<string>("PartyPrefDocTypeTplId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_PREF_DOC_TYPE_TPL_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomScreenId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_SCREEN_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("InvoiceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_TYPE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("QuoteTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyPrefDocTypeTplId");

                    b.HasIndex(new[] { "InvoiceTypeId" }, "PAPDTT_TO_INVT");

                    b.HasIndex(new[] { "OrderTypeId" }, "PAPDTT_TO_ORDT");

                    b.HasIndex(new[] { "PartyId" }, "PAPDTT_TO_PAP");

                    b.HasIndex(new[] { "PartyId" }, "PAPDTT_TO_PTY");

                    b.HasIndex(new[] { "QuoteTypeId" }, "PAPDTT_TO_QUOT");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_DC_TP_TPL_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_DC_TP_TPL_TS");

                    b.ToTable("PARTY_PREF_DOC_TYPE_TPL", (string)null);
                });

            modelBuilder.Entity("Domain.PartyProfileDefault", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DefaultBillAddr")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_BILL_ADDR");

                    b.Property<string>("DefaultPayMeth")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_PAY_METH");

                    b.Property<string>("DefaultShipAddr")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_SHIP_ADDR");

                    b.Property<string>("DefaultShipMeth")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_SHIP_METH");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PartyId", "ProductStoreId");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_PROF_PARTY");

                    b.HasIndex(new[] { "ProductStoreId" }, "PARTY_PROF_PSTORE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_PRL_DFT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_PRL_DFT_TXSTMP");

                    b.ToTable("PARTY_PROFILE_DEFAULT", (string)null);
                });

            modelBuilder.Entity("Domain.PartyQual", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PartyQualTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_QUAL_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("QualificationDesc")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("QUALIFICATION_DESC");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<string>("Title")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TITLE");

                    b.Property<string>("VerifStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VERIF_STATUS_ID");

                    b.HasKey("PartyId", "PartyQualTypeId", "FromDate");

                    b.HasIndex(new[] { "PartyQualTypeId" }, "PARTY_QUAL_PQTYP");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_QUAL_PRTY");

                    b.HasIndex(new[] { "StatusId" }, "PARTY_QUAL_STATUS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PARTY_QUAL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PARTY_QUAL_TXSTMP");

                    b.HasIndex(new[] { "VerifStatusId" }, "PARTY_QUAL_VERIF");

                    b.ToTable("PARTY_QUAL", (string)null);
                });

            modelBuilder.Entity("Domain.PartyQualType", b =>
                {
                    b.Property<string>("PartyQualTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_QUAL_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PartyQualTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PARTY_QUAL_TPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_QL_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_QL_TP_TXSTMP");

                    b.ToTable("PARTY_QUAL_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyRateNew", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RateTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RATE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DefaultRate")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("DEFAULT_RATE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<double?>("PercentageUsed")
                        .HasColumnType("double")
                        .HasColumnName("PERCENTAGE_USED");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "RateTypeId", "FromDate");

                    b.HasIndex(new[] { "PartyId" }, "PRTY_RATE_PRTY");

                    b.HasIndex(new[] { "RateTypeId" }, "PRTY_RATE_RTTP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_RT_NW_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_RT_NW_TXSTMP");

                    b.ToTable("PARTY_RATE_NEW", (string)null);
                });

            modelBuilder.Entity("Domain.PartyRelationship", b =>
                {
                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<string>("RoleTypeIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_FROM");

                    b.Property<string>("RoleTypeIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_TO");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyRelationshipTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_RELATIONSHIP_TYPE_ID");

                    b.Property<string>("PermissionsEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERMISSIONS_ENUM_ID");

                    b.Property<string>("PositionTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("POSITION_TITLE");

                    b.Property<string>("PriorityTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIORITY_TYPE_ID");

                    b.Property<string>("RelationshipName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RELATIONSHIP_NAME");

                    b.Property<string>("SecurityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SECURITY_GROUP_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyIdFrom", "PartyIdTo", "RoleTypeIdFrom", "RoleTypeIdTo", "FromDate");

                    b.HasIndex(new[] { "PartyIdFrom", "RoleTypeIdFrom" }, "PARTY_REL_FPROLE");

                    b.HasIndex(new[] { "PriorityTypeId" }, "PARTY_REL_PRTYP");

                    b.HasIndex(new[] { "SecurityGroupId" }, "PARTY_REL_SECGRP");

                    b.HasIndex(new[] { "StatusId" }, "PARTY_REL_STTS");

                    b.HasIndex(new[] { "PartyIdTo", "RoleTypeIdTo" }, "PARTY_REL_TPROLE");

                    b.HasIndex(new[] { "PartyRelationshipTypeId" }, "PARTY_REL_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_RLTNSHP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_RLTNSHP_TXSTMP");

                    b.ToTable("PARTY_RELATIONSHIP", (string)null);
                });

            modelBuilder.Entity("Domain.PartyRelationshipType", b =>
                {
                    b.Property<string>("PartyRelationshipTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_RELATIONSHIP_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.Property<string>("PartyRelationshipName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PARTY_RELATIONSHIP_NAME");

                    b.Property<string>("RoleTypeIdValidFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_VALID_FROM");

                    b.Property<string>("RoleTypeIdValidTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_VALID_TO");

                    b.HasKey("PartyRelationshipTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PARTY_RELTYP_PAR");

                    b.HasIndex(new[] { "RoleTypeIdValidFrom" }, "PARTY_RELTYP_VFRT");

                    b.HasIndex(new[] { "RoleTypeIdValidTo" }, "PARTY_RELTYP_VTRT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_RLTNP_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_RLTNP_TP_TXSTP");

                    b.ToTable("PARTY_RELATIONSHIP_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyResume", b =>
                {
                    b.Property<string>("ResumeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RESUME_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime?>("ResumeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RESUME_DATE");

                    b.Property<string>("ResumeText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RESUME_TEXT");

                    b.HasKey("ResumeId");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_RSME_PRTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_RSM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_RSM_TXSTMP");

                    b.ToTable("PARTY_RESUME", (string)null);
                });

            modelBuilder.Entity("Domain.PartyRole", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_RLE_PARTY");

                    b.HasIndex(new[] { "RoleTypeId" }, "PARTY_RLE_ROLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PARTY_ROLE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PARTY_ROLE_TXSTMP");

                    b.ToTable("PARTY_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.PartySkill", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("SkillTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SKILL_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("RATING");

                    b.Property<int?>("SkillLevel")
                        .HasColumnType("int")
                        .HasColumnName("SKILL_LEVEL");

                    b.Property<DateTime?>("StartedUsingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STARTED_USING_DATE");

                    b.Property<int?>("YearsExperience")
                        .HasColumnType("int")
                        .HasColumnName("YEARS_EXPERIENCE");

                    b.HasKey("PartyId", "SkillTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PARTY_SKILL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PARTY_SKILL_TXSTMP");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_SKLL_PRTY");

                    b.HasIndex(new[] { "SkillTypeId" }, "PARTY_SKLL_SKTP");

                    b.ToTable("PARTY_SKILL", (string)null);
                });

            modelBuilder.Entity("Domain.PartyStatus", b =>
                {
                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("StatusId", "PartyId", "StatusDate");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_STS_PARTY");

                    b.HasIndex(new[] { "StatusId" }, "PARTY_STS_STSITM");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "PARTY_STTS_USRLGN");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STTS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STTS_TXSTMP");

                    b.ToTable("PARTY_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.PartyTaxAuthInfo", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IsExempt")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_EXEMPT")
                        .IsFixedLength();

                    b.Property<string>("IsNexus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_NEXUS")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyTaxId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PARTY_TAX_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "TaxAuthGeoId", "TaxAuthPartyId", "FromDate");

                    b.HasIndex(new[] { "PartyId" }, "PARTY_TXAI_PTY");

                    b.HasIndex(new[] { "TaxAuthGeoId", "TaxAuthPartyId" }, "PARTY_TXAI_TXA");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_TX_ATH_INF_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_TX_ATH_INF_TXS");

                    b.ToTable("PARTY_TAX_AUTH_INFO", (string)null);
                });

            modelBuilder.Entity("Domain.PartyType", b =>
                {
                    b.Property<string>("PartyTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PartyTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PARTY_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PARTY_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PARTY_TYPE_TXSTMP");

                    b.ToTable("PARTY_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PartyTypeAttr", b =>
                {
                    b.Property<string>("PartyTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PartyTypeId", "AttrName");

                    b.HasIndex(new[] { "PartyTypeId" }, "PARTY_TYP_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_TP_ATTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_TP_ATTR_TXSTMP");

                    b.ToTable("PARTY_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.PartyView", b =>
                {
                    b.Property<string>("FromPartyId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FromPartyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FromPartyPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FromPartyId");

                    b.ToTable((string)null);

                    b.ToView("PartyView", (string)null);
                });

            modelBuilder.Entity("Domain.PayGrade", b =>
                {
                    b.Property<string>("PayGradeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAY_GRADE_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PayGradeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PAY_GRADE_NAME");

                    b.HasKey("PayGradeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PAY_GRADE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PAY_GRADE_TXSTMP");

                    b.ToTable("PAY_GRADE", (string)null);
                });

            modelBuilder.Entity("Domain.PayHistory", b =>
                {
                    b.Property<string>("RoleTypeIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_FROM");

                    b.Property<string>("RoleTypeIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_TO");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<DateTime>("EmplFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EMPL_FROM_DATE");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PayGradeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAY_GRADE_ID");

                    b.Property<string>("PeriodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERIOD_TYPE_ID");

                    b.Property<string>("SalaryStepSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALARY_STEP_SEQ_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("RoleTypeIdFrom", "RoleTypeIdTo", "PartyIdFrom", "PartyIdTo", "EmplFromDate", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PAY_HISTORY_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PAY_HISTORY_TXSTMP");

                    b.HasIndex(new[] { "RoleTypeIdFrom", "RoleTypeIdTo", "PartyIdFrom", "PartyIdTo", "EmplFromDate" }, "PAY_HIST_EMPLMNT");

                    b.HasIndex(new[] { "PeriodTypeId" }, "PAY_HIST_PDTP");

                    b.HasIndex(new[] { "PayGradeId" }, "PAY_HIST_PGRD");

                    b.ToTable("PAY_HISTORY", (string)null);
                });

            modelBuilder.Entity("Domain.PayPalPaymentMethod", b =>
                {
                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<string>("AvsAddr")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AVS_ADDR")
                        .IsFixedLength();

                    b.Property<string>("AvsZip")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AVS_ZIP")
                        .IsFixedLength();

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CORRELATION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ExpressCheckoutToken")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("EXPRESS_CHECKOUT_TOKEN");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PayerId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYER_ID");

                    b.Property<string>("PayerStatus")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PAYER_STATUS");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TRANSACTION_ID");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex(new[] { "ContactMechId" }, "PAYPAL_CMECH");

                    b.HasIndex(new[] { "ContactMechId" }, "PAYPAL_PADDR");

                    b.HasIndex(new[] { "PaymentMethodId" }, "PAYPAL_PMNTMETH");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "P_PL_PMT_MTD_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "P_PL_PMT_MTD_TXSTP");

                    b.ToTable("PAY_PAL_PAYMENT_METHOD", (string)null);
                });

            modelBuilder.Entity("Domain.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<decimal?>("ActualCurrencyAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ACTUAL_CURRENCY_AMOUNT");

                    b.Property<string>("ActualCurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACTUAL_CURRENCY_UOM_ID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EFFECTIVE_DATE");

                    b.Property<string>("FinAccountTransId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TRANS_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OverrideGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<string>("PaymentGatewayResponseId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_RESPONSE_ID");

                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<string>("PaymentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                    b.Property<string>("PaymentPreferenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_PREFERENCE_ID");

                    b.Property<string>("PaymentRefNum")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PAYMENT_REF_NUM");

                    b.Property<string>("PaymentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_TYPE_ID");

                    b.Property<string>("RoleTypeIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_TO");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("PaymentId");

                    b.HasIndex(new[] { "ActualCurrencyUomId" }, "PAYMENT_ACUOM");

                    b.HasIndex(new[] { "CurrencyUomId" }, "PAYMENT_CUOM");

                    b.HasIndex(new[] { "FinAccountTransId" }, "PAYMENT_FACTX");

                    b.HasIndex(new[] { "PartyIdFrom" }, "PAYMENT_FPTY");

                    b.HasIndex(new[] { "PaymentPreferenceId" }, "PAYMENT_ORDPMPRF");

                    b.HasIndex(new[] { "OverrideGlAccountId" }, "PAYMENT_ORGLA");

                    b.HasIndex(new[] { "PaymentGatewayResponseId" }, "PAYMENT_PAYGATR");

                    b.HasIndex(new[] { "PaymentMethodId" }, "PAYMENT_PMETH");

                    b.HasIndex(new[] { "PaymentMethodTypeId" }, "PAYMENT_PMETH_TP");

                    b.HasIndex(new[] { "PaymentTypeId" }, "PAYMENT_PMTYP");

                    b.HasIndex(new[] { "StatusId" }, "PAYMENT_STTSITM");

                    b.HasIndex(new[] { "PartyIdTo" }, "PAYMENT_TPTY");

                    b.HasIndex(new[] { "RoleTypeIdTo" }, "PAYMENT_TRTP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PAYMENT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PAYMENT_TXSTMP");

                    b.ToTable("PAYMENT", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentApplication", b =>
                {
                    b.Property<string>("PaymentApplicationId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_APPLICATION_ID");

                    b.Property<decimal?>("AmountApplied")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT_APPLIED");

                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_ACCOUNT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OverrideGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("ToPaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TO_PAYMENT_ID");

                    b.HasKey("PaymentApplicationId");

                    b.HasIndex(new[] { "BillingAccountId" }, "PAYMENT_APP_BACT");

                    b.HasIndex(new[] { "TaxAuthGeoId" }, "PAYMENT_APP_GEO");

                    b.HasIndex(new[] { "InvoiceId" }, "PAYMENT_APP_INV");

                    b.HasIndex(new[] { "OverrideGlAccountId" }, "PAYMENT_APP_ORGLA");

                    b.HasIndex(new[] { "PaymentId" }, "PAYMENT_APP_PMT");

                    b.HasIndex(new[] { "ToPaymentId" }, "PAYMENT_APP_TPMT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMNT_APPLCN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMNT_APPLCN_TXSTMP");

                    b.ToTable("PAYMENT_APPLICATION", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentAttribute", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PaymentId", "AttrName");

                    b.HasIndex(new[] { "PaymentId" }, "PAYMENT_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMNT_ATTRBT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMNT_ATTRBT_TXSTMP");

                    b.ToTable("PAYMENT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentBudgetAllocation", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("BudgetItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_SEQ_ID");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetId", "BudgetItemSeqId", "PaymentId");

                    b.HasIndex(new[] { "BudgetId" }, "PAYMENT_BA_BDGT");

                    b.HasIndex(new[] { "PaymentId" }, "PAYMENT_BA_PMT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_BDT_ALLN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_BDT_ALLN_TXSTP");

                    b.ToTable("PAYMENT_BUDGET_ALLOCATION", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentContent", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<string>("PaymentContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ContentId", "PaymentId", "PaymentContentTypeId", "FromDate");

                    b.HasIndex(new[] { "ContentId" }, "PAYMENT_CNT_CNT");

                    b.HasIndex(new[] { "PaymentId" }, "PAYMENT_CNT_PROD");

                    b.HasIndex(new[] { "PaymentContentTypeId" }, "PAYMENT_CNT_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMNT_CNTNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMNT_CNTNT_TXSTMP");

                    b.ToTable("PAYMENT_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentContentType", b =>
                {
                    b.Property<string>("PaymentContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PaymentContentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PAYCT_TYP_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_CNTT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_CNTT_TP_TXSTMP");

                    b.ToTable("PAYMENT_CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayAuthorizeNet", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("ApiVersion")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("API_VERSION");

                    b.Property<string>("CertificateAlias")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CERTIFICATE_ALIAS");

                    b.Property<string>("CpDeviceType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CP_DEVICE_TYPE");

                    b.Property<string>("CpMarketType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CP_MARKET_TYPE");

                    b.Property<string>("CpVersion")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CP_VERSION");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DelimitedData")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("DELIMITED_DATA");

                    b.Property<string>("DelimiterChar")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("DELIMITER_CHAR");

                    b.Property<int?>("DuplicateWindow")
                        .HasColumnType("int")
                        .HasColumnName("DUPLICATE_WINDOW");

                    b.Property<string>("EmailCustomer")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("EMAIL_CUSTOMER");

                    b.Property<string>("EmailMerchant")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("EMAIL_MERCHANT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("Method")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("METHOD");

                    b.Property<string>("Pwd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PWD");

                    b.Property<string>("RelayResponse")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("RELAY_RESPONSE");

                    b.Property<string>("TestMode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TEST_MODE");

                    b.Property<string>("TranKey")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TRAN_KEY");

                    b.Property<string>("TransDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TRANS_DESCRIPTION");

                    b.Property<string>("TransactionUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TRANSACTION_URL");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USER_ID");

                    b.HasKey("PaymentGatewayConfigId")
                        .HasName("PK_PAYMENT_GATEWAY_AUTHORIZE_N");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PGAN_PGC");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_ATZ_NT_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_ATZ_NT_TXS");

                    b.ToTable("PAYMENT_GATEWAY_AUTHORIZE_NET", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayClearCommerce", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("ClientId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CLIENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EffectiveAlias")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("EFFECTIVE_ALIAS");

                    b.Property<string>("EnableCVM")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ENABLE_C_V_M")
                        .IsFixedLength();

                    b.Property<string>("GroupId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("GROUP_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProcessMode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PROCESS_MODE")
                        .IsFixedLength();

                    b.Property<string>("Pwd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PWD");

                    b.Property<string>("ServerURL")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERVER_U_R_L");

                    b.Property<string>("SourceId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SOURCE_ID");

                    b.Property<string>("UserAlias")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("USER_ALIAS");

                    b.Property<string>("Username")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("USERNAME");

                    b.HasKey("PaymentGatewayConfigId")
                        .HasName("PK_PAYMENT_GATEWAY_CLEAR_COMME");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PGCC_PGC");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_CLR_CMC_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_CLR_CMC_TS");

                    b.ToTable("PAYMENT_GATEWAY_CLEAR_COMMERCE", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayConfig", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PaymentGatewayConfigTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_TYPE_ID");

                    b.HasKey("PaymentGatewayConfigId");

                    b.HasIndex(new[] { "PaymentGatewayConfigTypeId" }, "PGC_PGCT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_CNG_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_CNG_TXSTMP");

                    b.ToTable("PAYMENT_GATEWAY_CONFIG", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayConfigType", b =>
                {
                    b.Property<string>("PaymentGatewayConfigTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PaymentGatewayConfigTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PGCT_PAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_CNG_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_CNG_TP_TXS");

                    b.ToTable("PAYMENT_GATEWAY_CONFIG_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayCyberSource", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("ApiVersion")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("API_VERSION");

                    b.Property<string>("AutoBill")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("AUTO_BILL");

                    b.Property<string>("AvsDeclineCodes")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AVS_DECLINE_CODES");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DisableBillAvs")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("DISABLE_BILL_AVS")
                        .IsFixedLength();

                    b.Property<string>("EnableDav")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ENABLE_DAV")
                        .IsFixedLength();

                    b.Property<string>("FraudScore")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FRAUD_SCORE")
                        .IsFixedLength();

                    b.Property<string>("IgnoreAvs")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("IGNORE_AVS");

                    b.Property<string>("KeysDir")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("KEYS_DIR");

                    b.Property<string>("KeysFile")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("KEYS_FILE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LogDir")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LOG_DIR");

                    b.Property<string>("LogEnabled")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LOG_ENABLED");

                    b.Property<string>("LogFile")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LOG_FILE");

                    b.Property<int?>("LogSize")
                        .HasColumnType("int")
                        .HasColumnName("LOG_SIZE");

                    b.Property<string>("MerchantContact")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MERCHANT_CONTACT");

                    b.Property<string>("MerchantDescr")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MERCHANT_DESCR");

                    b.Property<string>("MerchantId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MERCHANT_ID");

                    b.Property<string>("Production")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PRODUCTION");

                    b.HasKey("PaymentGatewayConfigId")
                        .HasName("PK_PAYMENT_GATEWAY_CYBER_SOURC");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PGCS_PGC");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_CBR_SRC_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_CBR_SRC_TS");

                    b.ToTable("PAYMENT_GATEWAY_CYBER_SOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayEway", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<string>("EnableBeagle")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ENABLE_BEAGLE");

                    b.Property<string>("EnableCvn")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ENABLE_CVN");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RefundPwd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REFUND_PWD");

                    b.Property<string>("TestMode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TEST_MODE");

                    b.HasKey("PaymentGatewayConfigId");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PGEW_PGC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMNT_GTW_EW_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMNT_GTW_EW_TXSTMP");

                    b.ToTable("PAYMENT_GATEWAY_EWAY", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayOrbital", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("AuthorizationURI")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AUTHORIZATION_U_R_I");

                    b.Property<string>("ConnectionPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONNECTION_PASSWORD");

                    b.Property<int?>("ConnectionTimeoutSeconds")
                        .HasColumnType("int")
                        .HasColumnName("CONNECTION_TIMEOUT_SECONDS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EngineClass")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ENGINE_CLASS");

                    b.Property<string>("HostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HOST_NAME");

                    b.Property<string>("HostNameFailover")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HOST_NAME_FAILOVER");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MerchantId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MERCHANT_ID");

                    b.Property<int?>("Port")
                        .HasColumnType("int")
                        .HasColumnName("PORT");

                    b.Property<int?>("PortFailover")
                        .HasColumnType("int")
                        .HasColumnName("PORT_FAILOVER");

                    b.Property<int?>("ReadTimeoutSeconds")
                        .HasColumnType("int")
                        .HasColumnName("READ_TIMEOUT_SECONDS");

                    b.Property<string>("ResponseType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("RESPONSE_TYPE");

                    b.Property<string>("SdkVersion")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SDK_VERSION");

                    b.Property<string>("SslSocketFactory")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SSL_SOCKET_FACTORY");

                    b.Property<string>("Username")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("USERNAME");

                    b.HasKey("PaymentGatewayConfigId");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PGORB_PGC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_ORBL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_ORBL_TXSTP");

                    b.ToTable("PAYMENT_GATEWAY_ORBITAL", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayPayPal", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("ApiEnvironment")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("API_ENVIRONMENT");

                    b.Property<string>("ApiPassword")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("API_PASSWORD");

                    b.Property<string>("ApiSignature")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("API_SIGNATURE");

                    b.Property<string>("ApiUserName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("API_USER_NAME");

                    b.Property<string>("BusinessEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("BUSINESS_EMAIL");

                    b.Property<string>("CancelReturnUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CANCEL_RETURN_URL");

                    b.Property<string>("ConfirmTemplate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONFIRM_TEMPLATE");

                    b.Property<string>("ConfirmUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONFIRM_URL");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("NotifyUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NOTIFY_URL");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REDIRECT_URL");

                    b.Property<string>("RequireConfirmedShipping")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_CONFIRMED_SHIPPING")
                        .IsFixedLength();

                    b.Property<string>("ReturnUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RETURN_URL");

                    b.Property<string>("ShippingCallbackUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("SHIPPING_CALLBACK_URL");

                    b.HasKey("PaymentGatewayConfigId");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PGPP_PGC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_P_PL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_P_PL_TXSTP");

                    b.ToTable("PAYMENT_GATEWAY_PAY_PAL", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayPayflowPro", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("CancelReturnUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CANCEL_RETURN_URL");

                    b.Property<string>("CertsPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CERTS_PATH");

                    b.Property<string>("CheckAvs")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CHECK_AVS")
                        .IsFixedLength();

                    b.Property<string>("CheckCvv2")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CHECK_CVV2")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EnableTransmit")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ENABLE_TRANSMIT");

                    b.Property<string>("HostAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HOST_ADDRESS");

                    b.Property<int?>("HostPort")
                        .HasColumnType("int")
                        .HasColumnName("HOST_PORT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LogFileName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LOG_FILE_NAME");

                    b.Property<int?>("LoggingLevel")
                        .HasColumnType("int")
                        .HasColumnName("LOGGING_LEVEL");

                    b.Property<int?>("MaxLogFileSize")
                        .HasColumnType("int")
                        .HasColumnName("MAX_LOG_FILE_SIZE");

                    b.Property<string>("Partner")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PARTNER");

                    b.Property<string>("PreAuth")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PRE_AUTH")
                        .IsFixedLength();

                    b.Property<string>("ProxyAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PROXY_ADDRESS");

                    b.Property<string>("ProxyLogon")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PROXY_LOGON");

                    b.Property<string>("ProxyPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PROXY_PASSWORD");

                    b.Property<int?>("ProxyPort")
                        .HasColumnType("int")
                        .HasColumnName("PROXY_PORT");

                    b.Property<string>("Pwd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PWD");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REDIRECT_URL");

                    b.Property<string>("ReturnUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RETURN_URL");

                    b.Property<string>("StackTraceOn")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("STACK_TRACE_ON")
                        .IsFixedLength();

                    b.Property<int?>("Timeout")
                        .HasColumnType("int")
                        .HasColumnName("TIMEOUT");

                    b.Property<string>("UserId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("USER_ID");

                    b.Property<string>("Vendor")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("VENDOR");

                    b.HasKey("PaymentGatewayConfigId");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PGPF_PGC");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_PFW_PR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_PFW_PR_TXS");

                    b.ToTable("PAYMENT_GATEWAY_PAYFLOW_PRO", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayRespMsg", b =>
                {
                    b.Property<string>("PaymentGatewayRespMsgId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_RESP_MSG_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PaymentGatewayResponseId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_RESPONSE_ID");

                    b.Property<string>("PgrMessage")
                        .HasColumnType("text")
                        .HasColumnName("PGR_MESSAGE");

                    b.HasKey("PaymentGatewayRespMsgId");

                    b.HasIndex(new[] { "PaymentGatewayResponseId" }, "PAYGATRM_PAYGR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_RSP_MSG_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_RSP_MSG_TS");

                    b.ToTable("PAYMENT_GATEWAY_RESP_MSG", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayResponse", b =>
                {
                    b.Property<string>("PaymentGatewayResponseId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_RESPONSE_ID");

                    b.Property<string>("AltReference")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ALT_REFERENCE");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("GatewayAvsResult")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("GATEWAY_AVS_RESULT");

                    b.Property<string>("GatewayCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("GATEWAY_CODE");

                    b.Property<string>("GatewayCvResult")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("GATEWAY_CV_RESULT");

                    b.Property<string>("GatewayFlag")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("GATEWAY_FLAG");

                    b.Property<string>("GatewayMessage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("GATEWAY_MESSAGE");

                    b.Property<string>("GatewayScoreResult")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("GATEWAY_SCORE_RESULT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderPaymentPreferenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID");

                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<string>("PaymentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                    b.Property<string>("PaymentServiceTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_SERVICE_TYPE_ENUM_ID");

                    b.Property<string>("ReferenceNum")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("REFERENCE_NUM");

                    b.Property<string>("ResultBadCardNumber")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("RESULT_BAD_CARD_NUMBER")
                        .IsFixedLength();

                    b.Property<string>("ResultBadExpire")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("RESULT_BAD_EXPIRE")
                        .IsFixedLength();

                    b.Property<string>("ResultDeclined")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("RESULT_DECLINED")
                        .IsFixedLength();

                    b.Property<string>("ResultNsf")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("RESULT_NSF")
                        .IsFixedLength();

                    b.Property<string>("SubReference")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SUB_REFERENCE");

                    b.Property<string>("TransCodeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRANS_CODE_ENUM_ID");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("TRANSACTION_DATE");

                    b.HasKey("PaymentGatewayResponseId");

                    b.HasIndex(new[] { "CurrencyUomId" }, "PAYGATR_CUOM");

                    b.HasIndex(new[] { "OrderPaymentPreferenceId" }, "PAYGATR_ORDPMPRF");

                    b.HasIndex(new[] { "PaymentMethodId" }, "PAYGATR_PMETH");

                    b.HasIndex(new[] { "PaymentMethodTypeId" }, "PAYGATR_PMTP");

                    b.HasIndex(new[] { "PaymentServiceTypeEnumId" }, "PAYGATR_PSTENUM");

                    b.HasIndex(new[] { "TransCodeEnumId" }, "PAYGATR_TXCODE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_RSPS_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_RSPS_TXSTP");

                    b.ToTable("PAYMENT_GATEWAY_RESPONSE", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewaySagePay", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("AuthenticationTransType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("AUTHENTICATION_TRANS_TYPE");

                    b.Property<string>("AuthenticationUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AUTHENTICATION_URL");

                    b.Property<string>("AuthoriseTransType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("AUTHORISE_TRANS_TYPE");

                    b.Property<string>("AuthoriseUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AUTHORISE_URL");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductionHost")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PRODUCTION_HOST");

                    b.Property<string>("ProtocolVersion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PROTOCOL_VERSION");

                    b.Property<string>("RefundUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REFUND_URL");

                    b.Property<string>("ReleaseTransType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("RELEASE_TRANS_TYPE");

                    b.Property<string>("ReleaseUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RELEASE_URL");

                    b.Property<string>("SagePayMode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SAGE_PAY_MODE");

                    b.Property<string>("TestingHost")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TESTING_HOST");

                    b.Property<string>("Vendor")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("VENDOR");

                    b.Property<string>("VoidUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("VOID_URL");

                    b.HasKey("PaymentGatewayConfigId");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PGSP_PGC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_SG_P_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_SG_P_TXSTP");

                    b.ToTable("PAYMENT_GATEWAY_SAGE_PAY", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewaySecurePay", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EnableAmountRound")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ENABLE_AMOUNT_ROUND")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MerchantId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MERCHANT_ID");

                    b.Property<int?>("ProcessTimeout")
                        .HasColumnType("int")
                        .HasColumnName("PROCESS_TIMEOUT");

                    b.Property<string>("Pwd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PWD");

                    b.Property<string>("ServerURL")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERVER_U_R_L");

                    b.HasKey("PaymentGatewayConfigId");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PGSCP_PGC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_SCR_P_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_SCR_P_TXSP");

                    b.ToTable("PAYMENT_GATEWAY_SECURE_PAY", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGatewayWorldPay", b =>
                {
                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("AuthMode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTH_MODE")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FixContact")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("FIX_CONTACT")
                        .IsFixedLength();

                    b.Property<string>("HideContact")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HIDE_CONTACT")
                        .IsFixedLength();

                    b.Property<string>("HideCurrency")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HIDE_CURRENCY")
                        .IsFixedLength();

                    b.Property<string>("InstId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INST_ID");

                    b.Property<string>("LangId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LANG_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("NoLanguageMenu")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("NO_LANGUAGE_MENU")
                        .IsFixedLength();

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REDIRECT_URL");

                    b.Property<int?>("TestMode")
                        .HasColumnType("int")
                        .HasColumnName("TEST_MODE");

                    b.Property<string>("WithDelivery")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("WITH_DELIVERY")
                        .IsFixedLength();

                    b.HasKey("PaymentGatewayConfigId");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PGWP_PGC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GTW_WRD_P_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GTW_WRD_P_TXSP");

                    b.ToTable("PAYMENT_GATEWAY_WORLD_PAY", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGlAccountTypeMap", b =>
                {
                    b.Property<string>("PaymentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_TYPE_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_TYPE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PaymentTypeId", "OrganizationPartyId");

                    b.HasIndex(new[] { "GlAccountTypeId" }, "PMTGLACCT_GLACCT");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "PMTGLACCT_PARTY");

                    b.HasIndex(new[] { "PaymentTypeId" }, "PMTGLACCT_PMTTYPE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_ACT_TP_MP_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_ACT_TP_MP_TS");

                    b.ToTable("PAYMENT_GL_ACCOUNT_TYPE_MAP", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGroup", b =>
                {
                    b.Property<string>("PaymentGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PaymentGroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PAYMENT_GROUP_NAME");

                    b.Property<string>("PaymentGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GROUP_TYPE_ID");

                    b.HasKey("PaymentGroupId");

                    b.HasIndex(new[] { "PaymentGroupTypeId" }, "PAYMNTGP_PGTYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMNT_GRP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMNT_GRP_TXSTMP");

                    b.ToTable("PAYMENT_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGroupMember", b =>
                {
                    b.Property<string>("PaymentGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GROUP_ID");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PaymentGroupId", "PaymentId", "FromDate");

                    b.HasIndex(new[] { "PaymentId" }, "PAYGRPMMBR_PAYMNT");

                    b.HasIndex(new[] { "PaymentGroupId" }, "PAYGRPMMBR_PG");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_GRP_MMR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_GRP_MMR_TXSTMP");

                    b.ToTable("PAYMENT_GROUP_MEMBER", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentGroupType", b =>
                {
                    b.Property<string>("PaymentGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GROUP_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PaymentGroupTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PAYMNTGP_TYP_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMNT_GRP_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMNT_GRP_TP_TXSTMP");

                    b.ToTable("PAYMENT_GROUP_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentMethod", b =>
                {
                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("FinAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PaymentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex(new[] { "FinAccountId" }, "PAYMETH_FINACCT");

                    b.HasIndex(new[] { "GlAccountId" }, "PAYMETH_GLACCT");

                    b.HasIndex(new[] { "PartyId" }, "PAYMETH_PARTY");

                    b.HasIndex(new[] { "PaymentMethodTypeId" }, "PAYMETH_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMNT_MTHD_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMNT_MTHD_TXSTMP");

                    b.ToTable("PAYMENT_METHOD", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentMethodType", b =>
                {
                    b.Property<string>("PaymentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DefaultGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_GL_ACCOUNT_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PaymentMethodTypeId");

                    b.HasIndex(new[] { "DefaultGlAccountId" }, "PAYMENT_MTP_DGLAC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMNT_MTD_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMNT_MTD_TP_TXSTMP");

                    b.ToTable("PAYMENT_METHOD_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentMethodTypeGlAccount", b =>
                {
                    b.Property<string>("PaymentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PaymentMethodTypeId", "OrganizationPartyId")
                        .HasName("PK_PAYMENT_METHOD_TYPE_GL_ACCO");

                    b.HasIndex(new[] { "GlAccountId" }, "PAYMENT_MTGA_GLAC");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "PAYMENT_MTGA_OPTY");

                    b.HasIndex(new[] { "PaymentMethodTypeId" }, "PAYMENT_MTGA_PMT");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMT_TP_GL_ACT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMT_TP_GL_ACT_TS");

                    b.ToTable("PAYMENT_METHOD_TYPE_GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentType", b =>
                {
                    b.Property<string>("PaymentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PaymentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PAYMENT_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMNT_TP_TXSTMP");

                    b.ToTable("PAYMENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PaymentTypeAttr", b =>
                {
                    b.Property<string>("PaymentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PaymentTypeId", "AttrName");

                    b.HasIndex(new[] { "PaymentTypeId" }, "PAYMETH_TYPE_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PMNT_TP_ATR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PMNT_TP_ATR_TXSTMP");

                    b.ToTable("PAYMENT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.PayrollPreference", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("PayrollPreferenceSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYROLL_PREFERENCE_SEQ_ID");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ACCOUNT_NUMBER");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BANK_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DeductionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEDUCTION_TYPE_ID");

                    b.Property<decimal?>("FlatAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("FLAT_AMOUNT");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PaymentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                    b.Property<double?>("Percentage")
                        .HasColumnType("double")
                        .HasColumnName("PERCENTAGE");

                    b.Property<string>("PeriodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERIOD_TYPE_ID");

                    b.Property<string>("RoutingNumber")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ROUTING_NUMBER");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "RoleTypeId", "PayrollPreferenceSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRLL_PRFRNC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRLL_PRFRNC_TXSTMP");

                    b.HasIndex(new[] { "PartyId" }, "PRL_PREF_PRTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PRL_PREF_PTRL");

                    b.ToTable("PAYROLL_PREFERENCE", (string)null);
                });

            modelBuilder.Entity("Domain.PerfRatingType", b =>
                {
                    b.Property<string>("PerfRatingTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERF_RATING_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PerfRatingTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PERF_RATNG_TYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRF_RTNG_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRF_RTNG_TP_TXSTMP");

                    b.ToTable("PERF_RATING_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PerfReview", b =>
                {
                    b.Property<string>("EmployeePartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPLOYEE_PARTY_ID");

                    b.Property<string>("EmployeeRoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPLOYEE_ROLE_TYPE_ID");

                    b.Property<string>("PerfReviewId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERF_REVIEW_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EmplPositionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ManagerPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MANAGER_PARTY_ID");

                    b.Property<string>("ManagerRoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MANAGER_ROLE_TYPE_ID");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("EmployeePartyId", "EmployeeRoleTypeId", "PerfReviewId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PERF_REVIEW_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PERF_REVIEW_TXSTMP");

                    b.HasIndex(new[] { "EmployeePartyId", "EmployeeRoleTypeId" }, "PERF_REV_EPTRL");

                    b.HasIndex(new[] { "EmployeePartyId" }, "PERF_REV_EPTY");

                    b.HasIndex(new[] { "ManagerPartyId" }, "PERF_REV_MPTY");

                    b.HasIndex(new[] { "PaymentId" }, "PERF_REV_PMNT");

                    b.ToTable("PERF_REVIEW", (string)null);
                });

            modelBuilder.Entity("Domain.PerfReviewItem", b =>
                {
                    b.Property<string>("EmployeePartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPLOYEE_PARTY_ID");

                    b.Property<string>("EmployeeRoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPLOYEE_ROLE_TYPE_ID");

                    b.Property<string>("PerfReviewId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERF_REVIEW_ID");

                    b.Property<string>("PerfReviewItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERF_REVIEW_ITEM_SEQ_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PerfRatingTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERF_RATING_TYPE_ID");

                    b.Property<string>("PerfReviewItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERF_REVIEW_ITEM_TYPE_ID");

                    b.HasKey("EmployeePartyId", "EmployeeRoleTypeId", "PerfReviewId", "PerfReviewItemSeqId");

                    b.HasIndex(new[] { "EmployeePartyId", "EmployeeRoleTypeId" }, "PERF_RVITM_EPTRL");

                    b.HasIndex(new[] { "EmployeePartyId" }, "PERF_RVITM_EPTY");

                    b.HasIndex(new[] { "EmployeePartyId", "EmployeeRoleTypeId", "PerfReviewId" }, "PERF_RVITM_PFRV");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRF_RVW_ITM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRF_RVW_ITM_TXSTMP");

                    b.ToTable("PERF_REVIEW_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.PerfReviewItemType", b =>
                {
                    b.Property<string>("PerfReviewItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERF_REVIEW_ITEM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("PerfReviewItemTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PERF_REV_ITM_TYP");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRF_RVW_ITM_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRF_RVW_ITM_TP_TXS");

                    b.ToTable("PERF_REVIEW_ITEM_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PerformanceNote", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CommunicationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("COMMUNICATION_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PERF_NOTE_PRLE");

                    b.HasIndex(new[] { "PartyId" }, "PERF_NOTE_PRTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRFRMNC_NT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRFRMNC_NT_TXSTMP");

                    b.ToTable("PERFORMANCE_NOTE", (string)null);
                });

            modelBuilder.Entity("Domain.PeriodType", b =>
                {
                    b.Property<string>("PeriodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERIOD_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("PeriodLength")
                        .HasColumnType("int")
                        .HasColumnName("PERIOD_LENGTH");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("PeriodTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PERIOD_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PERIOD_TYPE_TXSTMP");

                    b.HasIndex(new[] { "UomId" }, "PER_TYPE_UOM");

                    b.ToTable("PERIOD_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<string>("CardId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CARD_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DeceasedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DECEASED_DATE");

                    b.Property<string>("EmploymentStatusEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPLOYMENT_STATUS_ENUM_ID");

                    b.Property<string>("ExistingCustomer")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("EXISTING_CUSTOMER")
                        .IsFixedLength();

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("FirstNameLocal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FIRST_NAME_LOCAL");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("GENDER")
                        .IsFixedLength();

                    b.Property<double?>("Height")
                        .HasColumnType("double")
                        .HasColumnName("HEIGHT");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LAST_NAME");

                    b.Property<string>("LastNameLocal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LAST_NAME_LOCAL");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("MARITAL_STATUS")
                        .IsFixedLength();

                    b.Property<string>("MaritalStatusEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MARITAL_STATUS_ENUM_ID");

                    b.Property<string>("MemberId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MEMBER_ID");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MIDDLE_NAME");

                    b.Property<string>("MiddleNameLocal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MIDDLE_NAME_LOCAL");

                    b.Property<int?>("MonthsWithEmployer")
                        .HasColumnType("int")
                        .HasColumnName("MONTHS_WITH_EMPLOYER");

                    b.Property<string>("MothersMaidenName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MOTHERS_MAIDEN_NAME");

                    b.Property<string>("Nickname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NICKNAME");

                    b.Property<string>("Occupation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OCCUPATION");

                    b.Property<string>("OtherLocal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OTHER_LOCAL");

                    b.Property<DateTime?>("PassportExpireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PASSPORT_EXPIRE_DATE");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PASSPORT_NUMBER");

                    b.Property<string>("PersonalTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PERSONAL_TITLE");

                    b.Property<string>("ResidenceStatusEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RESIDENCE_STATUS_ENUM_ID");

                    b.Property<string>("Salutation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SALUTATION");

                    b.Property<string>("SocialSecurityNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SOCIAL_SECURITY_NUMBER");

                    b.Property<string>("Suffix")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SUFFIX");

                    b.Property<double?>("TotalYearsWorkExperience")
                        .HasColumnType("double")
                        .HasColumnName("TOTAL_YEARS_WORK_EXPERIENCE");

                    b.Property<double?>("Weight")
                        .HasColumnType("double")
                        .HasColumnName("WEIGHT");

                    b.Property<int?>("YearsWithEmployer")
                        .HasColumnType("int")
                        .HasColumnName("YEARS_WITH_EMPLOYER");

                    b.HasKey("PartyId");

                    b.HasIndex(new[] { "FirstName" }, "FIRST_NAME_IDX");

                    b.HasIndex(new[] { "LastName" }, "LAST_NAME_IDX");

                    b.HasIndex(new[] { "EmploymentStatusEnumId" }, "PERSON_EMPS_ENUM");

                    b.HasIndex(new[] { "MaritalStatusEnumId" }, "PERSON_MARITAL");

                    b.HasIndex(new[] { "PartyId" }, "PERSON_PARTY");

                    b.HasIndex(new[] { "ResidenceStatusEnumId" }, "PERSON_RESS_ENUM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PERSON_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PERSON_TXSTMP");

                    b.ToTable("PERSON", (string)null);
                });

            modelBuilder.Entity("Domain.PersonTraining", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("TrainingClassTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRAINING_CLASS_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("ApprovalStatus")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("APPROVAL_STATUS");

                    b.Property<string>("ApproverId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("APPROVER_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REASON");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<string>("TrainingRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRAINING_REQUEST_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.HasKey("PartyId", "TrainingClassTypeId", "FromDate");

                    b.HasIndex(new[] { "ApproverId" }, "PERS_TRNG_APPR");

                    b.HasIndex(new[] { "PartyId" }, "PERS_TRNG_PRTY");

                    b.HasIndex(new[] { "TrainingClassTypeId" }, "PERS_TRNG_TCTP");

                    b.HasIndex(new[] { "TrainingRequestId" }, "PERS_TRNG_TRNRQ");

                    b.HasIndex(new[] { "WorkEffortId" }, "PERS_TRNG_WREF");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRSN_TRNNG_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRSN_TRNNG_TXSTMP");

                    b.ToTable("PERSON_TRAINING", (string)null);
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AppUserLoginId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AppUserLoginId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Domain.PhysicalInventory", b =>
                {
                    b.Property<string>("PhysicalInventoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PHYSICAL_INVENTORY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GeneralComments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("GENERAL_COMMENTS");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime?>("PhysicalInventoryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PHYSICAL_INVENTORY_DATE");

                    b.HasKey("PhysicalInventoryId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PHSCL_INVNR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PHSCL_INVNR_TXSTMP");

                    b.ToTable("PHYSICAL_INVENTORY", (string)null);
                });

            modelBuilder.Entity("Domain.Picklist", b =>
                {
                    b.Property<string>("PicklistId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PICKLIST_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("PicklistDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PICKLIST_DATE");

                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("PicklistId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PICKLIST_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PICKLIST_TXSTMP");

                    b.HasIndex(new[] { "FacilityId" }, "PICKLST_FLTY");

                    b.HasIndex(new[] { "ShipmentMethodTypeId" }, "PICKLST_SMTP");

                    b.HasIndex(new[] { "StatusId" }, "PICKLST_STTS");

                    b.ToTable("PICKLIST", (string)null);
                });

            modelBuilder.Entity("Domain.PicklistBin", b =>
                {
                    b.Property<string>("PicklistBinId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PICKLIST_BIN_ID");

                    b.Property<int?>("BinLocationNumber")
                        .HasColumnType("int")
                        .HasColumnName("BIN_LOCATION_NUMBER");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PicklistId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PICKLIST_ID");

                    b.Property<string>("PrimaryOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_ORDER_ID");

                    b.Property<string>("PrimaryShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_SHIP_GROUP_SEQ_ID");

                    b.HasKey("PicklistBinId");

                    b.HasIndex(new[] { "PrimaryOrderId", "PrimaryShipGroupSeqId" }, "PCKLST_BIN_OISG");

                    b.HasIndex(new[] { "PicklistId" }, "PCKLST_BIN_PKLT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PCKLST_BN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PCKLST_BN_TXSTMP");

                    b.ToTable("PICKLIST_BIN", (string)null);
                });

            modelBuilder.Entity("Domain.PicklistItem", b =>
                {
                    b.Property<string>("PicklistBinId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PICKLIST_BIN_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ItemStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ITEM_STATUS_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.HasKey("PicklistBinId", "OrderId", "OrderItemSeqId", "ShipGroupSeqId", "InventoryItemId");

                    b.HasIndex(new[] { "PicklistBinId" }, "PCKLST_ITM_BIN");

                    b.HasIndex(new[] { "InventoryItemId" }, "PCKLST_ITM_INV");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "PCKLST_ITM_ODIT");

                    b.HasIndex(new[] { "OrderId", "ShipGroupSeqId" }, "PCKLST_ITM_OISG");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PCKLST_ITM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PCKLST_ITM_TXSTMP");

                    b.HasIndex(new[] { "ItemStatusId" }, "PICKLST_ITM_STTS");

                    b.ToTable("PICKLIST_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.PicklistRole", b =>
                {
                    b.Property<string>("PicklistId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PICKLIST_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PicklistId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "PCKLST_RLE_CBUL");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "PCKLST_RLE_LMUL");

                    b.HasIndex(new[] { "PicklistId" }, "PCKLST_RLE_PKLT");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PCKLST_RLE_PRLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PCKLST_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PCKLST_RL_TXSTMP");

                    b.ToTable("PICKLIST_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.PicklistStatus", b =>
                {
                    b.Property<string>("PicklistId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PICKLIST_ID");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("StatusIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID_TO");

                    b.HasKey("PicklistId", "StatusDate");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "PCKLST_STST_CUL");

                    b.HasIndex(new[] { "StatusId" }, "PCKLST_STST_FSI");

                    b.HasIndex(new[] { "PicklistId" }, "PCKLST_STST_PKLT");

                    b.HasIndex(new[] { "StatusIdTo" }, "PCKLST_STST_TSI");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PCKLST_STTS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PCKLST_STTS_TXSTMP");

                    b.ToTable("PICKLIST_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.PicklistStatusHistory", b =>
                {
                    b.Property<string>("PicklistId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PICKLIST_ID");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<string>("ChangeUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("StatusIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID_TO");

                    b.HasKey("PicklistId", "ChangeDate");

                    b.HasIndex(new[] { "ChangeUserLoginId" }, "PCKLST_STHST_CUL");

                    b.HasIndex(new[] { "StatusId" }, "PCKLST_STHST_FSI");

                    b.HasIndex(new[] { "PicklistId" }, "PCKLST_STHST_PKLT");

                    b.HasIndex(new[] { "StatusId", "StatusIdTo" }, "PCKLST_STHST_SVC");

                    b.HasIndex(new[] { "StatusIdTo" }, "PCKLST_STHST_TSI");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PCKT_STS_HSR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PCKT_STS_HSR_TXSTP");

                    b.ToTable("PICKLIST_STATUS_HISTORY", (string)null);
                });

            modelBuilder.Entity("Domain.PlatformType", b =>
                {
                    b.Property<string>("PlatformTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PLATFORM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PlatformName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PLATFORM_NAME");

                    b.Property<string>("PlatformVersion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PLATFORM_VERSION");

                    b.HasKey("PlatformTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PLTFRM_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PLTFRM_TP_TXSTMP");

                    b.ToTable("PLATFORM_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.PortalPage", b =>
                {
                    b.Property<string>("PortalPageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTAL_PAGE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HelpContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("HELP_CONTENT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OriginalPortalPageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGINAL_PORTAL_PAGE_ID");

                    b.Property<string>("OwnerUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("OWNER_USER_LOGIN_ID");

                    b.Property<string>("ParentPortalPageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_PORTAL_PAGE_ID");

                    b.Property<string>("PortalPageName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PORTAL_PAGE_NAME");

                    b.Property<string>("SecurityGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SECURITY_GROUP_ID");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("PortalPageId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PORTAL_PAGE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PORTAL_PAGE_TXSTMP");

                    b.HasIndex(new[] { "SecurityGroupId" }, "PORTPAGE_SECGRP");

                    b.HasIndex(new[] { "HelpContentId" }, "PORTPAL_HELP_CONT");

                    b.HasIndex(new[] { "ParentPortalPageId" }, "PortPage_PARENT");

                    b.ToTable("PORTAL_PAGE", (string)null);
                });

            modelBuilder.Entity("Domain.PortalPageColumn", b =>
                {
                    b.Property<string>("PortalPageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTAL_PAGE_ID");

                    b.Property<string>("ColumnSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COLUMN_SEQ_ID");

                    b.Property<int?>("ColumnWidthPercentage")
                        .HasColumnType("int")
                        .HasColumnName("COLUMN_WIDTH_PERCENTAGE");

                    b.Property<int?>("ColumnWidthPixels")
                        .HasColumnType("int")
                        .HasColumnName("COLUMN_WIDTH_PIXELS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PortalPageId", "ColumnSeqId");

                    b.HasIndex(new[] { "PortalPageId" }, "PRTL_PGCOL_PAGE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRTL_PG_CLN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRTL_PG_CLN_TXSTMP");

                    b.ToTable("PORTAL_PAGE_COLUMN", (string)null);
                });

            modelBuilder.Entity("Domain.PortalPagePortlet", b =>
                {
                    b.Property<string>("PortalPageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTAL_PAGE_ID");

                    b.Property<string>("PortalPortletId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTAL_PORTLET_ID");

                    b.Property<string>("PortletSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTLET_SEQ_ID");

                    b.Property<string>("ColumnSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COLUMN_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("PortalPageId", "PortalPortletId", "PortletSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRL_PG_PRTT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRL_PG_PRTT_TXSTMP");

                    b.HasIndex(new[] { "PortalPageId" }, "PRTL_PGPTLT_PAGE");

                    b.HasIndex(new[] { "PortalPortletId" }, "PRTL_PGPTLT_PTLT");

                    b.ToTable("PORTAL_PAGE_PORTLET", (string)null);
                });

            modelBuilder.Entity("Domain.PortalPortlet", b =>
                {
                    b.Property<string>("PortalPortletId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTAL_PORTLET_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("EditFormLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EDIT_FORM_LOCATION");

                    b.Property<string>("EditFormName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EDIT_FORM_NAME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PortletName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PORTLET_NAME");

                    b.Property<string>("ScreenLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SCREEN_LOCATION");

                    b.Property<string>("ScreenName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SCREEN_NAME");

                    b.Property<string>("Screenshot")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("SCREENSHOT");

                    b.Property<string>("SecurityMainAction")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SECURITY_MAIN_ACTION");

                    b.Property<string>("SecurityServiceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SECURITY_SERVICE_NAME");

                    b.HasKey("PortalPortletId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRTL_PRTLT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRTL_PRTLT_TXSTMP");

                    b.ToTable("PORTAL_PORTLET", (string)null);
                });

            modelBuilder.Entity("Domain.PortletAttribute", b =>
                {
                    b.Property<string>("PortalPageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTAL_PAGE_ID");

                    b.Property<string>("PortalPortletId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTAL_PORTLET_ID");

                    b.Property<string>("PortletSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTLET_SEQ_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_TYPE");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PortalPageId", "PortalPortletId", "PortletSeqId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRTLT_ATTRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRTLT_ATTRT_TXSTMP");

                    b.HasIndex(new[] { "PortalPortletId" }, "PTLT_ATTR_PTLT");

                    b.ToTable("PORTLET_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.PortletCategory", b =>
                {
                    b.Property<string>("PortletCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTLET_CATEGORY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PortletCategoryId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRTLT_CTGR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRTLT_CTGR_TXSTMP");

                    b.ToTable("PORTLET_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.PortletPortletCategory", b =>
                {
                    b.Property<string>("PortalPortletId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTAL_PORTLET_ID");

                    b.Property<string>("PortletCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PORTLET_CATEGORY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PortalPortletId", "PortletCategoryId");

                    b.HasIndex(new[] { "PortletCategoryId" }, "PPTLTCAT_PTLTCAT");

                    b.HasIndex(new[] { "PortalPortletId" }, "PPTLTCAT_PTPL");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRTT_PRT_CTR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRTT_PRT_CTR_TXSTP");

                    b.ToTable("PORTLET_PORTLET_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.PostalAddress", b =>
                {
                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ADDRESS1");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ADDRESS2");

                    b.Property<string>("AttnName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ATTN_NAME");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CITY");

                    b.Property<string>("CityGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CITY_GEO_ID");

                    b.Property<string>("CountryGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COUNTRY_GEO_ID");

                    b.Property<string>("CountyGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COUNTY_GEO_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Directions")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DIRECTIONS");

                    b.Property<string>("GeoPointId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_POINT_ID");

                    b.Property<int?>("HouseNumber")
                        .HasColumnType("int")
                        .HasColumnName("HOUSE_NUMBER");

                    b.Property<string>("HouseNumberExt")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("HOUSE_NUMBER_EXT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MunicipalityGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MUNICIPALITY_GEO_ID");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("POSTAL_CODE");

                    b.Property<string>("PostalCodeExt")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("POSTAL_CODE_EXT");

                    b.Property<string>("PostalCodeGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("POSTAL_CODE_GEO_ID");

                    b.Property<string>("StateProvinceGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATE_PROVINCE_GEO_ID");

                    b.Property<string>("ToName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TO_NAME");

                    b.HasKey("ContactMechId");

                    b.HasIndex(new[] { "Address1" }, "ADDRESS1_IDX");

                    b.HasIndex(new[] { "Address2" }, "ADDRESS2_IDX");

                    b.HasIndex(new[] { "City" }, "CITY_IDX");

                    b.HasIndex(new[] { "PostalCode" }, "POSTAL_CODE_IDX");

                    b.HasIndex(new[] { "CountryGeoId" }, "POST_ADDR_CGEO");

                    b.HasIndex(new[] { "CityGeoId" }, "POST_ADDR_CITY");

                    b.HasIndex(new[] { "ContactMechId" }, "POST_ADDR_CMECH");

                    b.HasIndex(new[] { "CountyGeoId" }, "POST_ADDR_CNTG");

                    b.HasIndex(new[] { "GeoPointId" }, "POST_ADDR_GEOPT");

                    b.HasIndex(new[] { "MunicipalityGeoId" }, "POST_ADDR_MNCP");

                    b.HasIndex(new[] { "PostalCodeGeoId" }, "POST_ADDR_PCGEO");

                    b.HasIndex(new[] { "StateProvinceGeoId" }, "POST_ADDR_SPGEO");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PSTL_ADDRSS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PSTL_ADDRSS_TXSTMP");

                    b.ToTable("POSTAL_ADDRESS", (string)null);
                });

            modelBuilder.Entity("Domain.PostalAddressBoundary", b =>
                {
                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("GeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContactMechId", "GeoId");

                    b.HasIndex(new[] { "ContactMechId" }, "POST_ADDR_BNDRY");

                    b.HasIndex(new[] { "GeoId" }, "POST_ADDR_BNDRYGEO");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PSL_ADDS_BNR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PSL_ADDS_BNR_TXSTP");

                    b.ToTable("POSTAL_ADDRESS_BOUNDARY", (string)null);
                });

            modelBuilder.Entity("Domain.PriorityType", b =>
                {
                    b.Property<string>("PriorityTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIORITY_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PriorityTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRRT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRRT_TP_TXSTMP");

                    b.ToTable("PRIORITY_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProdCatalog", b =>
                {
                    b.Property<string>("ProdCatalogId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CATALOG_ID");

                    b.Property<string>("CatalogName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CATALOG_NAME");

                    b.Property<string>("ContentPathPrefix")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONTENT_PATH_PREFIX");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("HeaderLogo")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("HEADER_LOGO");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PurchaseAllowPermReqd")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PURCHASE_ALLOW_PERM_REQD")
                        .IsFixedLength();

                    b.Property<string>("StyleSheet")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("STYLE_SHEET");

                    b.Property<string>("TemplatePathPrefix")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TEMPLATE_PATH_PREFIX");

                    b.Property<string>("UseQuickAdd")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("USE_QUICK_ADD")
                        .IsFixedLength();

                    b.Property<string>("ViewAllowPermReqd")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("VIEW_ALLOW_PERM_REQD")
                        .IsFixedLength();

                    b.HasKey("ProdCatalogId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRD_CTLG_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRD_CTLG_TXSTMP");

                    b.ToTable("PROD_CATALOG", (string)null);
                });

            modelBuilder.Entity("Domain.ProdCatalogCategory", b =>
                {
                    b.Property<string>("ProdCatalogId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CATALOG_ID");

                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProdCatalogCategoryTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CATALOG_CATEGORY_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProdCatalogId", "ProductCategoryId", "ProdCatalogCategoryTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRD_CTG_CTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRD_CTG_CTR_TXSTMP");

                    b.HasIndex(new[] { "ProdCatalogId" }, "PROD_CC_CATALOG");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PROD_CC_CATEGORY");

                    b.HasIndex(new[] { "ProdCatalogCategoryTypeId" }, "PROD_CC_TYPE");

                    b.ToTable("PROD_CATALOG_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.ProdCatalogCategoryType", b =>
                {
                    b.Property<string>("ProdCatalogCategoryTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CATALOG_CATEGORY_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProdCatalogCategoryTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRD_CTG_CTR_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRD_CTG_CTR_TP_TXS");

                    b.HasIndex(new[] { "ParentTypeId" }, "PROD_PCCT_TYPEPAR");

                    b.ToTable("PROD_CATALOG_CATEGORY_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProdCatalogInvFacility", b =>
                {
                    b.Property<string>("ProdCatalogId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CATALOG_ID");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProdCatalogId", "FacilityId", "FromDate");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRD_CTG_INV_FCT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRD_CTG_INV_FCT_TS");

                    b.HasIndex(new[] { "ProdCatalogId" }, "PROD_CIF_CATALOG");

                    b.HasIndex(new[] { "FacilityId" }, "PROD_CIF_FACILITY");

                    b.ToTable("PROD_CATALOG_INV_FACILITY", (string)null);
                });

            modelBuilder.Entity("Domain.ProdCatalogRole", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("ProdCatalogId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CATALOG_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "RoleTypeId", "ProdCatalogId", "FromDate");

                    b.HasIndex(new[] { "ProdCatalogId" }, "PCATRLE_CATALOG");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PCATRLE_PTYRLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRD_CTLG_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRD_CTLG_RL_TXSTMP");

                    b.ToTable("PROD_CATALOG_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.ProdConfItemContent", b =>
                {
                    b.Property<string>("ConfigItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ITEM_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("ConfItemContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONF_ITEM_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ConfigItemId", "ContentId", "ConfItemContentTypeId", "FromDate");

                    b.HasIndex(new[] { "ContentId" }, "CIMT_CNT_CNT");

                    b.HasIndex(new[] { "ConfigItemId" }, "CIMT_CNT_PCIT");

                    b.HasIndex(new[] { "ConfItemContentTypeId" }, "CIMT_CNT_TYPE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRD_CNF_ITM_CNT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRD_CNF_ITM_CNT_TS");

                    b.ToTable("PROD_CONF_ITEM_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.ProdConfItemContentType", b =>
                {
                    b.Property<string>("ConfItemContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONF_ITEM_CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ConfItemContentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PCICT_TYP_PARENT");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRD_ITM_CNT_TP_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRD_ITM_CNT_TP_TS");

                    b.ToTable("PROD_CONF_ITEM_CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProdPromoCodeContactMech", b =>
                {
                    b.Property<string>("ProductPromoCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_CODE_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductPromoCodeId", "ContactMechId")
                        .HasName("PK_PROD_PROMO_CODE_CONTACT_MEC");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRD_CD_CNT_MCH_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRD_CD_CNT_MCH_TS");

                    b.HasIndex(new[] { "ContactMechId" }, "PROD_PRCDE_CM");

                    b.HasIndex(new[] { "ProductPromoCodeId" }, "PROD_PRCDE_PCD");

                    b.ToTable("PROD_PROMO_CODE_CONTACT_MECH", (string)null);
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("AmountUomTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AMOUNT_UOM_TYPE_ID");

                    b.Property<string>("AutoCreateKeywords")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTO_CREATE_KEYWORDS")
                        .IsFixedLength();

                    b.Property<int?>("BillOfMaterialLevel")
                        .HasColumnType("int")
                        .HasColumnName("BILL_OF_MATERIAL_LEVEL");

                    b.Property<string>("BrandName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BRAND_NAME");

                    b.Property<string>("ChargeShipping")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CHARGE_SHIPPING")
                        .IsFixedLength();

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("ConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DefaultShipmentBoxTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_SHIPMENT_BOX_TYPE_ID");

                    b.Property<string>("DepthUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEPTH_UOM_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DetailImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("DETAIL_IMAGE_URL");

                    b.Property<string>("DetailScreen")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DETAIL_SCREEN");

                    b.Property<string>("DiameterUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DIAMETER_UOM_ID");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<decimal?>("FixedAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("FIXED_AMOUNT");

                    b.Property<string>("HeightUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("HEIGHT_UOM_ID");

                    b.Property<string>("InShippingBox")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IN_SHIPPING_BOX")
                        .IsFixedLength();

                    b.Property<string>("IncludeInPromotions")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_IN_PROMOTIONS")
                        .IsFixedLength();

                    b.Property<string>("InternalName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INTERNAL_NAME");

                    b.Property<DateTime?>("IntroductionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("INTRODUCTION_DATE");

                    b.Property<string>("InventoryItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_TYPE_ID");

                    b.Property<string>("InventoryMessage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INVENTORY_MESSAGE");

                    b.Property<string>("IsVariant")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_VARIANT")
                        .IsFixedLength();

                    b.Property<string>("IsVirtual")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_VIRTUAL")
                        .IsFixedLength();

                    b.Property<string>("LargeImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("LARGE_IMAGE_URL");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LongDescription")
                        .HasColumnType("text")
                        .HasColumnName("LONG_DESCRIPTION");

                    b.Property<string>("LotIdFilledIn")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LOT_ID_FILLED_IN");

                    b.Property<string>("MediumImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("MEDIUM_IMAGE_URL");

                    b.Property<string>("OrderDecimalQuantity")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ORDER_DECIMAL_QUANTITY")
                        .IsFixedLength();

                    b.Property<string>("OriginGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGIN_GEO_ID");

                    b.Property<string>("OriginalImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("ORIGINAL_IMAGE_URL");

                    b.Property<int?>("PiecesIncluded")
                        .HasColumnType("int")
                        .HasColumnName("PIECES_INCLUDED");

                    b.Property<string>("PriceDetailText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PRICE_DETAIL_TEXT");

                    b.Property<string>("PrimaryProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_PRODUCT_CATEGORY_ID");

                    b.Property<decimal?>("ProductDepth")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PRODUCT_DEPTH");

                    b.Property<decimal?>("ProductDiameter")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PRODUCT_DIAMETER");

                    b.Property<decimal?>("ProductHeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PRODUCT_HEIGHT");

                    b.Property<string>("ProductName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PRODUCT_NAME");

                    b.Property<decimal?>("ProductRating")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PRODUCT_RATING");

                    b.Property<string>("ProductTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_TYPE_ID");

                    b.Property<decimal?>("ProductWeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PRODUCT_WEIGHT");

                    b.Property<decimal?>("ProductWidth")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PRODUCT_WIDTH");

                    b.Property<decimal?>("QuantityIncluded")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_INCLUDED");

                    b.Property<string>("QuantityUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUANTITY_UOM_ID");

                    b.Property<string>("RatingTypeEnum")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RATING_TYPE_ENUM");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RELEASE_DATE");

                    b.Property<string>("RequireAmount")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_AMOUNT")
                        .IsFixedLength();

                    b.Property<string>("RequireInventory")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_INVENTORY")
                        .IsFixedLength();

                    b.Property<string>("RequirementMethodEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_METHOD_ENUM_ID");

                    b.Property<decimal?>("Reserv2ndPPPerc")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV2ND_P_P_PERC");

                    b.Property<decimal?>("ReservMaxPersons")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_MAX_PERSONS");

                    b.Property<decimal?>("ReservNthPPPerc")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_NTH_P_P_PERC");

                    b.Property<string>("Returnable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("RETURNABLE")
                        .IsFixedLength();

                    b.Property<string>("SalesDiscWhenNotAvail")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SALES_DISC_WHEN_NOT_AVAIL")
                        .IsFixedLength();

                    b.Property<DateTime?>("SalesDiscontinuationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SALES_DISCONTINUATION_DATE");

                    b.Property<int?>("ServiceLifeDays")
                        .HasColumnType("int")
                        .HasColumnName("SERVICE_LIFE_DAYS");

                    b.Property<int?>("ServiceLifeMileage")
                        .HasColumnType("int")
                        .HasColumnName("SERVICE_LIFE_MILEAGE");

                    b.Property<decimal?>("ShippingDepth")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SHIPPING_DEPTH");

                    b.Property<decimal?>("ShippingHeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SHIPPING_HEIGHT");

                    b.Property<decimal?>("ShippingWeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SHIPPING_WEIGHT");

                    b.Property<decimal?>("ShippingWidth")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SHIPPING_WIDTH");

                    b.Property<string>("SmallImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("SMALL_IMAGE_URL");

                    b.Property<DateTime?>("SupportDiscontinuationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SUPPORT_DISCONTINUATION_DATE");

                    b.Property<string>("Taxable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TAXABLE")
                        .IsFixedLength();

                    b.Property<string>("VirtualVariantMethodEnum")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VIRTUAL_VARIANT_METHOD_ENUM");

                    b.Property<string>("WeightUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEIGHT_UOM_ID");

                    b.Property<string>("WidthUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WIDTH_UOM_ID");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRODUCT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRODUCT_TXSTMP");

                    b.HasIndex(new[] { "AmountUomTypeId" }, "PROD_AMOUNT_UOMT");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "PROD_CB_USERLOGIN");

                    b.HasIndex(new[] { "DepthUomId" }, "PROD_DEPTH_UOM");

                    b.HasIndex(new[] { "DiameterUomId" }, "PROD_DIAMTR_UOM");

                    b.HasIndex(new[] { "FacilityId" }, "PROD_FACILITY");

                    b.HasIndex(new[] { "HeightUomId" }, "PROD_HEIGHT_UOM");

                    b.HasIndex(new[] { "InventoryItemTypeId" }, "PROD_INV_ITEM_TYPE");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "PROD_LMB_USERLOGIN");

                    b.HasIndex(new[] { "OriginGeoId" }, "PROD_ORG_GEO");

                    b.HasIndex(new[] { "PrimaryProductCategoryId" }, "PROD_PRIMARY_CAT");

                    b.HasIndex(new[] { "QuantityUomId" }, "PROD_QUANT_UOM");

                    b.HasIndex(new[] { "RatingTypeEnum" }, "PROD_RATE_ENUM");

                    b.HasIndex(new[] { "RequirementMethodEnumId" }, "PROD_RQMT_ENUM");

                    b.HasIndex(new[] { "DefaultShipmentBoxTypeId" }, "PROD_SHBX_TYPE");

                    b.HasIndex(new[] { "ProductTypeId" }, "PROD_TYPE");

                    b.HasIndex(new[] { "VirtualVariantMethodEnum" }, "PROD_VVMETHOD_ENUM");

                    b.HasIndex(new[] { "WeightUomId" }, "PROD_WEIGHT_UOM");

                    b.HasIndex(new[] { "WidthUomId" }, "PROD_WIDTH_UOM");

                    b.ToTable("PRODUCT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductAssoc", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID_TO");

                    b.Property<string>("ProductAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ASSOC_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EstimateCalcMethod")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ESTIMATE_CALC_METHOD");

                    b.Property<string>("Instruction")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INSTRUCTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REASON");

                    b.Property<string>("RecurrenceInfoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECURRENCE_INFO_ID");

                    b.Property<string>("RoutingWorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROUTING_WORK_EFFORT_ID");

                    b.Property<decimal?>("ScrapFactor")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SCRAP_FACTOR");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductId", "ProductIdTo", "ProductAssocTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_ASSC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_ASSC_TXSTMP");

                    b.HasIndex(new[] { "ProductIdTo" }, "PROD_ASSOC_APROD");

                    b.HasIndex(new[] { "EstimateCalcMethod" }, "PROD_ASSOC_CUSM");

                    b.HasIndex(new[] { "ProductId" }, "PROD_ASSOC_MPROD");

                    b.HasIndex(new[] { "RecurrenceInfoId" }, "PROD_ASSOC_RECINFO");

                    b.HasIndex(new[] { "RoutingWorkEffortId" }, "PROD_ASSOC_RTWE");

                    b.HasIndex(new[] { "ProductAssocTypeId" }, "PROD_ASSOC_TYPE");

                    b.ToTable("PRODUCT_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.ProductAssocType", b =>
                {
                    b.Property<string>("ProductAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProductAssocTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_ASC_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_ASC_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "PROD_ASSOC_TYPEPAR");

                    b.ToTable("PRODUCT_ASSOC_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductAttribute", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_TYPE");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_ATTRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_ATTRT_TXSTMP");

                    b.HasIndex(new[] { "ProductId" }, "PROD_ATTR");

                    b.ToTable("PRODUCT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductAverageCost", b =>
                {
                    b.Property<string>("ProductAverageCostTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_AVERAGE_COST_TYPE_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<decimal?>("AverageCost")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("AVERAGE_COST");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductAverageCostTypeId", "OrganizationPartyId", "ProductId", "FacilityId", "FromDate");

                    b.HasIndex(new[] { "FacilityId" }, "AVG_COST_FACI");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "AVG_COST_PARTY");

                    b.HasIndex(new[] { "ProductId" }, "AVG_COST_PROD");

                    b.HasIndex(new[] { "ProductAverageCostTypeId" }, "AVG_COST_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_AVG_CST_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_AVG_CST_TXSTP");

                    b.ToTable("PRODUCT_AVERAGE_COST", (string)null);
                });

            modelBuilder.Entity("Domain.ProductAverageCostType", b =>
                {
                    b.Property<string>("ProductAverageCostTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_AVERAGE_COST_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProductAverageCostTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "AVGCOST_TYPE_PAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_AVG_CST_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_AVG_CST_TP_TXS");

                    b.ToTable("PRODUCT_AVERAGE_COST_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCalculatedInfo", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("AverageCustomerRating")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("AVERAGE_CUSTOMER_RATING");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("TotalQuantityOrdered")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("TOTAL_QUANTITY_ORDERED");

                    b.Property<int?>("TotalTimesViewed")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_TIMES_VIEWED");

                    b.HasKey("ProductId");

                    b.HasIndex(new[] { "ProductId" }, "PRODCI_PROD");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CLCD_INF_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CLCD_INF_TXSTP");

                    b.ToTable("PRODUCT_CALCULATED_INFO", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategory", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("CategoryImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("CATEGORY_IMAGE_URL");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CATEGORY_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DetailScreen")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DETAIL_SCREEN");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LinkOneImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("LINK_ONE_IMAGE_URL");

                    b.Property<string>("LinkTwoImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("LINK_TWO_IMAGE_URL");

                    b.Property<string>("LongDescription")
                        .HasColumnType("text")
                        .HasColumnName("LONG_DESCRIPTION");

                    b.Property<string>("PrimaryParentCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_PARENT_CATEGORY_ID");

                    b.Property<string>("ProductCategoryTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_TYPE_ID");

                    b.Property<string>("ShowInSelect")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SHOW_IN_SELECT")
                        .IsFixedLength();

                    b.HasKey("ProductCategoryId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_CTGR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_CTGR_TXSTMP");

                    b.HasIndex(new[] { "PrimaryParentCategoryId" }, "PROD_CTGRY_PARENT");

                    b.HasIndex(new[] { "ProductCategoryTypeId" }, "PROD_CTGRY_TYPE");

                    b.ToTable("PRODUCT_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategoryAttribute", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductCategoryId", "AttrName");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PROD_CTGRY_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CTR_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CTR_ATTT_TXSTP");

                    b.ToTable("PRODUCT_CATEGORY_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategoryContent", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("ProdCatContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CAT_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("PurchaseFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PURCHASE_FROM_DATE");

                    b.Property<DateTime?>("PurchaseThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PURCHASE_THRU_DATE");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<int?>("UseCountLimit")
                        .HasColumnType("int")
                        .HasColumnName("USE_COUNT_LIMIT");

                    b.Property<decimal?>("UseDaysLimit")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("USE_DAYS_LIMIT");

                    b.HasKey("ProductCategoryId", "ContentId", "ProdCatContentTypeId", "FromDate");

                    b.HasIndex(new[] { "ContentId" }, "PRDCAT_CNT_CNT");

                    b.HasIndex(new[] { "ProductCategoryId", "ProdCatContentTypeId" }, "PRDCAT_CNT_CTTP");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PRDCAT_CNT_PRDCAT");

                    b.HasIndex(new[] { "ProdCatContentTypeId" }, "PRDCAT_CNT_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CTR_CNT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CTR_CNT_TXSTP");

                    b.ToTable("PRODUCT_CATEGORY_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategoryContentType", b =>
                {
                    b.Property<string>("ProdCatContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CAT_CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProdCatContentTypeId")
                        .HasName("PK_PRODUCT_CATEGORY_CONTENT_TY");

                    b.HasIndex(new[] { "ParentTypeId" }, "PRDCATCNT_TYP_PAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CTR_CNT_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CTR_CNT_TP_TXS");

                    b.ToTable("PRODUCT_CATEGORY_CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategoryGlAccount", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<string>("GlAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductCategoryId", "OrganizationPartyId", "GlAccountTypeId");

                    b.HasIndex(new[] { "GlAccountId" }, "PRD_CT_GLACT_GLACT");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PRD_CT_GLACT_PCAT");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "PRD_CT_GLACT_PRTY");

                    b.HasIndex(new[] { "GlAccountTypeId" }, "PRD_CT_GLACT_TYPE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CTR_GL_ACT_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CTR_GL_ACT_TXS");

                    b.ToTable("PRODUCT_CATEGORY_GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategoryLink", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("LinkSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LINK_SEQ_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DetailSubScreen")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DETAIL_SUB_SCREEN");

                    b.Property<string>("DetailText")
                        .HasColumnType("text")
                        .HasColumnName("DETAIL_TEXT");

                    b.Property<string>("ImageTwoUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("IMAGE_TWO_URL");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LinkInfo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LINK_INFO");

                    b.Property<string>("LinkTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LINK_TYPE_ENUM_ID");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<string>("TitleText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TITLE_TEXT");

                    b.HasKey("ProductCategoryId", "LinkSeqId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CTR_LNK_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CTR_LNK_TXSTP");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PROD_CLNK_CATEGORY");

                    b.HasIndex(new[] { "LinkTypeEnumId" }, "PROD_CLNK_LKTPENM");

                    b.ToTable("PRODUCT_CATEGORY_LINK", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategoryMember", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductCategoryId", "ProductId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CTR_MMR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CTR_MMR_TXSTP");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PRD_CMBR_PCT");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PROD_CMBR_CATEGORY");

                    b.HasIndex(new[] { "ProductId" }, "PROD_CMBR_PRODUCT");

                    b.ToTable("PRODUCT_CATEGORY_MEMBER", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategoryRole", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductCategoryId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CTR_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CTR_RL_TXSTMP");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PROD_CRLE_CATEGORY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PROD_CRLE_PTYRLE");

                    b.ToTable("PRODUCT_CATEGORY_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategoryRollup", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ParentProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_PRODUCT_CATEGORY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductCategoryId", "ParentProductCategoryId", "FromDate");

                    b.HasIndex(new[] { "ParentProductCategoryId" }, "PRDCR_PARPC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CTR_RLP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CTR_RLP_TXSTP");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PROD_CRLP_CURRENT");

                    b.HasIndex(new[] { "ParentProductCategoryId" }, "PROD_CRLP_PARENT");

                    b.ToTable("PRODUCT_CATEGORY_ROLLUP", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategoryType", b =>
                {
                    b.Property<string>("ProductCategoryTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProductCategoryTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CTR_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CTR_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "PROD_CTGRY_TYPEPAR");

                    b.ToTable("PRODUCT_CATEGORY_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCategoryTypeAttr", b =>
                {
                    b.Property<string>("ProductCategoryTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductCategoryTypeId", "AttrName");

                    b.HasIndex(new[] { "ProductCategoryTypeId" }, "PROD_CTGRY_TATTR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CTR_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CTR_TP_ATR_TXS");

                    b.ToTable("PRODUCT_CATEGORY_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.ProductConfig", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ConfigItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ITEM_ID");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("ConfigTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DefaultConfigOptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_CONFIG_OPTION_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("IsMandatory")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_MANDATORY")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LongDescription")
                        .HasColumnType("text")
                        .HasColumnName("LONG_DESCRIPTION");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductId", "ConfigItemId", "SequenceNum", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_CNFG_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_CNFG_TXSTMP");

                    b.HasIndex(new[] { "ConfigItemId" }, "PROD_CONF_ITEM");

                    b.HasIndex(new[] { "ProductId" }, "PROD_CONF_PROD");

                    b.ToTable("PRODUCT_CONFIG", (string)null);
                });

            modelBuilder.Entity("Domain.ProductConfigConfig", b =>
                {
                    b.Property<string>("ConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ID");

                    b.Property<string>("ConfigItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ITEM_ID");

                    b.Property<string>("ConfigOptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_OPTION_ID");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ConfigId", "ConfigItemId", "ConfigOptionId", "SequenceNum");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CNG_CNG_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CNG_CNG_TXSTP");

                    b.HasIndex(new[] { "ConfigItemId" }, "PROD_CONFC_ITEM");

                    b.HasIndex(new[] { "ConfigItemId", "ConfigOptionId" }, "PROD_CONFC_OPTN");

                    b.ToTable("PRODUCT_CONFIG_CONFIG", (string)null);
                });

            modelBuilder.Entity("Domain.ProductConfigItem", b =>
                {
                    b.Property<string>("ConfigItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ITEM_ID");

                    b.Property<string>("ConfigItemName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONFIG_ITEM_NAME");

                    b.Property<string>("ConfigItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ITEM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LongDescription")
                        .HasColumnType("text")
                        .HasColumnName("LONG_DESCRIPTION");

                    b.HasKey("ConfigItemId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CNG_ITM_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CNG_ITM_TXSTP");

                    b.ToTable("PRODUCT_CONFIG_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.ProductConfigOption", b =>
                {
                    b.Property<string>("ConfigItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ITEM_ID");

                    b.Property<string>("ConfigOptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_OPTION_ID");

                    b.Property<string>("ConfigOptionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CONFIG_OPTION_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ConfigItemId", "ConfigOptionId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CNG_OPN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CNG_OPN_TXSTP");

                    b.HasIndex(new[] { "ConfigItemId" }, "PROD_OPTN_ITEM");

                    b.ToTable("PRODUCT_CONFIG_OPTION", (string)null);
                });

            modelBuilder.Entity("Domain.ProductConfigOptionIactn", b =>
                {
                    b.Property<string>("ConfigItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ITEM_ID");

                    b.Property<string>("ConfigOptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_OPTION_ID");

                    b.Property<string>("ConfigItemIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ITEM_ID_TO");

                    b.Property<string>("ConfigOptionIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_OPTION_ID_TO");

                    b.Property<int>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<string>("ConfigIactnTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_IACTN_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ConfigItemId", "ConfigOptionId", "ConfigItemIdTo", "ConfigOptionIdTo", "SequenceNum");

                    b.HasIndex(new[] { "ConfigItemId" }, "PROD_OPTIA_ITEM");

                    b.HasIndex(new[] { "ConfigItemIdTo" }, "PROD_OPTIA_ITMT");

                    b.HasIndex(new[] { "ConfigItemId", "ConfigOptionId" }, "PROD_OPTIA_OPTN");

                    b.HasIndex(new[] { "ConfigItemIdTo", "ConfigOptionIdTo" }, "PROD_OPTIA_OPTT");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CNG_OPN_ICN_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CNG_OPN_ICN_TS");

                    b.ToTable("PRODUCT_CONFIG_OPTION_IACTN", (string)null);
                });

            modelBuilder.Entity("Domain.ProductConfigProduct", b =>
                {
                    b.Property<string>("ConfigItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ITEM_ID");

                    b.Property<string>("ConfigOptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_OPTION_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("ConfigItemId", "ConfigOptionId", "ProductId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CNG_PRT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CNG_PRT_TXSTP");

                    b.HasIndex(new[] { "ConfigItemId" }, "PROD_CONFP_ITEM");

                    b.HasIndex(new[] { "ConfigItemId", "ConfigOptionId" }, "PROD_CONFP_OPTN");

                    b.HasIndex(new[] { "ProductId" }, "PROD_CONFP_PROD");

                    b.ToTable("PRODUCT_CONFIG_PRODUCT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductConfigStat", b =>
                {
                    b.Property<string>("ConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ConfigTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NumOfConfs")
                        .HasColumnType("int")
                        .HasColumnName("NUM_OF_CONFS");

                    b.HasKey("ConfigId", "ProductId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CNG_STS_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CNG_STS_TXSTP");

                    b.HasIndex(new[] { "ProductId" }, "PROD_CONFS_PROD");

                    b.ToTable("PRODUCT_CONFIG_STATS", (string)null);
                });

            modelBuilder.Entity("Domain.ProductContent", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("ProductContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("PurchaseFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PURCHASE_FROM_DATE");

                    b.Property<DateTime?>("PurchaseThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PURCHASE_THRU_DATE");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<int?>("UseCountLimit")
                        .HasColumnType("int")
                        .HasColumnName("USE_COUNT_LIMIT");

                    b.Property<string>("UseRoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USE_ROLE_TYPE_ID");

                    b.Property<int?>("UseTime")
                        .HasColumnType("int")
                        .HasColumnName("USE_TIME");

                    b.Property<string>("UseTimeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USE_TIME_UOM_ID");

                    b.HasKey("ProductId", "ContentId", "ProductContentTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_CNTNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_CNTNT_TXSTMP");

                    b.HasIndex(new[] { "ContentId" }, "PROD_CNT_CNT");

                    b.HasIndex(new[] { "ProductId" }, "PROD_CNT_PROD");

                    b.HasIndex(new[] { "ProductContentTypeId" }, "PROD_CNT_TYPE");

                    b.HasIndex(new[] { "UseRoleTypeId" }, "PROD_CNT_URT");

                    b.HasIndex(new[] { "UseTimeUomId" }, "PROD_CNT_UTU");

                    b.ToTable("PRODUCT_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductContentType", b =>
                {
                    b.Property<string>("ProductContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProductContentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PRDCT_TYP_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_CNTT_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_CNTT_TP_TXSTP");

                    b.ToTable("PRODUCT_CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductCostComponentCalc", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("CostComponentTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COST_COMPONENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("CostComponentCalcId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COST_COMPONENT_CALC_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductId", "CostComponentTypeId", "FromDate");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CST_CMT_CLC_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CST_CMT_CLC_TS");

                    b.HasIndex(new[] { "CostComponentCalcId" }, "PR_COS_CCC");

                    b.HasIndex(new[] { "CostComponentTypeId" }, "PR_COS_CCT");

                    b.HasIndex(new[] { "ProductId" }, "PR_COS_COMPCALC");

                    b.ToTable("PRODUCT_COST_COMPONENT_CALC", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFacility", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<int?>("DaysToShip")
                        .HasColumnType("int")
                        .HasColumnName("DAYS_TO_SHIP");

                    b.Property<decimal?>("LastInventoryCount")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("LAST_INVENTORY_COUNT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("MinimumStock")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("MINIMUM_STOCK");

                    b.Property<decimal?>("ReorderQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("REORDER_QUANTITY");

                    b.Property<string>("ReplenishMethodEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REPLENISH_METHOD_ENUM_ID");

                    b.Property<string>("RequirementMethodEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_METHOD_ENUM_ID");

                    b.HasKey("ProductId", "FacilityId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_FCLT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_FCLT_TXSTMP");

                    b.HasIndex(new[] { "FacilityId" }, "PROD_FAC_FAC");

                    b.HasIndex(new[] { "ProductId" }, "PROD_FAC_PROD");

                    b.HasIndex(new[] { "ReplenishMethodEnumId" }, "PROD_FAC_REP");

                    b.HasIndex(new[] { "RequirementMethodEnumId" }, "PROD_FAC_REQ");

                    b.ToTable("PRODUCT_FACILITY", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFacilityAssoc", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("FacilityIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID_TO");

                    b.Property<string>("FacilityAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ASSOC_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<int?>("TransitTime")
                        .HasColumnType("int")
                        .HasColumnName("TRANSIT_TIME");

                    b.HasKey("ProductId", "FacilityId", "FacilityIdTo", "FacilityAssocTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_FCT_ASC_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_FCT_ASC_TXSTP");

                    b.HasIndex(new[] { "FacilityId" }, "PRFACASSOC_FAC");

                    b.HasIndex(new[] { "FacilityIdTo" }, "PRFACASSOC_FACTO");

                    b.HasIndex(new[] { "ProductId" }, "PRFACASSOC_PRO");

                    b.HasIndex(new[] { "FacilityAssocTypeId" }, "PRFACASSOC_TYPE");

                    b.ToTable("PRODUCT_FACILITY_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFacilityLocation", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("LocationSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCATION_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("MinimumStock")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("MINIMUM_STOCK");

                    b.Property<decimal?>("MoveQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("MOVE_QUANTITY");

                    b.HasKey("ProductId", "FacilityId", "LocationSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_FCT_LCN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_FCT_LCN_TXSTP");

                    b.HasIndex(new[] { "FacilityId", "LocationSeqId" }, "PROD_FCL_FCL");

                    b.HasIndex(new[] { "ProductId" }, "PROD_FCL_PROD");

                    b.ToTable("PRODUCT_FACILITY_LOCATION", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeature", b =>
                {
                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<string>("Abbrev")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ABBREV");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("DefaultAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("DEFAULT_AMOUNT");

                    b.Property<int?>("DefaultSequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("DEFAULT_SEQUENCE_NUM");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("IdCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ID_CODE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("NumberSpecified")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("NUMBER_SPECIFIED");

                    b.Property<string>("ProductFeatureCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_CATEGORY_ID");

                    b.Property<string>("ProductFeatureTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_TYPE_ID");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("ProductFeatureId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_FTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_FTR_TXSTMP");

                    b.HasIndex(new[] { "ProductFeatureCategoryId" }, "PROD_FEAT_CATEGORY");

                    b.HasIndex(new[] { "ProductFeatureTypeId" }, "PROD_FEAT_TYPE");

                    b.HasIndex(new[] { "UomId" }, "PROD_FEAT_UOM");

                    b.ToTable("PRODUCT_FEATURE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureAppl", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductFeatureApplTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_APPL_TYPE_ID");

                    b.Property<decimal?>("RecurringAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("RECURRING_AMOUNT");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductId", "ProductFeatureId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_FTR_APL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_FTR_APL_TXSTP");

                    b.HasIndex(new[] { "ProductFeatureId" }, "PROD_FAPPL_FEATURE");

                    b.HasIndex(new[] { "ProductId" }, "PROD_FAPPL_PRODUCT");

                    b.HasIndex(new[] { "ProductFeatureApplTypeId" }, "PROD_FAPPL_TYPE");

                    b.ToTable("PRODUCT_FEATURE_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureApplAttr", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductId", "ProductFeatureId", "FromDate", "AttrName");

                    b.HasIndex(new[] { "ProductId", "ProductFeatureId", "FromDate" }, "PROD_FAPPA_FEATAPP");

                    b.HasIndex(new[] { "ProductFeatureId" }, "PROD_FAPPA_FEATURE");

                    b.HasIndex(new[] { "ProductId" }, "PROD_FAPPA_PRODUCT");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_FTR_APL_ATR_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_FTR_APL_ATR_TS");

                    b.ToTable("PRODUCT_FEATURE_APPL_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureApplType", b =>
                {
                    b.Property<string>("ProductFeatureApplTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_APPL_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProductFeatureApplTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PROD_FAPPL_TYPPAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_FTR_APL_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_FTR_APL_TP_TXS");

                    b.ToTable("PRODUCT_FEATURE_APPL_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureCatGrpAppl", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProductFeatureGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_GROUP_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductCategoryId", "ProductFeatureGroupId", "FromDate")
                        .HasName("PK_PRODUCT_FEATURE_CAT_GRP_APP");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PROD_FCGAPL_CAT");

                    b.HasIndex(new[] { "ProductFeatureGroupId" }, "PROD_FCGAPL_FGRP");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_CT_GRP_APL_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_CT_GRP_APL_TS");

                    b.ToTable("PRODUCT_FEATURE_CAT_GRP_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureCategory", b =>
                {
                    b.Property<string>("ProductFeatureCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_CATEGORY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_CATEGORY_ID");

                    b.HasKey("ProductFeatureCategoryId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_FTR_CTR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_FTR_CTR_TXSTP");

                    b.HasIndex(new[] { "ParentCategoryId" }, "PROD_FEAT_CAT_PAR");

                    b.ToTable("PRODUCT_FEATURE_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureCategoryAppl", b =>
                {
                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProductFeatureCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_CATEGORY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductCategoryId", "ProductFeatureCategoryId", "FromDate")
                        .HasName("PK_PRODUCT_FEATURE_CATEGORY_AP");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PROD_FCAPPL_CAT");

                    b.HasIndex(new[] { "ProductFeatureCategoryId" }, "PROD_FCAPPL_FCAT");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_FTR_CTR_APL_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_FTR_CTR_APL_TS");

                    b.ToTable("PRODUCT_FEATURE_CATEGORY_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureDataResource", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("DataResourceId", "ProductFeatureId")
                        .HasName("PK_PRODUCT_FEATURE_DATA_RESOUR");

                    b.HasIndex(new[] { "DataResourceId" }, "PFEAT_DR_DATRES");

                    b.HasIndex(new[] { "ProductFeatureId" }, "PFEAT_DR_FEATURE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_FTR_DT_RSC_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_FTR_DT_RSC_TXS");

                    b.ToTable("PRODUCT_FEATURE_DATA_RESOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureGroup", b =>
                {
                    b.Property<string>("ProductFeatureGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductFeatureGroupId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_FTR_GRP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_FTR_GRP_TXSTP");

                    b.ToTable("PRODUCT_FEATURE_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureGroupAppl", b =>
                {
                    b.Property<string>("ProductFeatureGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_GROUP_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductFeatureGroupId", "ProductFeatureId", "FromDate");

                    b.HasIndex(new[] { "ProductFeatureId" }, "PROD_FGAPP_FEATURE");

                    b.HasIndex(new[] { "ProductFeatureGroupId" }, "PROD_FGAPP_PRODUCT");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_FTR_GRP_APL_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_FTR_GRP_APL_TS");

                    b.ToTable("PRODUCT_FEATURE_GROUP_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureIactn", b =>
                {
                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<string>("ProductFeatureIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID_TO");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductFeatureIactnTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_IACTN_TYPE_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.HasKey("ProductFeatureId", "ProductFeatureIdTo");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_FTR_ICN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_FTR_ICN_TXSTP");

                    b.HasIndex(new[] { "ProductFeatureIdTo" }, "PROD_FICTN_AFEAT");

                    b.HasIndex(new[] { "ProductFeatureId" }, "PROD_FICTN_MFEAT");

                    b.HasIndex(new[] { "ProductFeatureIactnTypeId" }, "PROD_FICTN_TYPE");

                    b.ToTable("PRODUCT_FEATURE_IACTN", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureIactnType", b =>
                {
                    b.Property<string>("ProductFeatureIactnTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_IACTN_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProductFeatureIactnTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PROD_FICTN_TYPPAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_FTR_ICN_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_FTR_ICN_TP_TXS");

                    b.ToTable("PRODUCT_FEATURE_IACTN_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeaturePrice", b =>
                {
                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<string>("ProductPriceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_TYPE_ID");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("PRICE");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductFeatureId", "ProductPriceTypeId", "CurrencyUomId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_FTR_PRC_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_FTR_PRC_TXSTP");

                    b.HasIndex(new[] { "ProductFeatureId", "CurrencyUomId" }, "PRD_FT_PRC_GENLKP");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "PROD_F_PRICE_CBUL");

                    b.HasIndex(new[] { "CurrencyUomId" }, "PROD_F_PRICE_CUOM");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "PROD_F_PRICE_LMBUL");

                    b.HasIndex(new[] { "ProductPriceTypeId" }, "PROD_F_PRICE_TYPE");

                    b.ToTable("PRODUCT_FEATURE_PRICE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductFeatureType", b =>
                {
                    b.Property<string>("ProductFeatureTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProductFeatureTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_FTR_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_FTR_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "PROD_FEAT_TYPPAR");

                    b.ToTable("PRODUCT_FEATURE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductGeo", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("GeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductGeoEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_GEO_ENUM_ID");

                    b.HasKey("ProductId", "GeoId");

                    b.HasIndex(new[] { "ProductGeoEnumId" }, "PRDGEO_ENUM");

                    b.HasIndex(new[] { "GeoId" }, "PRDGEO_GEO");

                    b.HasIndex(new[] { "ProductId" }, "PRDGEO_PRODUCT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRODUCT_GEO_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRODUCT_GEO_TXSTMP");

                    b.ToTable("PRODUCT_GEO", (string)null);
                });

            modelBuilder.Entity("Domain.ProductGlAccount", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<string>("GlAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductId", "OrganizationPartyId", "GlAccountTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_GL_ACCT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_GL_ACCT_TXSTP");

                    b.HasIndex(new[] { "GlAccountId" }, "PROD_GLACT_GLACT");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "PROD_GLACT_PARTY");

                    b.HasIndex(new[] { "ProductId" }, "PROD_GLACT_PROD");

                    b.HasIndex(new[] { "GlAccountTypeId" }, "PROD_GLACT_TYPE");

                    b.ToTable("PRODUCT_GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductGroupOrder", b =>
                {
                    b.Property<string>("GroupOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GROUP_ORDER_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("JobId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("JOB_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("ReqOrderQty")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("REQ_ORDER_QTY");

                    b.Property<decimal?>("SoldOrderQty")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SOLD_ORDER_QTY");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("GroupOrderId");

                    b.HasIndex(new[] { "JobId" }, "GROUP_ORDER_JOB");

                    b.HasIndex(new[] { "StatusId" }, "GROUP_ORDER_STATUS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_GRP_ORR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_GRP_ORR_TXSTP");

                    b.HasIndex(new[] { "ProductId" }, "PROD_GROUP_ORDER");

                    b.ToTable("PRODUCT_GROUP_ORDER", (string)null);
                });

            modelBuilder.Entity("Domain.ProductKeywordNew", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("Keyword")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("KEYWORD");

                    b.Property<string>("KeywordTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("KEYWORD_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("RelevancyWeight")
                        .HasColumnType("int")
                        .HasColumnName("RELEVANCY_WEIGHT");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("ProductId", "Keyword", "KeywordTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_KWD_NW_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_KWD_NW_TXSTMP");

                    b.HasIndex(new[] { "Keyword" }, "PROD_KWD_KWD_NEW");

                    b.HasIndex(new[] { "ProductId" }, "PROD_KWD_PROD_NEW");

                    b.HasIndex(new[] { "StatusId" }, "PROD_KWD_STTS");

                    b.HasIndex(new[] { "KeywordTypeId" }, "PROD_KWD_TYPE");

                    b.ToTable("PRODUCT_KEYWORD_NEW", (string)null);
                });

            modelBuilder.Entity("Domain.ProductMaint", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductMaintSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_MAINT_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IntervalMeterTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INTERVAL_METER_TYPE_ID");

                    b.Property<decimal?>("IntervalQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("INTERVAL_QUANTITY");

                    b.Property<string>("IntervalUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INTERVAL_UOM_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MaintName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MAINT_NAME");

                    b.Property<string>("MaintTemplateWorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MAINT_TEMPLATE_WORK_EFFORT_ID");

                    b.Property<string>("ProductMaintTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_MAINT_TYPE_ID");

                    b.Property<int?>("RepeatCount")
                        .HasColumnType("int")
                        .HasColumnName("REPEAT_COUNT");

                    b.HasKey("ProductId", "ProductMaintSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_MNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_MNT_TXSTMP");

                    b.HasIndex(new[] { "IntervalUomId" }, "PRODMNT_INTUOM");

                    b.HasIndex(new[] { "ProductMaintTypeId" }, "PRODMNT_MNTTYP");

                    b.HasIndex(new[] { "IntervalMeterTypeId" }, "PRODMNT_PDMTTYP");

                    b.HasIndex(new[] { "ProductId" }, "PRODMNT_PROD");

                    b.HasIndex(new[] { "MaintTemplateWorkEffortId" }, "PRODMNT_TPLHWE");

                    b.ToTable("PRODUCT_MAINT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductMaintType", b =>
                {
                    b.Property<string>("ProductMaintTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_MAINT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProductMaintTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_MNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_MNT_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "PRODMNT_TYPE_PAR");

                    b.ToTable("PRODUCT_MAINT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductManufacturingRule", b =>
                {
                    b.Property<string>("RuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RULE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductFeature")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductIdFor")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID_FOR");

                    b.Property<string>("ProductIdIn")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID_IN");

                    b.Property<string>("ProductIdInSubst")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID_IN_SUBST");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("RuleOperator")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RULE_OPERATOR");

                    b.Property<string>("RuleSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RULE_SEQ_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("RuleId");

                    b.HasIndex(new[] { "ProductFeature" }, "PRODUCT_FEAT");

                    b.HasIndex(new[] { "ProductIdFor" }, "PRODUCT_FOR");

                    b.HasIndex(new[] { "ProductIdIn" }, "PRODUCT_IN");

                    b.HasIndex(new[] { "ProductId" }, "PRODUCT_PARENT");

                    b.HasIndex(new[] { "ProductIdInSubst" }, "PRODUCT_SUBST");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_MNFCTG_RL_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_MNFCTG_RL_TXSP");

                    b.ToTable("PRODUCT_MANUFACTURING_RULE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductMeter", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductMeterTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_METER_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MeterName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("METER_NAME");

                    b.Property<string>("MeterUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("METER_UOM_ID");

                    b.HasKey("ProductId", "ProductMeterTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_MTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_MTR_TXSTMP");

                    b.HasIndex(new[] { "ProductMeterTypeId" }, "PRODMTR_MTRTYP");

                    b.HasIndex(new[] { "MeterUomId" }, "PRODMTR_MTRUOM");

                    b.HasIndex(new[] { "ProductId" }, "PRODMTR_PROD");

                    b.ToTable("PRODUCT_METER", (string)null);
                });

            modelBuilder.Entity("Domain.ProductMeterType", b =>
                {
                    b.Property<string>("ProductMeterTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_METER_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DefaultUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_UOM_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductMeterTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_MTR_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_MTR_TP_TXSTMP");

                    b.HasIndex(new[] { "DefaultUomId" }, "PRODMTRTP_DUOM");

                    b.ToTable("PRODUCT_METER_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductOrderItem", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("EngagementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENGAGEMENT_ID");

                    b.Property<string>("EngagementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENGAGEMENT_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.HasKey("OrderId", "OrderItemSeqId", "EngagementId", "EngagementItemSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_ORR_ITM_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_ORR_ITM_TXSTP");

                    b.HasIndex(new[] { "EngagementId" }, "PROD_OITEM_ENOHDR");

                    b.HasIndex(new[] { "EngagementId", "EngagementItemSeqId" }, "PROD_OITEM_ENOITM");

                    b.HasIndex(new[] { "OrderId" }, "PROD_OITEM_OHDR");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "PROD_OITEM_OITEM");

                    b.HasIndex(new[] { "ProductId" }, "PROD_OITEM_PROD");

                    b.ToTable("PRODUCT_ORDER_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPaymentMethodType", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("PaymentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                    b.Property<string>("ProductPricePurposeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_PURPOSE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductId", "PaymentMethodTypeId", "ProductPricePurposeId", "FromDate");

                    b.HasIndex(new[] { "PaymentMethodTypeId" }, "PROD_PMT_PMT");

                    b.HasIndex(new[] { "ProductPricePurposeId" }, "PROD_PMT_PPRP");

                    b.HasIndex(new[] { "ProductId" }, "PROD_PMT_PROD");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_PMT_MTD_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_PMT_MTD_TP_TXS");

                    b.ToTable("PRODUCT_PAYMENT_METHOD_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPrice", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductPriceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_TYPE_ID");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomPriceCalcService")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_PRICE_CALC_SERVICE");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("PRICE");

                    b.Property<decimal?>("PriceWithTax")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("PRICE_WITH_TAX");

                    b.Property<decimal?>("PriceWithoutTax")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("PRICE_WITHOUT_TAX");

                    b.Property<string>("ProductPricePurposeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_PURPOSE_ID");

                    b.Property<string>("ProductStoreGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_GROUP_ID");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<decimal?>("TaxAmount")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("TAX_AMOUNT");

                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.Property<string>("TaxInPrice")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TAX_IN_PRICE")
                        .IsFixedLength();

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("TAX_PERCENTAGE");

                    b.Property<string>("TermUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERM_UOM_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductId", "ProductPriceTypeId", "CurrencyUomId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_PRC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_PRC_TXSTMP");

                    b.HasIndex(new[] { "ProductId", "ProductPriceTypeId", "CurrencyUomId" }, "PRD_PRC_GENLKP");

                    b.HasIndex(new[] { "TaxAuthGeoId" }, "PROD_PRC_TAXGEO");

                    b.HasIndex(new[] { "TaxAuthPartyId" }, "PROD_PRC_TAXPTY");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "PROD_PRICE_CBUL");

                    b.HasIndex(new[] { "CustomPriceCalcService" }, "PROD_PRICE_CMET");

                    b.HasIndex(new[] { "CurrencyUomId" }, "PROD_PRICE_CUOM");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "PROD_PRICE_LMBUL");

                    b.HasIndex(new[] { "ProductId" }, "PROD_PRICE_PROD");

                    b.HasIndex(new[] { "ProductStoreGroupId" }, "PROD_PRICE_PSTG");

                    b.HasIndex(new[] { "ProductPricePurposeId" }, "PROD_PRICE_PURP");

                    b.HasIndex(new[] { "TermUomId" }, "PROD_PRICE_TUOM");

                    b.HasIndex(new[] { "ProductPriceTypeId" }, "PROD_PRICE_TYPE");

                    b.ToTable("PRODUCT_PRICE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPriceAction", b =>
                {
                    b.Property<string>("ProductPriceRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_RULE_ID");

                    b.Property<string>("ProductPriceActionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_ACTION_SEQ_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductPriceActionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_ACTION_TYPE_ID");

                    b.Property<string>("RateCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("RATE_CODE");

                    b.HasKey("ProductPriceRuleId", "ProductPriceActionSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRC_ACN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRC_ACN_TXSTP");

                    b.HasIndex(new[] { "ProductPriceRuleId" }, "PROD_PCACT_RL");

                    b.HasIndex(new[] { "ProductPriceActionTypeId" }, "PROD_PCACT_TYPE");

                    b.ToTable("PRODUCT_PRICE_ACTION", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPriceActionType", b =>
                {
                    b.Property<string>("ProductPriceActionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_ACTION_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductPriceActionTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_PRC_ACN_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_PRC_ACN_TP_TXS");

                    b.ToTable("PRODUCT_PRICE_ACTION_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPriceAutoNotice", b =>
                {
                    b.Property<string>("ProductPriceNoticeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_NOTICE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("RunDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RUN_DATE");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductPriceNoticeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_PRC_AT_NTC_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_PRC_AT_NTC_TXS");

                    b.ToTable("PRODUCT_PRICE_AUTO_NOTICE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPriceChange", b =>
                {
                    b.Property<string>("ProductPriceChangeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_CHANGE_ID");

                    b.Property<string>("ChangedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGED_BY_USER_LOGIN");

                    b.Property<DateTime?>("ChangedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CHANGED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("OLD_PRICE");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PRICE");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductPricePurposeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_PURPOSE_ID");

                    b.Property<string>("ProductPriceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_TYPE_ID");

                    b.Property<string>("ProductStoreGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_GROUP_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductPriceChangeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRC_CHG_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRC_CHG_TXSTP");

                    b.HasIndex(new[] { "ChangedByUserLogin" }, "PROD_PRCHNG_CHUL");

                    b.ToTable("PRODUCT_PRICE_CHANGE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPriceCond", b =>
                {
                    b.Property<string>("ProductPriceRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_RULE_ID");

                    b.Property<string>("ProductPriceCondSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_COND_SEQ_ID");

                    b.Property<string>("CondValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COND_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("InputParamEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INPUT_PARAM_ENUM_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OperatorEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OPERATOR_ENUM_ID");

                    b.HasKey("ProductPriceRuleId", "ProductPriceCondSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRC_CND_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRC_CND_TXSTP");

                    b.HasIndex(new[] { "InputParamEnumId" }, "PROD_PCCOND_INENUM");

                    b.HasIndex(new[] { "OperatorEnumId" }, "PROD_PCCOND_OPENUM");

                    b.HasIndex(new[] { "ProductPriceRuleId" }, "PROD_PCCOND_RULE");

                    b.ToTable("PRODUCT_PRICE_COND", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPricePurpose", b =>
                {
                    b.Property<string>("ProductPricePurposeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_PURPOSE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductPricePurposeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRC_PRS_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRC_PRS_TXSTP");

                    b.ToTable("PRODUCT_PRICE_PURPOSE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPriceRule", b =>
                {
                    b.Property<string>("ProductPriceRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_RULE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("IsSale")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_SALE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RuleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RULE_NAME");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductPriceRuleId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRC_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRC_RL_TXSTMP");

                    b.ToTable("PRODUCT_PRICE_RULE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPriceType", b =>
                {
                    b.Property<string>("ProductPriceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PRICE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductPriceTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRC_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRC_TP_TXSTMP");

                    b.ToTable("PRODUCT_PRICE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromo", b =>
                {
                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<decimal?>("BillbackFactor")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("BILLBACK_FACTOR");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OverrideOrgPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OVERRIDE_ORG_PARTY_ID");

                    b.Property<string>("PromoName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PROMO_NAME");

                    b.Property<string>("PromoText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PROMO_TEXT");

                    b.Property<string>("RequireCode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_CODE")
                        .IsFixedLength();

                    b.Property<string>("ShowToCustomer")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SHOW_TO_CUSTOMER")
                        .IsFixedLength();

                    b.Property<int?>("UseLimitPerCustomer")
                        .HasColumnType("int")
                        .HasColumnName("USE_LIMIT_PER_CUSTOMER");

                    b.Property<int?>("UseLimitPerOrder")
                        .HasColumnType("int")
                        .HasColumnName("USE_LIMIT_PER_ORDER");

                    b.Property<int?>("UseLimitPerPromotion")
                        .HasColumnType("int")
                        .HasColumnName("USE_LIMIT_PER_PROMOTION");

                    b.Property<string>("UserEntered")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("USER_ENTERED")
                        .IsFixedLength();

                    b.HasKey("ProductPromoId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_PRM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_PRM_TXSTMP");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "PROD_PRMO_CUL");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "PROD_PRMO_LMCUL");

                    b.HasIndex(new[] { "OverrideOrgPartyId" }, "PROD_PRMO_OPA");

                    b.ToTable("PRODUCT_PROMO", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromoAction", b =>
                {
                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<string>("ProductPromoRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_RULE_ID");

                    b.Property<string>("ProductPromoActionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_METHOD_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderAdjustmentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ADJUSTMENT_TYPE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductPromoActionEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ACTION_ENUM_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERVICE_NAME");

                    b.Property<string>("UseCartQuantity")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("USE_CART_QUANTITY")
                        .IsFixedLength();

                    b.HasKey("ProductPromoId", "ProductPromoRuleId", "ProductPromoActionSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRM_ACN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRM_ACN_TXSTP");

                    b.HasIndex(new[] { "CustomMethodId" }, "PROD_PRACT_CMET");

                    b.HasIndex(new[] { "ProductPromoActionEnumId" }, "PROD_PRACT_ENUM");

                    b.HasIndex(new[] { "OrderAdjustmentTypeId" }, "PROD_PRACT_OATYPE");

                    b.HasIndex(new[] { "ProductPromoId" }, "PROD_PRACT_PR");

                    b.HasIndex(new[] { "ProductPromoId", "ProductPromoRuleId" }, "PROD_PRACT_RL");

                    b.ToTable("PRODUCT_PROMO_ACTION", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromoCategory", b =>
                {
                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<string>("ProductPromoRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_RULE_ID");

                    b.Property<string>("ProductPromoActionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                    b.Property<string>("ProductPromoCondSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_COND_SEQ_ID");

                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("AndGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AND_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IncludeSubCategories")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_SUB_CATEGORIES")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductPromoApplEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_APPL_ENUM_ID");

                    b.HasKey("ProductPromoId", "ProductPromoRuleId", "ProductPromoActionSeqId", "ProductPromoCondSeqId", "ProductCategoryId", "AndGroupId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRM_CTR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRM_CTR_TXSTP");

                    b.HasIndex(new[] { "ProductPromoApplEnumId" }, "PROD_PRCAT_ENUM");

                    b.HasIndex(new[] { "ProductCategoryId" }, "PROD_PRCAT_PRCAT");

                    b.HasIndex(new[] { "ProductPromoId" }, "PROD_PRCAT_PROMO");

                    b.ToTable("PRODUCT_PROMO_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromoCode", b =>
                {
                    b.Property<string>("ProductPromoCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_CODE_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<string>("RequireEmailOrParty")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_EMAIL_OR_PARTY")
                        .IsFixedLength();

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<int?>("UseLimitPerCode")
                        .HasColumnType("int")
                        .HasColumnName("USE_LIMIT_PER_CODE");

                    b.Property<int?>("UseLimitPerCustomer")
                        .HasColumnType("int")
                        .HasColumnName("USE_LIMIT_PER_CUSTOMER");

                    b.Property<string>("UserEntered")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("USER_ENTERED")
                        .IsFixedLength();

                    b.HasKey("ProductPromoCodeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRM_CD_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRM_CD_TXSTMP");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "PROD_PRCOD_CUL");

                    b.HasIndex(new[] { "LastModifiedByUserLogin" }, "PROD_PRCOD_LMCUL");

                    b.HasIndex(new[] { "ProductPromoId" }, "PROD_PRCOD_PROMO");

                    b.ToTable("PRODUCT_PROMO_CODE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromoCodeEmail", b =>
                {
                    b.Property<string>("ProductPromoCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_CODE_ID");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("EMAIL_ADDRESS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductPromoCodeId", "EmailAddress");

                    b.HasIndex(new[] { "ProductPromoCodeId" }, "PROD_PRCDE_OPCD");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_PRM_CD_EML_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_PRM_CD_EML_TXS");

                    b.ToTable("PRODUCT_PROMO_CODE_EMAIL", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromoCodeParty", b =>
                {
                    b.Property<string>("ProductPromoCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_CODE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductPromoCodeId", "PartyId");

                    b.HasIndex(new[] { "ProductPromoCodeId" }, "PROD_PRCDP_PCD");

                    b.HasIndex(new[] { "PartyId" }, "PROD_PRCDP_PRTY");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_PRM_CD_PRT_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_PRM_CD_PRT_TXS");

                    b.ToTable("PRODUCT_PROMO_CODE_PARTY", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromoCond", b =>
                {
                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<string>("ProductPromoRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_RULE_ID");

                    b.Property<string>("ProductPromoCondSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_COND_SEQ_ID");

                    b.Property<string>("CondValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COND_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_METHOD_ID");

                    b.Property<string>("InputParamEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INPUT_PARAM_ENUM_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OperatorEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OPERATOR_ENUM_ID");

                    b.Property<string>("OtherValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("OTHER_VALUE");

                    b.HasKey("ProductPromoId", "ProductPromoRuleId", "ProductPromoCondSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRM_CND_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRM_CND_TXSTP");

                    b.HasIndex(new[] { "CustomMethodId" }, "PROD_PRCOND_CMETH");

                    b.HasIndex(new[] { "InputParamEnumId" }, "PROD_PRCOND_INENUM");

                    b.HasIndex(new[] { "OperatorEnumId" }, "PROD_PRCOND_OPENUM");

                    b.HasIndex(new[] { "ProductPromoId" }, "PROD_PRCOND_PROMO");

                    b.HasIndex(new[] { "ProductPromoId", "ProductPromoRuleId" }, "PROD_PRCOND_RULE");

                    b.ToTable("PRODUCT_PROMO_COND", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromoContent", b =>
                {
                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("ProductPromoContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductPromoId", "ContentId", "ProductPromoContentTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRM_CNT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRM_CNT_TXSTP");

                    b.HasIndex(new[] { "ContentId" }, "PRODPR_CNT_CNT");

                    b.HasIndex(new[] { "ProductPromoId" }, "PRODPR_CNT_PROD_PR");

                    b.HasIndex(new[] { "ProductPromoContentTypeId" }, "PRODPR_CNT_TYPE");

                    b.ToTable("PRODUCT_PROMO_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromoProduct", b =>
                {
                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<string>("ProductPromoRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_RULE_ID");

                    b.Property<string>("ProductPromoActionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                    b.Property<string>("ProductPromoCondSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_COND_SEQ_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductPromoApplEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_APPL_ENUM_ID");

                    b.HasKey("ProductPromoId", "ProductPromoRuleId", "ProductPromoActionSeqId", "ProductPromoCondSeqId", "ProductId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRM_PRT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRM_PRT_TXSTP");

                    b.HasIndex(new[] { "ProductPromoApplEnumId" }, "PROD_PRPRD_ENUM");

                    b.HasIndex(new[] { "ProductId" }, "PROD_PRPRD_PROD");

                    b.HasIndex(new[] { "ProductPromoId" }, "PROD_PRPRD_PROMO");

                    b.ToTable("PRODUCT_PROMO_PRODUCT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromoRule", b =>
                {
                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<string>("ProductPromoRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_RULE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RuleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RULE_NAME");

                    b.HasKey("ProductPromoId", "ProductPromoRuleId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRM_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRM_RL_TXSTMP");

                    b.HasIndex(new[] { "ProductPromoId" }, "PROD_PRRLE_PROMO");

                    b.ToTable("PRODUCT_PROMO_RULE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductPromoUse", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("PromoSequenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROMO_SEQUENCE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ProductPromoCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_CODE_ID");

                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<decimal?>("QuantityLeftInActions")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_LEFT_IN_ACTIONS");

                    b.Property<decimal?>("TotalDiscountAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TOTAL_DISCOUNT_AMOUNT");

                    b.HasKey("OrderId", "PromoSequenceId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_PRM_US_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_PRM_US_TXSTMP");

                    b.HasIndex(new[] { "ProductPromoCodeId", "PartyId" }, "PRODPRUSE_PCDPTY");

                    b.HasIndex(new[] { "ProductPromoId", "PartyId" }, "PRODPRUSE_PRMPTY");

                    b.HasIndex(new[] { "ProductPromoCodeId" }, "PROD_PRUSE_CODE");

                    b.HasIndex(new[] { "OrderId" }, "PROD_PRUSE_ORDR");

                    b.HasIndex(new[] { "ProductPromoId" }, "PROD_PRUSE_PROMO");

                    b.HasIndex(new[] { "PartyId" }, "PROD_PRUSE_PTY");

                    b.ToTable("PRODUCT_PROMO_USE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductReview", b =>
                {
                    b.Property<string>("ProductReviewId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_REVIEW_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PostedAnonymous")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("POSTED_ANONYMOUS")
                        .IsFixedLength();

                    b.Property<DateTime?>("PostedDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("POSTED_DATE_TIME");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("ProductRating")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PRODUCT_RATING");

                    b.Property<string>("ProductReview1")
                        .HasColumnType("text")
                        .HasColumnName("PRODUCT_REVIEW");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.HasKey("ProductReviewId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_RVW_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_RVW_TXSTMP");

                    b.HasIndex(new[] { "ProductStoreId" }, "PROD_REVIEW_PRDSTR");

                    b.HasIndex(new[] { "ProductId" }, "PROD_REVIEW_PROD");

                    b.HasIndex(new[] { "StatusId" }, "PROD_REVIEW_STTS");

                    b.HasIndex(new[] { "UserLoginId" }, "PROD_REVIEW_ULH");

                    b.ToTable("PRODUCT_REVIEW", (string)null);
                });

            modelBuilder.Entity("Domain.ProductRole", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_RL_TXSTMP");

                    b.HasIndex(new[] { "ProductId" }, "PROD_RLE_PRODUCT");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PROD_RLE_PTYRLE");

                    b.ToTable("PRODUCT_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductSearchConstraint", b =>
                {
                    b.Property<string>("ProductSearchResultId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_SEARCH_RESULT_ID");

                    b.Property<string>("ConstraintSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONSTRAINT_SEQ_ID");

                    b.Property<string>("AnyPrefix")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ANY_PREFIX")
                        .IsFixedLength();

                    b.Property<string>("AnySuffix")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ANY_SUFFIX")
                        .IsFixedLength();

                    b.Property<string>("ConstraintName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONSTRAINT_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("HighValue")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("HIGH_VALUE");

                    b.Property<string>("IncludeSubCategories")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_SUB_CATEGORIES")
                        .IsFixedLength();

                    b.Property<string>("InfoString")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INFO_STRING");

                    b.Property<string>("IsAnd")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_AND")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LowValue")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LOW_VALUE");

                    b.Property<string>("RemoveStems")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REMOVE_STEMS")
                        .IsFixedLength();

                    b.HasKey("ProductSearchResultId", "ConstraintSeqId");

                    b.HasIndex(new[] { "ProductSearchResultId" }, "PROD_SCHRSI_RES");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_SRH_CNSTT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_SRH_CNSTT_TXSP");

                    b.ToTable("PRODUCT_SEARCH_CONSTRAINT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductSearchResult", b =>
                {
                    b.Property<string>("ProductSearchResultId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_SEARCH_RESULT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IsAscending")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_ASCENDING")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NumResults")
                        .HasColumnType("int")
                        .HasColumnName("NUM_RESULTS");

                    b.Property<string>("OrderByName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ORDER_BY_NAME");

                    b.Property<DateTime?>("SearchDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SEARCH_DATE");

                    b.Property<double?>("SecondsTotal")
                        .HasColumnType("double")
                        .HasColumnName("SECONDS_TOTAL");

                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.HasKey("ProductSearchResultId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_SRH_RST_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_SRH_RST_TXSTP");

                    b.ToTable("PRODUCT_SEARCH_RESULT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStore", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("AddToCartRemoveIncompat")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ADD_TO_CART_REMOVE_INCOMPAT")
                        .IsFixedLength();

                    b.Property<string>("AddToCartReplaceUpsell")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ADD_TO_CART_REPLACE_UPSELL")
                        .IsFixedLength();

                    b.Property<string>("AllocateInventory")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALLOCATE_INVENTORY")
                        .IsFixedLength();

                    b.Property<string>("AllowComment")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALLOW_COMMENT")
                        .IsFixedLength();

                    b.Property<string>("AllowPassword")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALLOW_PASSWORD")
                        .IsFixedLength();

                    b.Property<string>("AuthDeclinedMessage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AUTH_DECLINED_MESSAGE");

                    b.Property<string>("AuthErrorMessage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AUTH_ERROR_MESSAGE");

                    b.Property<string>("AuthFraudMessage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("AUTH_FRAUD_MESSAGE");

                    b.Property<string>("AutoApproveInvoice")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTO_APPROVE_INVOICE")
                        .IsFixedLength();

                    b.Property<string>("AutoApproveOrder")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTO_APPROVE_ORDER")
                        .IsFixedLength();

                    b.Property<string>("AutoApproveReviews")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTO_APPROVE_REVIEWS")
                        .IsFixedLength();

                    b.Property<string>("AutoInvoiceDigitalItems")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTO_INVOICE_DIGITAL_ITEMS")
                        .IsFixedLength();

                    b.Property<string>("AutoOrderCcTryExp")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTO_ORDER_CC_TRY_EXP")
                        .IsFixedLength();

                    b.Property<int?>("AutoOrderCcTryLaterMax")
                        .HasColumnType("int")
                        .HasColumnName("AUTO_ORDER_CC_TRY_LATER_MAX");

                    b.Property<string>("AutoOrderCcTryLaterNsf")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTO_ORDER_CC_TRY_LATER_NSF")
                        .IsFixedLength();

                    b.Property<string>("AutoOrderCcTryOtherCards")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTO_ORDER_CC_TRY_OTHER_CARDS")
                        .IsFixedLength();

                    b.Property<string>("AutoSaveCart")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTO_SAVE_CART")
                        .IsFixedLength();

                    b.Property<string>("BalanceResOnOrderCreation")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("BALANCE_RES_ON_ORDER_CREATION")
                        .IsFixedLength();

                    b.Property<string>("CheckGcBalance")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CHECK_GC_BALANCE")
                        .IsFixedLength();

                    b.Property<string>("CheckInventory")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CHECK_INVENTORY")
                        .IsFixedLength();

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMPANY_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<int?>("DaysToCancelNonPay")
                        .HasColumnType("int")
                        .HasColumnName("DAYS_TO_CANCEL_NON_PAY");

                    b.Property<string>("DefaultCurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_CURRENCY_UOM_ID");

                    b.Property<string>("DefaultLocaleString")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("DEFAULT_LOCALE_STRING");

                    b.Property<string>("DefaultPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DEFAULT_PASSWORD");

                    b.Property<string>("DefaultSalesChannelEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEFAULT_SALES_CHANNEL_ENUM_ID");

                    b.Property<string>("DefaultTimeZoneString")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("DEFAULT_TIME_ZONE_STRING");

                    b.Property<string>("DigProdUploadCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DIG_PROD_UPLOAD_CATEGORY_ID");

                    b.Property<string>("DigitalItemApprovedStatus")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DIGITAL_ITEM_APPROVED_STATUS");

                    b.Property<string>("EnableAutoSuggestionList")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ENABLE_AUTO_SUGGESTION_LIST")
                        .IsFixedLength();

                    b.Property<string>("EnableDigProdUpload")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ENABLE_DIG_PROD_UPLOAD")
                        .IsFixedLength();

                    b.Property<string>("ExplodeOrderItems")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("EXPLODE_ORDER_ITEMS")
                        .IsFixedLength();

                    b.Property<string>("HeaderApprovedStatus")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("HEADER_APPROVED_STATUS");

                    b.Property<string>("HeaderCancelStatus")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("HEADER_CANCEL_STATUS");

                    b.Property<string>("HeaderDeclinedStatus")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("HEADER_DECLINED_STATUS");

                    b.Property<string>("InventoryFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_FACILITY_ID");

                    b.Property<string>("IsDemoStore")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_DEMO_STORE")
                        .IsFixedLength();

                    b.Property<string>("IsImmediatelyFulfilled")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_IMMEDIATELY_FULFILLED")
                        .IsFixedLength();

                    b.Property<string>("ItemApprovedStatus")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ITEM_APPROVED_STATUS");

                    b.Property<string>("ItemCancelStatus")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ITEM_CANCEL_STATUS");

                    b.Property<string>("ItemDeclinedStatus")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ITEM_DECLINED_STATUS");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ManagedByLot")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("MANAGED_BY_LOT")
                        .IsFixedLength();

                    b.Property<string>("ManualAuthIsCapture")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("MANUAL_AUTH_IS_CAPTURE")
                        .IsFixedLength();

                    b.Property<string>("OneInventoryFacility")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ONE_INVENTORY_FACILITY")
                        .IsFixedLength();

                    b.Property<string>("OrderDecimalQuantity")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ORDER_DECIMAL_QUANTITY")
                        .IsFixedLength();

                    b.Property<string>("POrderNumberPrefix")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("P_ORDER_NUMBER_PREFIX");

                    b.Property<string>("PayToPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAY_TO_PARTY_ID");

                    b.Property<string>("PrimaryStoreGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_STORE_GROUP_ID");

                    b.Property<string>("ProdSearchExcludeVariants")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PROD_SEARCH_EXCLUDE_VARIANTS")
                        .IsFixedLength();

                    b.Property<string>("ProrateShipping")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PRORATE_SHIPPING")
                        .IsFixedLength();

                    b.Property<string>("ProrateTaxes")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("PRORATE_TAXES")
                        .IsFixedLength();

                    b.Property<string>("ReqReturnInventoryReceive")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQ_RETURN_INVENTORY_RECEIVE")
                        .IsFixedLength();

                    b.Property<string>("ReqShipAddrForDigItems")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQ_SHIP_ADDR_FOR_DIG_ITEMS")
                        .IsFixedLength();

                    b.Property<string>("RequireCustomerRole")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_CUSTOMER_ROLE")
                        .IsFixedLength();

                    b.Property<string>("RequireInventory")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_INVENTORY")
                        .IsFixedLength();

                    b.Property<string>("RequirementMethodEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_METHOD_ENUM_ID");

                    b.Property<string>("ReserveInventory")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("RESERVE_INVENTORY")
                        .IsFixedLength();

                    b.Property<string>("ReserveOrderEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RESERVE_ORDER_ENUM_ID");

                    b.Property<string>("RetryFailedAuths")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("RETRY_FAILED_AUTHS")
                        .IsFixedLength();

                    b.Property<string>("SOrderNumberPrefix")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("S_ORDER_NUMBER_PREFIX");

                    b.Property<string>("SelectPaymentTypePerItem")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SELECT_PAYMENT_TYPE_PER_ITEM")
                        .IsFixedLength();

                    b.Property<string>("SetOwnerUponIssuance")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SET_OWNER_UPON_ISSUANCE")
                        .IsFixedLength();

                    b.Property<string>("ShipIfCaptureFails")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SHIP_IF_CAPTURE_FAILS")
                        .IsFixedLength();

                    b.Property<string>("ShowCheckoutGiftOptions")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SHOW_CHECKOUT_GIFT_OPTIONS")
                        .IsFixedLength();

                    b.Property<string>("ShowOutOfStockProducts")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SHOW_OUT_OF_STOCK_PRODUCTS")
                        .IsFixedLength();

                    b.Property<string>("ShowPricesWithVatTax")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SHOW_PRICES_WITH_VAT_TAX")
                        .IsFixedLength();

                    b.Property<string>("ShowTaxIsExempt")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SHOW_TAX_IS_EXEMPT")
                        .IsFixedLength();

                    b.Property<string>("SplitPayPrefPerShpGrp")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SPLIT_PAY_PREF_PER_SHP_GRP")
                        .IsFixedLength();

                    b.Property<string>("StoreCreditAccountEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STORE_CREDIT_ACCOUNT_ENUM_ID");

                    b.Property<int?>("StoreCreditValidDays")
                        .HasColumnType("int")
                        .HasColumnName("STORE_CREDIT_VALID_DAYS");

                    b.Property<string>("StoreName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("STORE_NAME");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SUBTITLE");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TITLE");

                    b.Property<string>("UsePrimaryEmailUsername")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("USE_PRIMARY_EMAIL_USERNAME")
                        .IsFixedLength();

                    b.Property<string>("VatTaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VAT_TAX_AUTH_GEO_ID");

                    b.Property<string>("VatTaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VAT_TAX_AUTH_PARTY_ID");

                    b.Property<string>("ViewCartOnAdd")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("VIEW_CART_ON_ADD")
                        .IsFixedLength();

                    b.Property<string>("VisualThemeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISUAL_THEME_ID");

                    b.HasKey("ProductStoreId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_STR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_STR_TXSTMP");

                    b.HasIndex(new[] { "DefaultCurrencyUomId" }, "PROD_STR_CURUOM");

                    b.HasIndex(new[] { "DigitalItemApprovedStatus" }, "PROD_STR_DIAPSTS");

                    b.HasIndex(new[] { "InventoryFacilityId" }, "PROD_STR_FACILITY");

                    b.HasIndex(new[] { "HeaderApprovedStatus" }, "PROD_STR_HAPSTS");

                    b.HasIndex(new[] { "HeaderCancelStatus" }, "PROD_STR_HCNSTS");

                    b.HasIndex(new[] { "HeaderDeclinedStatus" }, "PROD_STR_HDCSTS");

                    b.HasIndex(new[] { "ItemApprovedStatus" }, "PROD_STR_IAPSTS");

                    b.HasIndex(new[] { "ItemCancelStatus" }, "PROD_STR_ICNSTS");

                    b.HasIndex(new[] { "ItemDeclinedStatus" }, "PROD_STR_IDCSTS");

                    b.HasIndex(new[] { "PayToPartyId" }, "PROD_STR_PAYTOPTY");

                    b.HasIndex(new[] { "PrimaryStoreGroupId" }, "PROD_STR_PRSTRGP");

                    b.HasIndex(new[] { "ReserveOrderEnumId" }, "PROD_STR_RORDENUM");

                    b.HasIndex(new[] { "RequirementMethodEnumId" }, "PROD_STR_RQMTENUM");

                    b.HasIndex(new[] { "DefaultSalesChannelEnumId" }, "PROD_STR_SALECHN");

                    b.HasIndex(new[] { "StoreCreditAccountEnumId" }, "PROD_STR_STRCRDACT");

                    b.HasIndex(new[] { "VatTaxAuthGeoId", "VatTaxAuthPartyId" }, "PROD_STR_VATTXA");

                    b.ToTable("PRODUCT_STORE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreCatalog", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("ProdCatalogId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CATALOG_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductStoreId", "ProdCatalogId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_STR_CTG_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_STR_CTG_TXSTP");

                    b.HasIndex(new[] { "ProdCatalogId" }, "PS_CAT_CATALOG");

                    b.HasIndex(new[] { "ProductStoreId" }, "PS_CAT_PRDSTR");

                    b.ToTable("PRODUCT_STORE_CATALOG", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreEmailSetting", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("EmailType")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMAIL_TYPE");

                    b.Property<string>("BccAddress")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("BCC_ADDRESS");

                    b.Property<string>("BodyScreenLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("BODY_SCREEN_LOCATION");

                    b.Property<string>("CcAddress")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("CC_ADDRESS");

                    b.Property<string>("ContentType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONTENT_TYPE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FromAddress")
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("FROM_ADDRESS");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SUBJECT");

                    b.Property<string>("XslfoAttachScreenLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("XSLFO_ATTACH_SCREEN_LOCATION");

                    b.HasKey("ProductStoreId", "EmailType");

                    b.HasIndex(new[] { "EmailType" }, "PRDSTREM_ENUM");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDSTREM_PRDS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_EML_STG_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_EML_STG_TS");

                    b.ToTable("PRODUCT_STORE_EMAIL_SETTING", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreFacility", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductStoreId", "FacilityId", "FromDate");

                    b.HasIndex(new[] { "FacilityId" }, "PRDSTRFAC_FAC");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDSTRFAC_PRDS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_STR_FCT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_STR_FCT_TXSTP");

                    b.ToTable("PRODUCT_STORE_FACILITY", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreFinActSetting", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("FinAccountTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TYPE_ID");

                    b.Property<int?>("AccountCodeLength")
                        .HasColumnType("int")
                        .HasColumnName("ACCOUNT_CODE_LENGTH");

                    b.Property<int?>("AccountValidDays")
                        .HasColumnType("int")
                        .HasColumnName("ACCOUNT_VALID_DAYS");

                    b.Property<string>("AllowAuthToNegative")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALLOW_AUTH_TO_NEGATIVE")
                        .IsFixedLength();

                    b.Property<int?>("AuthValidDays")
                        .HasColumnType("int")
                        .HasColumnName("AUTH_VALID_DAYS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("MinBalance")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MIN_BALANCE");

                    b.Property<int?>("PinCodeLength")
                        .HasColumnType("int")
                        .HasColumnName("PIN_CODE_LENGTH");

                    b.Property<string>("PurchSurveyCopyMe")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PURCH_SURVEY_COPY_ME");

                    b.Property<string>("PurchSurveySendTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PURCH_SURVEY_SEND_TO");

                    b.Property<string>("PurchaseSurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PURCHASE_SURVEY_ID");

                    b.Property<string>("ReplenishMethodEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REPLENISH_METHOD_ENUM_ID");

                    b.Property<decimal?>("ReplenishThreshold")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("REPLENISH_THRESHOLD");

                    b.Property<string>("RequirePinCode")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_PIN_CODE")
                        .IsFixedLength();

                    b.Property<string>("ValidateGCFinAcct")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("VALIDATE_G_C_FIN_ACCT")
                        .IsFixedLength();

                    b.HasKey("ProductStoreId", "FinAccountTypeId")
                        .HasName("PK_PRODUCT_STORE_FIN_ACT_SETTI");

                    b.HasIndex(new[] { "ReplenishMethodEnumId" }, "PRSTFNAC_FARPMTD");

                    b.HasIndex(new[] { "FinAccountTypeId" }, "PRSTFNAC_FNACTP");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRSTFNAC_PRDS");

                    b.HasIndex(new[] { "PurchaseSurveyId" }, "PRSTFNAC_SRVY");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_FN_ACT_STG_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_FN_ACT_STG_TS");

                    b.ToTable("PRODUCT_STORE_FIN_ACT_SETTING", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreGroup", b =>
                {
                    b.Property<string>("ProductStoreGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PrimaryParentGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_PARENT_GROUP_ID");

                    b.Property<string>("ProductStoreGroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PRODUCT_STORE_GROUP_NAME");

                    b.Property<string>("ProductStoreGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_GROUP_TYPE_ID");

                    b.HasKey("ProductStoreGroupId");

                    b.HasIndex(new[] { "PrimaryParentGroupId" }, "PRDSTR_GP_PGRP");

                    b.HasIndex(new[] { "ProductStoreGroupTypeId" }, "PRDSTR_GP_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_STR_GRP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_STR_GRP_TXSTP");

                    b.ToTable("PRODUCT_STORE_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreGroupMember", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("ProductStoreGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_GROUP_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductStoreId", "ProductStoreGroupId", "FromDate");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDSTR_MEM_PRDSTR");

                    b.HasIndex(new[] { "ProductStoreGroupId" }, "PRDSTR_MEM_PSGRP");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_GRP_MMR_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_GRP_MMR_TS");

                    b.ToTable("PRODUCT_STORE_GROUP_MEMBER", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreGroupRole", b =>
                {
                    b.Property<string>("ProductStoreGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_GROUP_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductStoreGroupId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_GRP_RL_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_GRP_RL_TXS");

                    b.HasIndex(new[] { "ProductStoreGroupId" }, "PSGRP_RLE_PSGP");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PSGRP_RLE_PTRLE");

                    b.ToTable("PRODUCT_STORE_GROUP_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreGroupRollup", b =>
                {
                    b.Property<string>("ProductStoreGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_GROUP_ID");

                    b.Property<string>("ParentGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_GROUP_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductStoreGroupId", "ParentGroupId", "FromDate");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_GRP_RLP_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_GRP_RLP_TS");

                    b.HasIndex(new[] { "ProductStoreGroupId" }, "PSGRP_RLP_CURRENT");

                    b.HasIndex(new[] { "ParentGroupId" }, "PSGRP_RLP_PARENT");

                    b.ToTable("PRODUCT_STORE_GROUP_ROLLUP", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreGroupType", b =>
                {
                    b.Property<string>("ProductStoreGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_GROUP_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductStoreGroupTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_GRP_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_GRP_TP_TXS");

                    b.ToTable("PRODUCT_STORE_GROUP_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreKeywordOvrd", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("Keyword")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("KEYWORD");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("Target")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TARGET");

                    b.Property<string>("TargetTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TARGET_TYPE_ENUM_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductStoreId", "Keyword", "FromDate");

                    b.HasIndex(new[] { "TargetTypeEnumId" }, "PRDSTRKWO_ENM");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDSTRKWO_PRDS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_KWD_OVD_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_KWD_OVD_TS");

                    b.ToTable("PRODUCT_STORE_KEYWORD_OVRD", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStorePaymentSetting", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("PaymentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                    b.Property<string>("PaymentServiceTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_SERVICE_TYPE_ENUM_ID");

                    b.Property<string>("ApplyToAllProducts")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("APPLY_TO_ALL_PRODUCTS")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PaymentCustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_CUSTOM_METHOD_ID");

                    b.Property<string>("PaymentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("PaymentPropertiesPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PAYMENT_PROPERTIES_PATH");

                    b.Property<string>("PaymentService")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PAYMENT_SERVICE");

                    b.HasKey("ProductStoreId", "PaymentMethodTypeId", "PaymentServiceTypeEnumId")
                        .HasName("PK_PRODUCT_STORE_PAYMENT_SETTI");

                    b.HasIndex(new[] { "PaymentCustomMethodId" }, "PRDS_PS_CUS_MET");

                    b.HasIndex(new[] { "PaymentServiceTypeEnumId" }, "PRDS_PS_ENUM");

                    b.HasIndex(new[] { "PaymentGatewayConfigId" }, "PRDS_PS_PGC");

                    b.HasIndex(new[] { "PaymentMethodTypeId" }, "PRDS_PS_PMNTTP");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDS_PS_PRDS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_PMT_STG_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_PMT_STG_TS");

                    b.ToTable("PRODUCT_STORE_PAYMENT_SETTING", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStorePromoAppl", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ManualOnly")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("MANUAL_ONLY")
                        .IsFixedLength();

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductStoreId", "ProductPromoId", "FromDate");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDSTRPRMO_PRDS");

                    b.HasIndex(new[] { "ProductPromoId" }, "PRDSTRPRMO_PRMO");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_PRM_APL_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_PRM_APL_TS");

                    b.ToTable("PRODUCT_STORE_PROMO_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreRole", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "RoleTypeId", "ProductStoreId", "FromDate");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDSTRRLE_PRDS");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "PRDSTRRLE_PRLE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_STR_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_STR_RL_TXSTMP");

                    b.ToTable("PRODUCT_STORE_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreShipmentMeth", b =>
                {
                    b.Property<string>("ProductStoreShipMethId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_SHIP_METH_ID");

                    b.Property<string>("AllowCompanyAddr")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALLOW_COMPANY_ADDR")
                        .IsFixedLength();

                    b.Property<string>("AllowUspsAddr")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALLOW_USPS_ADDR")
                        .IsFixedLength();

                    b.Property<decimal?>("AllowancePercent")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("ALLOWANCE_PERCENT");

                    b.Property<string>("CompanyPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMPANY_PARTY_ID");

                    b.Property<string>("ConfigProps")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONFIG_PROPS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ExcludeFeatureGroup")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXCLUDE_FEATURE_GROUP");

                    b.Property<string>("ExcludeGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXCLUDE_GEO_ID");

                    b.Property<string>("IncludeFeatureGroup")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INCLUDE_FEATURE_GROUP");

                    b.Property<string>("IncludeGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INCLUDE_GEO_ID");

                    b.Property<string>("IncludeNoChargeItems")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_NO_CHARGE_ITEMS")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("MaxSize")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("MAX_SIZE");

                    b.Property<decimal?>("MaxTotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MAX_TOTAL");

                    b.Property<decimal?>("MaxWeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("MAX_WEIGHT");

                    b.Property<decimal?>("MinSize")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("MIN_SIZE");

                    b.Property<decimal?>("MinTotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MIN_TOTAL");

                    b.Property<decimal?>("MinWeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("MIN_WEIGHT");

                    b.Property<decimal?>("MinimumPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MINIMUM_PRICE");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("RequireCompanyAddr")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_COMPANY_ADDR")
                        .IsFixedLength();

                    b.Property<string>("RequireUspsAddr")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_USPS_ADDR")
                        .IsFixedLength();

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUMBER");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERVICE_NAME");

                    b.Property<string>("ShipmentCustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_CUSTOM_METHOD_ID");

                    b.Property<string>("ShipmentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.HasKey("ProductStoreShipMethId");

                    b.HasIndex(new[] { "ShipmentCustomMethodId" }, "PRDS_SM_CUS_MET");

                    b.HasIndex(new[] { "ShipmentGatewayConfigId" }, "PRDS_SM_SGC");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_SHT_MTH_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_SHT_MTH_TS");

                    b.HasIndex(new[] { "ShipmentMethodTypeId" }, "SHIPMENTMETHODTYPE");

                    b.ToTable("PRODUCT_STORE_SHIPMENT_METH", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreSurveyAppl", b =>
                {
                    b.Property<string>("ProductStoreSurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_SURVEY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("GROUP_NAME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("ResultTemplate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RESULT_TEMPLATE");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<string>("SurveyApplTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_APPL_TYPE_ID");

                    b.Property<string>("SurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_ID");

                    b.Property<string>("SurveyTemplate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SURVEY_TEMPLATE");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ProductStoreSurveyId");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDSTRSVY_PRDS");

                    b.HasIndex(new[] { "SurveyApplTypeId" }, "PRDSTRSVY_SATP");

                    b.HasIndex(new[] { "SurveyId" }, "PRDSTRSVY_SRVY");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_SRV_APL_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_SRV_APL_TS");

                    b.ToTable("PRODUCT_STORE_SURVEY_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreTelecomSetting", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("TelecomMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TELECOM_METHOD_TYPE_ID");

                    b.Property<string>("TelecomMsgTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TELECOM_MSG_TYPE_ENUM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TelecomCustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TELECOM_CUSTOM_METHOD_ID");

                    b.Property<string>("TelecomGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TELECOM_GATEWAY_CONFIG_ID");

                    b.HasKey("ProductStoreId", "TelecomMethodTypeId", "TelecomMsgTypeEnumId")
                        .HasName("PK_PRODUCT_STORE_TELECOM_SETTI");

                    b.HasIndex(new[] { "TelecomCustomMethodId" }, "PRDS_TS_CUS_MET");

                    b.HasIndex(new[] { "TelecomMsgTypeEnumId" }, "PRDS_TS_ENUM");

                    b.HasIndex(new[] { "TelecomGatewayConfigId" }, "PRDS_TS_PGC");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDS_TS_PRDS");

                    b.HasIndex(new[] { "TelecomMethodTypeId" }, "PRDS_TS_TELTP");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_TLM_STG_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_TLM_STG_TS");

                    b.ToTable("PRODUCT_STORE_TELECOM_SETTING", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreVendorPayment", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("VendorPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VENDOR_PARTY_ID");

                    b.Property<string>("PaymentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_TYPE_ID");

                    b.Property<string>("CreditCardEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CREDIT_CARD_ENUM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductStoreId", "VendorPartyId", "PaymentMethodTypeId", "CreditCardEnumId")
                        .HasName("PK_PRODUCT_STORE_VENDOR_PAYMEN");

                    b.HasIndex(new[] { "CreditCardEnumId" }, "PRDSTRVPM_CCEN");

                    b.HasIndex(new[] { "PaymentMethodTypeId" }, "PRDSTRVPM_PMMT");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDSTRVPM_PRDS");

                    b.HasIndex(new[] { "VendorPartyId" }, "PRDSTRVPM_VPTY");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_VNR_PMT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_VNR_PMT_TS");

                    b.ToTable("PRODUCT_STORE_VENDOR_PAYMENT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductStoreVendorShipment", b =>
                {
                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("VendorPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VENDOR_PARTY_ID");

                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.Property<string>("CarrierPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CARRIER_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductStoreId", "VendorPartyId", "ShipmentMethodTypeId", "CarrierPartyId")
                        .HasName("PK_PRODUCT_STORE_VENDOR_SHIPME");

                    b.HasIndex(new[] { "CarrierPartyId" }, "PRDSTRVSH_CPTY");

                    b.HasIndex(new[] { "ProductStoreId" }, "PRDSTRVSH_PRDS");

                    b.HasIndex(new[] { "ShipmentMethodTypeId" }, "PRDSTRVSH_SHMT");

                    b.HasIndex(new[] { "VendorPartyId" }, "PRDSTRVSH_VPTY");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_STR_VNR_SHT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_STR_VNR_SHT_TS");

                    b.ToTable("PRODUCT_STORE_VENDOR_SHIPMENT", (string)null);
                });

            modelBuilder.Entity("Domain.ProductSubscriptionResource", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("SubscriptionResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_RESOURCE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("AutomaticExtend")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTOMATIC_EXTEND")
                        .IsFixedLength();

                    b.Property<int?>("AvailableTime")
                        .HasColumnType("int")
                        .HasColumnName("AVAILABLE_TIME");

                    b.Property<string>("AvailableTimeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AVAILABLE_TIME_UOM_ID");

                    b.Property<int?>("CanclAutmExtTime")
                        .HasColumnType("int")
                        .HasColumnName("CANCL_AUTM_EXT_TIME");

                    b.Property<string>("CanclAutmExtTimeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CANCL_AUTM_EXT_TIME_UOM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<int?>("GracePeriodOnExpiry")
                        .HasColumnType("int")
                        .HasColumnName("GRACE_PERIOD_ON_EXPIRY");

                    b.Property<string>("GracePeriodOnExpiryUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GRACE_PERIOD_ON_EXPIRY_UOM_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("MaxLifeTime")
                        .HasColumnType("int")
                        .HasColumnName("MAX_LIFE_TIME");

                    b.Property<string>("MaxLifeTimeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MAX_LIFE_TIME_UOM_ID");

                    b.Property<DateTime?>("PurchaseFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PURCHASE_FROM_DATE");

                    b.Property<DateTime?>("PurchaseThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PURCHASE_THRU_DATE");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<int?>("UseCountLimit")
                        .HasColumnType("int")
                        .HasColumnName("USE_COUNT_LIMIT");

                    b.Property<string>("UseRoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USE_ROLE_TYPE_ID");

                    b.Property<int?>("UseTime")
                        .HasColumnType("int")
                        .HasColumnName("USE_TIME");

                    b.Property<string>("UseTimeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USE_TIME_UOM_ID");

                    b.HasKey("ProductId", "SubscriptionResourceId", "FromDate")
                        .HasName("PK_PRODUCT_SUBSCRIPTION_RESOUR");

                    b.HasIndex(new[] { "AvailableTimeUomId" }, "PROD_SBRS_ATU");

                    b.HasIndex(new[] { "CanclAutmExtTimeUomId" }, "PROD_SBRS_CTU");

                    b.HasIndex(new[] { "GracePeriodOnExpiryUomId" }, "PROD_SBRS_GTU");

                    b.HasIndex(new[] { "MaxLifeTimeUomId" }, "PROD_SBRS_MTU");

                    b.HasIndex(new[] { "ProductId" }, "PROD_SBRS_PROD");

                    b.HasIndex(new[] { "SubscriptionResourceId" }, "PROD_SBRS_SBRS");

                    b.HasIndex(new[] { "UseRoleTypeId" }, "PROD_SBRS_URT");

                    b.HasIndex(new[] { "UseTimeUomId" }, "PROD_SBRS_UTU");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRT_SBSCN_RSC_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRT_SBSCN_RSC_TXSP");

                    b.ToTable("PRODUCT_SUBSCRIPTION_RESOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductType", b =>
                {
                    b.Property<string>("ProductTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<string>("IsDigital")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_DIGITAL")
                        .IsFixedLength();

                    b.Property<string>("IsPhysical")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_PHYSICAL")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ProductTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDCT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDCT_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "PROD_TYPE_PARENT");

                    b.ToTable("PRODUCT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ProductTypeAttr", b =>
                {
                    b.Property<string>("ProductTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductTypeId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRDT_TP_ATR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRDT_TP_ATR_TXSTMP");

                    b.HasIndex(new[] { "ProductTypeId" }, "PROD_TYPE_ATTR");

                    b.ToTable("PRODUCT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.ProtectedView", b =>
                {
                    b.Property<string>("GroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GROUP_ID");

                    b.Property<string>("ViewNameId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("VIEW_NAME_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("MaxHits")
                        .HasColumnType("int")
                        .HasColumnName("MAX_HITS");

                    b.Property<int?>("MaxHitsDuration")
                        .HasColumnType("int")
                        .HasColumnName("MAX_HITS_DURATION");

                    b.Property<int?>("TarpitDuration")
                        .HasColumnType("int")
                        .HasColumnName("TARPIT_DURATION");

                    b.HasKey("GroupId", "ViewNameId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRTCTD_VW_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRTCTD_VW_TXSTMP");

                    b.HasIndex(new[] { "GroupId" }, "VIEW_SECGRP_GRP");

                    b.ToTable("PROTECTED_VIEW", (string)null);
                });

            modelBuilder.Entity("Domain.ProtocolType", b =>
                {
                    b.Property<string>("ProtocolTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROTOCOL_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProtocolName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PROTOCOL_NAME");

                    b.HasKey("ProtocolTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "PRTCL_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "PRTCL_TP_TXSTMP");

                    b.ToTable("PROTOCOL_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.QuantityBreak", b =>
                {
                    b.Property<string>("QuantityBreakId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUANTITY_BREAK_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("FromQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("FROM_QUANTITY");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("QuantityBreakTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUANTITY_BREAK_TYPE_ID");

                    b.Property<decimal?>("ThruQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("THRU_QUANTITY");

                    b.HasKey("QuantityBreakId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QNTT_BRK_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QNTT_BRK_TXSTMP");

                    b.HasIndex(new[] { "QuantityBreakTypeId" }, "QUANT_BRK_TYPE");

                    b.ToTable("QUANTITY_BREAK", (string)null);
                });

            modelBuilder.Entity("Domain.QuantityBreakType", b =>
                {
                    b.Property<string>("QuantityBreakTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUANTITY_BREAK_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("QuantityBreakTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QNTT_BRK_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QNTT_BRK_TP_TXSTMP");

                    b.ToTable("QUANTITY_BREAK_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Quote", b =>
                {
                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<int?>("CurrentMileage")
                        .HasColumnType("int")
                        .HasColumnName("CURRENT_MILEAGE");

                    b.Property<string>("CustomerRemarks")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CUSTOMER_REMARKS");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("GrandTotal")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("GRAND_TOTAL");

                    b.Property<string>("InternalRemarks")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INTERNAL_REMARKS");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ISSUE_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("QuoteName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("QUOTE_NAME");

                    b.Property<string>("QuoteTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_TYPE_ID");

                    b.Property<string>("SalesChannelEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_CHANNEL_ENUM_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime>("ValidFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("VALID_FROM_DATE");

                    b.Property<DateTime>("ValidThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("VALID_THRU_DATE");

                    b.Property<string>("VehicleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VEHICLE_ID");

                    b.HasKey("QuoteId");

                    b.HasIndex("VehicleId");

                    b.HasIndex(new[] { "SalesChannelEnumId" }, "QUOTE_CHANNEL");

                    b.HasIndex(new[] { "CurrencyUomId" }, "QUOTE_CUOM");

                    b.HasIndex(new[] { "ProductStoreId" }, "QUOTE_PRDS");

                    b.HasIndex(new[] { "PartyId" }, "QUOTE_PRTY");

                    b.HasIndex(new[] { "QuoteTypeId" }, "QUOTE_QTTYP");

                    b.HasIndex(new[] { "StatusId" }, "QUOTE_STATUS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QUOTE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QUOTE_TXSTMP");

                    b.ToTable("QUOTE", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteAdjustment", b =>
                {
                    b.Property<string>("QuoteAdjustmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ADJUSTMENT_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("CorrespondingProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CORRESPONDING_PRODUCT_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomerReferenceId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CUSTOMER_REFERENCE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("ExemptAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("EXEMPT_AMOUNT");

                    b.Property<string>("IncludeInShipping")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_IN_SHIPPING")
                        .IsFixedLength();

                    b.Property<string>("IncludeInTax")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_IN_TAX")
                        .IsFixedLength();

                    b.Property<string>("IsManual")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_MANUAL")
                        .IsFixedLength();

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OverrideGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                    b.Property<string>("PrimaryGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_GEO_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<string>("ProductPromoActionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<string>("ProductPromoRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_RULE_ID");

                    b.Property<string>("QuoteAdjustmentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ADJUSTMENT_TYPE_ID");

                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<string>("QuoteItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ITEM_SEQ_ID");

                    b.Property<string>("SecondaryGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SECONDARY_GEO_ID");

                    b.Property<decimal?>("SourcePercentage")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SOURCE_PERCENTAGE");

                    b.Property<string>("SourceReferenceId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SOURCE_REFERENCE_ID");

                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.HasKey("QuoteAdjustmentId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QT_ADJSTMNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QT_ADJSTMNT_TXSTMP");

                    b.HasIndex(new[] { "OverrideGlAccountId" }, "QUOTE_ADJ_OGLA");

                    b.HasIndex(new[] { "QuoteId" }, "QUOTE_ADJ_OHEAD");

                    b.HasIndex(new[] { "PrimaryGeoId" }, "QUOTE_ADJ_PRGEO");

                    b.HasIndex(new[] { "ProductPromoId" }, "QUOTE_ADJ_PROMO");

                    b.HasIndex(new[] { "SecondaryGeoId" }, "QUOTE_ADJ_SCGEO");

                    b.HasIndex(new[] { "TaxAuthGeoId", "TaxAuthPartyId" }, "QUOTE_ADJ_TXA");

                    b.HasIndex(new[] { "QuoteAdjustmentTypeId" }, "QUOTE_ADJ_TYPE");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "QUOTE_ADJ_USERL");

                    b.ToTable("QUOTE_ADJUSTMENT", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteAttribute", b =>
                {
                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("QuoteId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QT_ATTRBT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QT_ATTRBT_TXSTMP");

                    b.HasIndex(new[] { "QuoteId" }, "QUOTE_ATTR");

                    b.ToTable("QUOTE_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteCoefficient", b =>
                {
                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<string>("CoeffName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COEFF_NAME");

                    b.Property<decimal?>("CoeffValue")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("COEFF_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("QuoteId", "CoeffName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QT_CFFCNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QT_CFFCNT_TXSTMP");

                    b.HasIndex(new[] { "QuoteId" }, "QUOTE_COEFF");

                    b.ToTable("QUOTE_COEFFICIENT", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteItem", b =>
                {
                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<string>("QuoteItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ITEM_SEQ_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("ConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("CustRequestItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                    b.Property<string>("DeliverableTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DELIVERABLE_TYPE_ID");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_DELIVERY_DATE");

                    b.Property<string>("IsPromo")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_PROMO")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("LeadTimeDays")
                        .HasColumnType("int")
                        .HasColumnName("LEAD_TIME_DAYS");

                    b.Property<string>("ParentQuoteItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_QUOTE_ITEM_SEQ_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<decimal?>("QuoteUnitListPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("QUOTE_UNIT_LIST_PRICE");

                    b.Property<decimal?>("QuoteUnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("QUOTE_UNIT_PRICE");

                    b.Property<decimal?>("ReservLength")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_LENGTH");

                    b.Property<decimal?>("ReservPersons")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_PERSONS");

                    b.Property<DateTime?>("ReservStart")
                        .HasColumnType("datetime")
                        .HasColumnName("RESERV_START");

                    b.Property<decimal?>("SelectedAmount")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SELECTED_AMOUNT");

                    b.Property<string>("SkillTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SKILL_TYPE_ID");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.HasKey("QuoteId", "QuoteItemSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QUOTE_ITEM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QUOTE_ITEM_TXSTMP");

                    b.HasIndex(new[] { "CustRequestId", "CustRequestItemSeqId" }, "QUOTE_ITM_CSRITM");

                    b.HasIndex(new[] { "CustRequestId" }, "QUOTE_ITM_CSRQ");

                    b.HasIndex(new[] { "DeliverableTypeId" }, "QUOTE_ITM_DELT");

                    b.HasIndex(new[] { "ProductFeatureId" }, "QUOTE_ITM_PFEAT");

                    b.HasIndex(new[] { "ProductId" }, "QUOTE_ITM_PROD");

                    b.HasIndex(new[] { "QuoteId" }, "QUOTE_ITM_QTE");

                    b.HasIndex(new[] { "SkillTypeId" }, "QUOTE_ITM_SKLT");

                    b.HasIndex(new[] { "UomId" }, "QUOTE_ITM_UOM");

                    b.HasIndex(new[] { "WorkEffortId" }, "QUOTE_ITM_WKEFF");

                    b.ToTable("QUOTE_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteNote", b =>
                {
                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("QuoteId", "NoteId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QUOTE_NOTE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QUOTE_NOTE_TXSTMP");

                    b.HasIndex(new[] { "NoteId" }, "QUOTE_NT_NOTE");

                    b.HasIndex(new[] { "QuoteId" }, "QUOTE_NT_QTE");

                    b.ToTable("QUOTE_NOTE", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteRole", b =>
                {
                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("QuoteId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "PartyId" }, "QUOTE_RL_PARTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "QUOTE_RL_PROLE");

                    b.HasIndex(new[] { "QuoteId" }, "QUOTE_RL_QUOTE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QUOTE_ROLE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QUOTE_ROLE_TXSTMP");

                    b.ToTable("QUOTE_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteTerm", b =>
                {
                    b.Property<string>("TermTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERM_TYPE_ID");

                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<string>("QuoteItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("TermDays")
                        .HasColumnType("int")
                        .HasColumnName("TERM_DAYS");

                    b.Property<int?>("TermValue")
                        .HasColumnType("int")
                        .HasColumnName("TERM_VALUE");

                    b.Property<string>("TextValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TEXT_VALUE");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("TermTypeId", "QuoteId", "QuoteItemSeqId");

                    b.HasIndex(new[] { "QuoteId" }, "QUOTE_TERM_QTE");

                    b.HasIndex(new[] { "TermTypeId" }, "QUOTE_TERM_TTYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QUOTE_TERM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QUOTE_TERM_TXSTMP");

                    b.ToTable("QUOTE_TERM", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteTermAttribute", b =>
                {
                    b.Property<string>("TermTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERM_TYPE_ID");

                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<string>("QuoteItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ITEM_SEQ_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TermTypeId", "QuoteId", "QuoteItemSeqId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QT_TRM_ATTRT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QT_TRM_ATTRT_TXSTP");

                    b.HasIndex(new[] { "TermTypeId", "QuoteId", "QuoteItemSeqId" }, "QUOTE_TERM_ATTR");

                    b.ToTable("QUOTE_TERM_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteType", b =>
                {
                    b.Property<string>("QuoteTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("QuoteTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "QUOTE_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QUOTE_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QUOTE_TYPE_TXSTMP");

                    b.ToTable("QUOTE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteTypeAttr", b =>
                {
                    b.Property<string>("QuoteTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("QuoteTypeId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QT_TP_ATTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QT_TP_ATTR_TXSTMP");

                    b.HasIndex(new[] { "QuoteTypeId" }, "QUOTE_TPAT_QTYP");

                    b.ToTable("QUOTE_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.QuoteWorkEffort", b =>
                {
                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("QuoteId", "WorkEffortId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "QT_WRK_EFFT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "QT_WRK_EFFT_TXSTMP");

                    b.HasIndex(new[] { "QuoteId" }, "QUOTE_WE_QUOTE");

                    b.HasIndex(new[] { "WorkEffortId" }, "QUOTE_WE_WEFF");

                    b.ToTable("QUOTE_WORK_EFFORT", (string)null);
                });

            modelBuilder.Entity("Domain.RateAmount", b =>
                {
                    b.Property<string>("RateTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RATE_TYPE_ID");

                    b.Property<string>("RateCurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RATE_CURRENCY_UOM_ID");

                    b.Property<string>("PeriodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PERIOD_TYPE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("EmplPositionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("RateAmount1")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("RATE_AMOUNT");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("RateTypeId", "RateCurrencyUomId", "PeriodTypeId", "PartyId", "WorkEffortId", "EmplPositionTypeId", "FromDate");

                    b.HasIndex(new[] { "EmplPositionTypeId" }, "RATE_AMOUNT_EPT");

                    b.HasIndex(new[] { "PeriodTypeId" }, "RATE_AMOUNT_PT");

                    b.HasIndex(new[] { "PartyId" }, "RATE_AMOUNT_PTY");

                    b.HasIndex(new[] { "RateCurrencyUomId" }, "RATE_AMOUNT_RCT");

                    b.HasIndex(new[] { "RateTypeId" }, "RATE_AMOUNT_RT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RATE_AMOUNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RATE_AMOUNT_TXSTMP");

                    b.HasIndex(new[] { "WorkEffortId" }, "RATE_AMOUNT_WE");

                    b.ToTable("RATE_AMOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.RateType", b =>
                {
                    b.Property<string>("RateTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RATE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("RateTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RATE_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RATE_TYPE_TXSTMP");

                    b.ToTable("RATE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.RecurrenceInfo", b =>
                {
                    b.Property<string>("RecurrenceInfoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECURRENCE_INFO_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ExceptionDateTimes")
                        .HasColumnType("text")
                        .HasColumnName("EXCEPTION_DATE_TIMES");

                    b.Property<string>("ExceptionRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXCEPTION_RULE_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("RecurrenceCount")
                        .HasColumnType("int")
                        .HasColumnName("RECURRENCE_COUNT");

                    b.Property<string>("RecurrenceDateTimes")
                        .HasColumnType("text")
                        .HasColumnName("RECURRENCE_DATE_TIMES");

                    b.Property<string>("RecurrenceRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECURRENCE_RULE_ID");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("START_DATE_TIME");

                    b.HasKey("RecurrenceInfoId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RCRRNC_INF_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RCRRNC_INF_TXSTMP");

                    b.HasIndex(new[] { "ExceptionRuleId" }, "REC_INFO_EX_RCRLE");

                    b.HasIndex(new[] { "RecurrenceRuleId" }, "REC_INFO_RCRLE");

                    b.ToTable("RECURRENCE_INFO", (string)null);
                });

            modelBuilder.Entity("Domain.RecurrenceRule", b =>
                {
                    b.Property<string>("RecurrenceRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECURRENCE_RULE_ID");

                    b.Property<string>("ByDayList")
                        .HasColumnType("text")
                        .HasColumnName("BY_DAY_LIST");

                    b.Property<string>("ByHourList")
                        .HasColumnType("text")
                        .HasColumnName("BY_HOUR_LIST");

                    b.Property<string>("ByMinuteList")
                        .HasColumnType("text")
                        .HasColumnName("BY_MINUTE_LIST");

                    b.Property<string>("ByMonthDayList")
                        .HasColumnType("text")
                        .HasColumnName("BY_MONTH_DAY_LIST");

                    b.Property<string>("ByMonthList")
                        .HasColumnType("text")
                        .HasColumnName("BY_MONTH_LIST");

                    b.Property<string>("BySecondList")
                        .HasColumnType("text")
                        .HasColumnName("BY_SECOND_LIST");

                    b.Property<string>("BySetPosList")
                        .HasColumnType("text")
                        .HasColumnName("BY_SET_POS_LIST");

                    b.Property<string>("ByWeekNoList")
                        .HasColumnType("text")
                        .HasColumnName("BY_WEEK_NO_LIST");

                    b.Property<string>("ByYearDayList")
                        .HasColumnType("text")
                        .HasColumnName("BY_YEAR_DAY_LIST");

                    b.Property<int?>("CountNumber")
                        .HasColumnType("int")
                        .HasColumnName("COUNT_NUMBER");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Frequency")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("FREQUENCY");

                    b.Property<int?>("IntervalNumber")
                        .HasColumnType("int")
                        .HasColumnName("INTERVAL_NUMBER");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("UntilDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("UNTIL_DATE_TIME");

                    b.Property<string>("WeekStart")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("WEEK_START");

                    b.Property<string>("XName")
                        .HasColumnType("text")
                        .HasColumnName("X_NAME");

                    b.HasKey("RecurrenceRuleId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RCRRNC_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RCRRNC_RL_TXSTMP");

                    b.ToTable("RECURRENCE_RULE", (string)null);
                });

            modelBuilder.Entity("Domain.RejectionReason", b =>
                {
                    b.Property<string>("RejectionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REJECTION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("RejectionId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RJCTN_RSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RJCTN_RSN_TXSTMP");

                    b.ToTable("REJECTION_REASON", (string)null);
                });

            modelBuilder.Entity("Domain.ReorderGuideline", b =>
                {
                    b.Property<string>("ReorderGuidelineId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REORDER_GUIDELINE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("GeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("ReorderLevel")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("REORDER_LEVEL");

                    b.Property<decimal?>("ReorderQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("REORDER_QUANTITY");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ReorderGuidelineId");

                    b.HasIndex(new[] { "FacilityId" }, "REORDER_GD_FAC");

                    b.HasIndex(new[] { "GeoId" }, "REORDER_GD_GEO");

                    b.HasIndex(new[] { "PartyId" }, "REORDER_GD_PARTY");

                    b.HasIndex(new[] { "ProductId" }, "REORDER_GD_PROD");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RRDR_GDLN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RRDR_GDLN_TXSTMP");

                    b.ToTable("REORDER_GUIDELINE", (string)null);
                });

            modelBuilder.Entity("Domain.Requirement", b =>
                {
                    b.Property<string>("RequirementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DeliverableId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DELIVERABLE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("EstimatedBudget")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ESTIMATED_BUDGET");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("FacilityIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID_TO");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REASON");

                    b.Property<DateTime?>("RequiredByDate")
                        .HasColumnType("datetime")
                        .HasColumnName("REQUIRED_BY_DATE");

                    b.Property<DateTime?>("RequirementStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("REQUIREMENT_START_DATE");

                    b.Property<string>("RequirementTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_TYPE_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("UseCase")
                        .HasColumnType("text")
                        .HasColumnName("USE_CASE");

                    b.HasKey("RequirementId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "REQUIREMENT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "REQUIREMENT_TXSTMP");

                    b.HasIndex(new[] { "DeliverableId" }, "REQ_DELIVERABLE");

                    b.HasIndex(new[] { "FacilityId" }, "REQ_FACILITY");

                    b.HasIndex(new[] { "FixedAssetId" }, "REQ_FIXED_ASSET");

                    b.HasIndex(new[] { "ProductId" }, "REQ_PRODUCT");

                    b.HasIndex(new[] { "StatusId" }, "REQ_STTS");

                    b.HasIndex(new[] { "RequirementTypeId" }, "REQ_TYPE");

                    b.ToTable("REQUIREMENT", (string)null);
                });

            modelBuilder.Entity("Domain.RequirementAttribute", b =>
                {
                    b.Property<string>("RequirementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("RequirementId", "AttrName");

                    b.HasIndex(new[] { "RequirementId" }, "REQ_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RQRMT_ATTRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RQRMT_ATTRT_TXSTMP");

                    b.ToTable("REQUIREMENT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.RequirementBudgetAllocation", b =>
                {
                    b.Property<string>("BudgetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ID");

                    b.Property<string>("BudgetItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BUDGET_ITEM_SEQ_ID");

                    b.Property<string>("RequirementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("BudgetId", "BudgetItemSeqId", "RequirementId")
                        .HasName("PK_REQUIREMENT_BUDGET_ALLOCATI");

                    b.HasIndex(new[] { "BudgetId", "BudgetItemSeqId" }, "REQ_BDGTAL_BITM");

                    b.HasIndex(new[] { "RequirementId" }, "REQ_BDGTAL_REQ");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RQRT_BDT_ALLN_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RQRT_BDT_ALLN_TXSP");

                    b.ToTable("REQUIREMENT_BUDGET_ALLOCATION", (string)null);
                });

            modelBuilder.Entity("Domain.RequirementCustRequest", b =>
                {
                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("CustRequestItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ITEM_SEQ_ID");

                    b.Property<string>("RequirementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CustRequestId", "CustRequestItemSeqId", "RequirementId");

                    b.HasIndex(new[] { "CustRequestId", "CustRequestItemSeqId" }, "REQ_CSREQ_CRITM");

                    b.HasIndex(new[] { "RequirementId" }, "REQ_CSREQ_REQ");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RQRT_CST_RQT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RQRT_CST_RQT_TXSTP");

                    b.ToTable("REQUIREMENT_CUST_REQUEST", (string)null);
                });

            modelBuilder.Entity("Domain.RequirementRole", b =>
                {
                    b.Property<string>("RequirementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("RequirementId", "PartyId", "RoleTypeId", "FromDate");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "REQ_ROLE_PROLE");

                    b.HasIndex(new[] { "PartyId" }, "REQ_ROLE_PRTY");

                    b.HasIndex(new[] { "RequirementId" }, "REQ_ROLE_REQ");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RQRMNT_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RQRMNT_RL_TXSTMP");

                    b.ToTable("REQUIREMENT_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.RequirementStatus", b =>
                {
                    b.Property<string>("RequirementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.HasKey("RequirementId", "StatusId");

                    b.HasIndex(new[] { "RequirementId" }, "REQ_STTS_REQ");

                    b.HasIndex(new[] { "StatusId" }, "REQ_STTS_STTS");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "REQ_STTS_USRLGN");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RQRMNT_STTS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RQRMNT_STTS_TXSTMP");

                    b.ToTable("REQUIREMENT_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.RequirementType", b =>
                {
                    b.Property<string>("RequirementTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("RequirementTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "REQ_TYPE_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RQRMNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RQRMNT_TP_TXSTMP");

                    b.ToTable("REQUIREMENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.RequirementTypeAttr", b =>
                {
                    b.Property<string>("RequirementTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("RequirementTypeId", "AttrName");

                    b.HasIndex(new[] { "RequirementTypeId" }, "REQ_TYPE_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RQRMT_TP_ATR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RQRMT_TP_ATR_TXSTP");

                    b.ToTable("REQUIREMENT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.RespondingParty", b =>
                {
                    b.Property<string>("RespondingPartySeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RESPONDING_PARTY_SEQ_ID");

                    b.Property<string>("CustRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUST_REQUEST_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_SENT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("RespondingPartySeqId", "CustRequestId", "PartyId");

                    b.HasIndex(new[] { "ContactMechId" }, "RESP_PTY_CMECH");

                    b.HasIndex(new[] { "CustRequestId" }, "RESP_PTY_CSREQ");

                    b.HasIndex(new[] { "PartyId" }, "RESP_PTY_PARTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RSPNDNG_PRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RSPNDNG_PRT_TXSTMP");

                    b.ToTable("RESPONDING_PARTY", (string)null);
                });

            modelBuilder.Entity("Domain.ResponsibilityType", b =>
                {
                    b.Property<string>("ResponsibilityTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RESPONSIBILITY_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ResponsibilityTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "RESPON_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RSPNSBLT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RSPNSBLT_TP_TXSTMP");

                    b.ToTable("RESPONSIBILITY_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnAdjustment", b =>
                {
                    b.Property<string>("ReturnAdjustmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ADJUSTMENT_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("AMOUNT");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("CorrespondingProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CORRESPONDING_PRODUCT_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomerReferenceId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CUSTOMER_REFERENCE_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("ExemptAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("EXEMPT_AMOUNT");

                    b.Property<string>("IncludeInShipping")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_IN_SHIPPING")
                        .IsFixedLength();

                    b.Property<string>("IncludeInTax")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_IN_TAX")
                        .IsFixedLength();

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderAdjustmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ADJUSTMENT_ID");

                    b.Property<string>("OverrideGlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OVERRIDE_GL_ACCOUNT_ID");

                    b.Property<string>("PrimaryGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_GEO_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<string>("ProductPromoActionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ACTION_SEQ_ID");

                    b.Property<string>("ProductPromoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_ID");

                    b.Property<string>("ProductPromoRuleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_RULE_ID");

                    b.Property<string>("ReturnAdjustmentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ADJUSTMENT_TYPE_ID");

                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("ReturnItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_SEQ_ID");

                    b.Property<string>("ReturnTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_TYPE_ID");

                    b.Property<string>("SecondaryGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SECONDARY_GEO_ID");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.Property<decimal?>("SourcePercentage")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SOURCE_PERCENTAGE");

                    b.Property<string>("SourceReferenceId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SOURCE_REFERENCE_ID");

                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.Property<string>("TaxAuthorityRateSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID");

                    b.HasKey("ReturnAdjustmentId");

                    b.HasIndex(new[] { "OverrideGlAccountId" }, "RETURN_ADJ_OGLA");

                    b.HasIndex(new[] { "OrderAdjustmentId" }, "RETURN_ADJ_ORDADJ");

                    b.HasIndex(new[] { "PrimaryGeoId" }, "RETURN_ADJ_PRGEO");

                    b.HasIndex(new[] { "ProductPromoId" }, "RETURN_ADJ_PROMO");

                    b.HasIndex(new[] { "ReturnId" }, "RETURN_ADJ_RHEAD");

                    b.HasIndex(new[] { "SecondaryGeoId" }, "RETURN_ADJ_SCGEO");

                    b.HasIndex(new[] { "TaxAuthorityRateSeqId" }, "RETURN_ADJ_TARP");

                    b.HasIndex(new[] { "TaxAuthGeoId", "TaxAuthPartyId" }, "RETURN_ADJ_TXA");

                    b.HasIndex(new[] { "ReturnAdjustmentTypeId" }, "RETURN_ADJ_TYPE");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "RETURN_ADJ_USERL");

                    b.HasIndex(new[] { "ReturnTypeId" }, "RET_ADJ_RTN_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTN_ADJSTMT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTN_ADJSTMT_TXSTMP");

                    b.ToTable("RETURN_ADJUSTMENT", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnAdjustmentType", b =>
                {
                    b.Property<string>("ReturnAdjustmentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ADJUSTMENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ReturnAdjustmentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "RETURN_ADJ_TYPPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTN_ADJSTT_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTN_ADJSTT_TP_TXSP");

                    b.ToTable("RETURN_ADJUSTMENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnContactMech", b =>
                {
                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("ContactMechPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_PURPOSE_TYPE_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ReturnId", "ContactMechPurposeTypeId", "ContactMechId");

                    b.HasIndex(new[] { "ContactMechId" }, "RETURN_CMECH_CM");

                    b.HasIndex(new[] { "ContactMechPurposeTypeId" }, "RETURN_CMECH_CMPT");

                    b.HasIndex(new[] { "ReturnId" }, "RETURN_CMECH_HDR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTN_CNTT_MCH_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTN_CNTT_MCH_TXSTP");

                    b.ToTable("RETURN_CONTACT_MECH", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnHeader", b =>
                {
                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_ACCOUNT_ID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("DestinationFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DESTINATION_FACILITY_ID");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("FinAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_ID");

                    b.Property<string>("FromPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FROM_PARTY_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("NeedsInventoryReceive")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("NEEDS_INVENTORY_RECEIVE")
                        .IsFixedLength();

                    b.Property<string>("OriginContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGIN_CONTACT_MECH_ID");

                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<string>("ReturnHeaderTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_HEADER_TYPE_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("SupplierRmaId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUPPLIER_RMA_ID");

                    b.Property<string>("ToPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TO_PARTY_ID");

                    b.HasKey("ReturnId");

                    b.HasIndex(new[] { "OriginContactMechId" }, "RTN_FROM_CTM");

                    b.HasIndex(new[] { "FromPartyId" }, "RTN_FROM_PARTY");

                    b.HasIndex(new[] { "CurrencyUomId" }, "RTN_HDR_CUOM");

                    b.HasIndex(new[] { "ReturnHeaderTypeId" }, "RTN_HEAD_TYPE");

                    b.HasIndex(new[] { "StatusId" }, "RTN_STTS_ITEM");

                    b.HasIndex(new[] { "BillingAccountId" }, "RTN_TO_BACT");

                    b.HasIndex(new[] { "DestinationFacilityId" }, "RTN_TO_FACILITY");

                    b.HasIndex(new[] { "FinAccountId" }, "RTN_TO_FACT");

                    b.HasIndex(new[] { "ToPartyId" }, "RTN_TO_PARTY");

                    b.HasIndex(new[] { "PaymentMethodId" }, "RTN_TO_PAYMETH");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTRN_HDR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTRN_HDR_TXSTMP");

                    b.ToTable("RETURN_HEADER", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnHeaderType", b =>
                {
                    b.Property<string>("ReturnHeaderTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_HEADER_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ReturnHeaderTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "RTHEAD_TYPE_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTRN_HDR_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTRN_HDR_TP_TXSTMP");

                    b.ToTable("RETURN_HEADER_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnItem", b =>
                {
                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("ReturnItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("ExpectedItemStatus")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXPECTED_ITEM_STATUS");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("ReceivedQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RECEIVED_QUANTITY");

                    b.Property<string>("ReturnItemResponseId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_RESPONSE_ID");

                    b.Property<string>("ReturnItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_TYPE_ID");

                    b.Property<decimal?>("ReturnPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("RETURN_PRICE");

                    b.Property<decimal?>("ReturnQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RETURN_QUANTITY");

                    b.Property<string>("ReturnReasonId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_REASON_ID");

                    b.Property<string>("ReturnTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_TYPE_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("ReturnId", "ReturnItemSeqId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RETURN_ITEM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RETURN_ITEM_TXSTMP");

                    b.HasIndex(new[] { "ExpectedItemStatus" }, "RTN_ITEM_ITSTT");

                    b.HasIndex(new[] { "OrderId" }, "RTN_ITEM_ODR");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "RTN_ITEM_ODRIT");

                    b.HasIndex(new[] { "ProductId" }, "RTN_ITEM_PROD");

                    b.HasIndex(new[] { "ReturnReasonId" }, "RTN_ITEM_REASON");

                    b.HasIndex(new[] { "ReturnItemResponseId" }, "RTN_ITEM_RESP");

                    b.HasIndex(new[] { "ReturnId" }, "RTN_ITEM_RTN");

                    b.HasIndex(new[] { "StatusId" }, "RTN_ITEM_STTSIT");

                    b.HasIndex(new[] { "ReturnItemTypeId" }, "RTN_ITEM_TYPE");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "RTN_ITM_BYORDITM");

                    b.HasIndex(new[] { "ReturnTypeId" }, "RTN_TYPE");

                    b.ToTable("RETURN_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnItemBilling", b =>
                {
                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("ReturnItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_SEQ_ID");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("ShipmentReceiptId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_RECEIPT_ID");

                    b.HasKey("ReturnId", "ReturnItemSeqId", "InvoiceId", "InvoiceItemSeqId");

                    b.HasIndex(new[] { "InvoiceId", "InvoiceItemSeqId" }, "RETURN_ITBLNG_IITM");

                    b.HasIndex(new[] { "ShipmentReceiptId" }, "RITBL_SHIPRCPT");

                    b.HasIndex(new[] { "ReturnId" }, "RTN_ITBLNG_RHDR");

                    b.HasIndex(new[] { "ReturnId", "ReturnItemSeqId" }, "RTN_ITBLNG_RITM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTN_ITM_BLLG_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTN_ITM_BLLG_TXSTP");

                    b.ToTable("RETURN_ITEM_BILLING", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnItemResponse", b =>
                {
                    b.Property<string>("ReturnItemResponseId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_RESPONSE_ID");

                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_ACCOUNT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("FinAccountTransId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIN_ACCOUNT_TRANS_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderPaymentPreferenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_PAYMENT_PREFERENCE_ID");

                    b.Property<string>("PaymentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_ID");

                    b.Property<string>("ReplacementOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REPLACEMENT_ORDER_ID");

                    b.Property<decimal?>("ResponseAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("RESPONSE_AMOUNT");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RESPONSE_DATE");

                    b.HasKey("ReturnItemResponseId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTN_ITM_RSPS_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTN_ITM_RSPS_TXSTP");

                    b.HasIndex(new[] { "BillingAccountId" }, "RTN_PAY_BACT");

                    b.HasIndex(new[] { "FinAccountTransId" }, "RTN_PAY_FINACTTX");

                    b.HasIndex(new[] { "OrderPaymentPreferenceId" }, "RTN_PAY_ORDPAYPF");

                    b.HasIndex(new[] { "PaymentId" }, "RTN_PAY_PAYMENT");

                    b.HasIndex(new[] { "ReplacementOrderId" }, "RTN_RESP_NEWORD");

                    b.ToTable("RETURN_ITEM_RESPONSE", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnItemShipment", b =>
                {
                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("ReturnItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_SEQ_ID");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.HasKey("ReturnId", "ReturnItemSeqId", "ShipmentId", "ShipmentItemSeqId");

                    b.HasIndex(new[] { "ReturnId" }, "RIT_SHPMT_RHDR");

                    b.HasIndex(new[] { "ReturnId", "ReturnItemSeqId" }, "RIT_SHPMT_RITM");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentItemSeqId" }, "RIT_SHPMT_SHPITM");

                    b.HasIndex(new[] { "ShipmentId" }, "RIT_SHPMT_SHPMT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTN_ITM_SHPT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTN_ITM_SHPT_TXSTP");

                    b.ToTable("RETURN_ITEM_SHIPMENT", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnItemType", b =>
                {
                    b.Property<string>("ReturnItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ReturnItemTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "RETURN_ITEM_TYPPAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTRN_ITM_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTRN_ITM_TP_TXSTMP");

                    b.ToTable("RETURN_ITEM_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnItemTypeMap", b =>
                {
                    b.Property<string>("ReturnItemMapKey")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_MAP_KEY");

                    b.Property<string>("ReturnHeaderTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_HEADER_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ReturnItemTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_TYPE_ID");

                    b.HasKey("ReturnItemMapKey", "ReturnHeaderTypeId");

                    b.HasIndex(new[] { "ReturnHeaderTypeId" }, "RETITMMAP_RETTYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTN_ITM_TP_MP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTN_ITM_TP_MP_TXSP");

                    b.ToTable("RETURN_ITEM_TYPE_MAP", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnReason", b =>
                {
                    b.Property<string>("ReturnReasonId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_REASON_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("SequenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEQUENCE_ID");

                    b.HasKey("ReturnReasonId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTRN_RSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTRN_RSN_TXSTMP");

                    b.ToTable("RETURN_REASON", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnStatus", b =>
                {
                    b.Property<string>("ReturnStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_STATUS_ID");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("ReturnItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_SEQ_ID");

                    b.Property<DateTime?>("StatusDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATETIME");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("ReturnStatusId");

                    b.HasIndex(new[] { "ReturnId" }, "RTN_STTS_RTN");

                    b.HasIndex(new[] { "StatusId" }, "RTN_STTS_STTS");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "RTN_STTS_USRLGN");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RTRN_STTS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RTRN_STTS_TXSTMP");

                    b.ToTable("RETURN_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.ReturnType", b =>
                {
                    b.Property<string>("ReturnTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.Property<string>("SequenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEQUENCE_ID");

                    b.HasKey("ReturnTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RETURN_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RETURN_TYPE_TXSTMP");

                    b.ToTable("RETURN_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.RoleType", b =>
                {
                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<bool>("IncludeInFilter")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("RoleTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "ROLE_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ROLE_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ROLE_TYPE_TXSTMP");

                    b.ToTable("ROLE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.RoleTypeAttr", b =>
                {
                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("RoleTypeId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RL_TP_ATTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RL_TP_ATTR_TXSTMP");

                    b.HasIndex(new[] { "RoleTypeId" }, "ROLE_TYPATR_RTYP");

                    b.ToTable("ROLE_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.RuntimeDatum", b =>
                {
                    b.Property<string>("RuntimeDataId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RUNTIME_DATA_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RuntimeInfo")
                        .HasColumnType("text")
                        .HasColumnName("RUNTIME_INFO");

                    b.HasKey("RuntimeDataId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "RNTM_DT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "RNTM_DT_TXSTMP");

                    b.ToTable("RUNTIME_DATA", (string)null);
                });

            modelBuilder.Entity("Domain.SalaryStepNew", b =>
                {
                    b.Property<string>("SalaryStepSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALARY_STEP_SEQ_ID");

                    b.Property<string>("PayGradeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAY_GRADE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_MODIFIED");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("SalaryStepSeqId", "PayGradeId", "FromDate");

                    b.HasIndex(new[] { "PayGradeId" }, "SLRY_STP_PGRD_NEW");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLR_STP_NW_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLR_STP_NW_TXSTMP");

                    b.ToTable("SALARY_STEP_NEW", (string)null);
                });

            modelBuilder.Entity("Domain.SaleType", b =>
                {
                    b.Property<string>("SaleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SaleTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SALE_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SALE_TYPE_TXSTMP");

                    b.ToTable("SALE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.SalesForecast", b =>
                {
                    b.Property<string>("SalesForecastId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_FORECAST_ID");

                    b.Property<decimal?>("BestCaseAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("BEST_CASE_AMOUNT");

                    b.Property<decimal?>("ClosedAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("CLOSED_AMOUNT");

                    b.Property<string>("CreatedByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("CustomTimePeriodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_TIME_PERIOD_ID");

                    b.Property<decimal?>("ForecastAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("FORECAST_AMOUNT");

                    b.Property<string>("InternalPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INTERNAL_PARTY_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ModifiedByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MODIFIED_BY_USER_LOGIN_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<string>("ParentSalesForecastId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_SALES_FORECAST_ID");

                    b.Property<decimal?>("PercentOfQuotaClosed")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PERCENT_OF_QUOTA_CLOSED");

                    b.Property<decimal?>("PercentOfQuotaForecast")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PERCENT_OF_QUOTA_FORECAST");

                    b.Property<decimal?>("PipelineAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PIPELINE_AMOUNT");

                    b.Property<decimal?>("QuotaAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("QUOTA_AMOUNT");

                    b.HasKey("SalesForecastId");

                    b.HasIndex(new[] { "CreatedByUserLoginId" }, "SALES4C_CRT_USER");

                    b.HasIndex(new[] { "CurrencyUomId" }, "SALES4C_CUR_UOM");

                    b.HasIndex(new[] { "InternalPartyId" }, "SALES4C_INT_PARTY");

                    b.HasIndex(new[] { "ModifiedByUserLoginId" }, "SALES4C_MOD_USER");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "SALES4C_ORG_PARTY");

                    b.HasIndex(new[] { "ParentSalesForecastId" }, "SALES4C_PARENT");

                    b.HasIndex(new[] { "CustomTimePeriodId" }, "SALES4C_TIME_PER");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_FRCST_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_FRCST_TXSTMP");

                    b.ToTable("SALES_FORECAST", (string)null);
                });

            modelBuilder.Entity("Domain.SalesForecastDetail", b =>
                {
                    b.Property<string>("SalesForecastId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_FORECAST_ID");

                    b.Property<string>("SalesForecastDetailId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_FORECAST_DETAIL_ID");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("QuantityUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUANTITY_UOM_ID");

                    b.HasKey("SalesForecastId", "SalesForecastDetailId");

                    b.HasIndex(new[] { "ProductCategoryId" }, "SALES4CDTL_PCTGRY");

                    b.HasIndex(new[] { "ProductId" }, "SALES4CDTL_PROD");

                    b.HasIndex(new[] { "QuantityUomId" }, "SALES4CDTL_QTY_UOM");

                    b.HasIndex(new[] { "SalesForecastId" }, "SALES4CDTL_SALES4C");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_FRCT_DTL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_FRCT_DTL_TXSTP");

                    b.ToTable("SALES_FORECAST_DETAIL", (string)null);
                });

            modelBuilder.Entity("Domain.SalesForecastHistory", b =>
                {
                    b.Property<string>("SalesForecastHistoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_FORECAST_HISTORY_ID");

                    b.Property<decimal?>("BestCaseAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("BEST_CASE_AMOUNT");

                    b.Property<string>("ChangeNote")
                        .HasColumnType("text")
                        .HasColumnName("CHANGE_NOTE");

                    b.Property<decimal?>("ClosedAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("CLOSED_AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("CustomTimePeriodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_TIME_PERIOD_ID");

                    b.Property<decimal?>("ForecastAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("FORECAST_AMOUNT");

                    b.Property<string>("InternalPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INTERNAL_PARTY_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ModifiedByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MODIFIED_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("ModifiedTimestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_TIMESTAMP");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<string>("ParentSalesForecastId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_SALES_FORECAST_ID");

                    b.Property<decimal?>("PercentOfQuotaClosed")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PERCENT_OF_QUOTA_CLOSED");

                    b.Property<decimal?>("PercentOfQuotaForecast")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("PERCENT_OF_QUOTA_FORECAST");

                    b.Property<decimal?>("QuotaAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("QUOTA_AMOUNT");

                    b.Property<string>("SalesForecastId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_FORECAST_ID");

                    b.HasKey("SalesForecastHistoryId");

                    b.HasIndex(new[] { "CurrencyUomId" }, "SALES4CH_CUR_UOM");

                    b.HasIndex(new[] { "InternalPartyId" }, "SALES4CH_INT_PARTY");

                    b.HasIndex(new[] { "ModifiedByUserLoginId" }, "SALES4CH_MOD_USER");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "SALES4CH_ORG_PARTY");

                    b.HasIndex(new[] { "SalesForecastId" }, "SALES4CH_SALES4C");

                    b.HasIndex(new[] { "CustomTimePeriodId" }, "SALES4CH_TIME_PER");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_FRCT_HSR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_FRCT_HSR_TXSTP");

                    b.ToTable("SALES_FORECAST_HISTORY", (string)null);
                });

            modelBuilder.Entity("Domain.SalesOpportunity", b =>
                {
                    b.Property<string>("SalesOpportunityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_OPPORTUNITY_ID");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("DataSourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_SOURCE_ID");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("EstimatedAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ESTIMATED_AMOUNT");

                    b.Property<DateTime?>("EstimatedCloseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_CLOSE_DATE");

                    b.Property<decimal?>("EstimatedProbability")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("ESTIMATED_PROBABILITY");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MarketingCampaignId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MARKETING_CAMPAIGN_ID");

                    b.Property<string>("NextStep")
                        .HasColumnType("text")
                        .HasColumnName("NEXT_STEP");

                    b.Property<DateTime?>("NextStepDate")
                        .HasColumnType("datetime")
                        .HasColumnName("NEXT_STEP_DATE");

                    b.Property<string>("OpportunityName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("OPPORTUNITY_NAME");

                    b.Property<string>("OpportunityStageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OPPORTUNITY_STAGE_ID");

                    b.Property<string>("TypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TYPE_ENUM_ID");

                    b.HasKey("SalesOpportunityId");

                    b.HasIndex(new[] { "CurrencyUomId" }, "SLSOPP_CRNCY_UOM");

                    b.HasIndex(new[] { "DataSourceId" }, "SLSOPP_DTSRC");

                    b.HasIndex(new[] { "MarketingCampaignId" }, "SLSOPP_MKTGCMPG");

                    b.HasIndex(new[] { "OpportunityStageId" }, "SLSOPP_STAGE");

                    b.HasIndex(new[] { "TypeEnumId" }, "SLSOPP_TYP_ENUM");

                    b.HasIndex(new[] { "CreatedByUserLogin" }, "SLSOPP_USRLGN");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_OPPRTNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_OPPRTNT_TXSTMP");

                    b.ToTable("SALES_OPPORTUNITY", (string)null);
                });

            modelBuilder.Entity("Domain.SalesOpportunityCompetitor", b =>
                {
                    b.Property<string>("SalesOpportunityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_OPPORTUNITY_ID");

                    b.Property<string>("CompetitorPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMPETITOR_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PositionEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("POSITION_ENUM_ID");

                    b.Property<string>("Strengths")
                        .HasColumnType("text")
                        .HasColumnName("STRENGTHS");

                    b.Property<string>("Weaknesses")
                        .HasColumnType("text")
                        .HasColumnName("WEAKNESSES");

                    b.HasKey("SalesOpportunityId", "CompetitorPartyId")
                        .HasName("PK_SALES_OPPORTUNITY_COMPETITO");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_OPPRT_CMR_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_OPPRT_CMR_TXSP");

                    b.HasIndex(new[] { "SalesOpportunityId" }, "SOPPCOMP_SOPP");

                    b.ToTable("SALES_OPPORTUNITY_COMPETITOR", (string)null);
                });

            modelBuilder.Entity("Domain.SalesOpportunityHistory", b =>
                {
                    b.Property<string>("SalesOpportunityHistoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_OPPORTUNITY_HISTORY_ID");

                    b.Property<string>("ChangeNote")
                        .HasColumnType("text")
                        .HasColumnName("CHANGE_NOTE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("EstimatedAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ESTIMATED_AMOUNT");

                    b.Property<DateTime?>("EstimatedCloseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_CLOSE_DATE");

                    b.Property<decimal?>("EstimatedProbability")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("ESTIMATED_PROBABILITY");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("ModifiedTimestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFIED_TIMESTAMP");

                    b.Property<string>("NextStep")
                        .HasColumnType("text")
                        .HasColumnName("NEXT_STEP");

                    b.Property<string>("OpportunityStageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OPPORTUNITY_STAGE_ID");

                    b.Property<string>("SalesOpportunityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_OPPORTUNITY_ID");

                    b.HasKey("SalesOpportunityHistoryId");

                    b.HasIndex(new[] { "CurrencyUomId" }, "SLOPHI_CRNCY_UOM");

                    b.HasIndex(new[] { "SalesOpportunityId" }, "SLOPHI_SLSOPP");

                    b.HasIndex(new[] { "OpportunityStageId" }, "SLOPHI_STAGE");

                    b.HasIndex(new[] { "ModifiedByUserLogin" }, "SLOPHI_USRLGN");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_OPPRT_HSR_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_OPPRT_HSR_TXSP");

                    b.ToTable("SALES_OPPORTUNITY_HISTORY", (string)null);
                });

            modelBuilder.Entity("Domain.SalesOpportunityQuote", b =>
                {
                    b.Property<string>("SalesOpportunityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_OPPORTUNITY_ID");

                    b.Property<string>("QuoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SalesOpportunityId", "QuoteId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_OPPRT_QT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_OPPRT_QT_TXSTP");

                    b.HasIndex(new[] { "QuoteId" }, "SOPPQTE_QTE");

                    b.HasIndex(new[] { "SalesOpportunityId" }, "SOPPQTE_SOPP");

                    b.ToTable("SALES_OPPORTUNITY_QUOTE", (string)null);
                });

            modelBuilder.Entity("Domain.SalesOpportunityRole", b =>
                {
                    b.Property<string>("SalesOpportunityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_OPPORTUNITY_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SalesOpportunityId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "PartyId" }, "SLSOPPRL_PARTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "SLSOPPRL_PTYROLE");

                    b.HasIndex(new[] { "RoleTypeId" }, "SLSOPPRL_ROLETYPE");

                    b.HasIndex(new[] { "SalesOpportunityId" }, "SLSOPPRL_SLSOPP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_OPPRT_RL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_OPPRT_RL_TXSTP");

                    b.ToTable("SALES_OPPORTUNITY_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.SalesOpportunityStage", b =>
                {
                    b.Property<string>("OpportunityStageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("OPPORTUNITY_STAGE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("DefaultProbability")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("DEFAULT_PROBABILITY");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("OpportunityStageId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_OPPRT_STG_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_OPPRT_STG_TXSP");

                    b.ToTable("SALES_OPPORTUNITY_STAGE", (string)null);
                });

            modelBuilder.Entity("Domain.SalesOpportunityTrckCode", b =>
                {
                    b.Property<string>("SalesOpportunityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_OPPORTUNITY_ID");

                    b.Property<string>("TrackingCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRACKING_CODE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RECEIVED_DATE");

                    b.HasKey("SalesOpportunityId", "TrackingCodeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_OPT_TRK_CD_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_OPT_TRK_CD_TXS");

                    b.HasIndex(new[] { "SalesOpportunityId" }, "SOPPTRKCD_SOPP");

                    b.ToTable("SALES_OPPORTUNITY_TRCK_CODE", (string)null);
                });

            modelBuilder.Entity("Domain.SalesOpportunityWorkEffort", b =>
                {
                    b.Property<string>("SalesOpportunityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SALES_OPPORTUNITY_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SalesOpportunityId", "WorkEffortId")
                        .HasName("PK_SALES_OPPORTUNITY_WORK_EFFO");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SLS_OPT_WRK_EFT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SLS_OPT_WRK_EFT_TS");

                    b.HasIndex(new[] { "SalesOpportunityId" }, "SOPPWEFF_SOPP");

                    b.HasIndex(new[] { "WorkEffortId" }, "SOPPWEFF_WEFF");

                    b.ToTable("SALES_OPPORTUNITY_WORK_EFFORT", (string)null);
                });

            modelBuilder.Entity("Domain.SecurityGroup", b =>
                {
                    b.Property<string>("GroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("GroupName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("GROUP_NAME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("GroupId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SCRT_GRP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SCRT_GRP_TXSTMP");

                    b.ToTable("SECURITY_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.SecurityGroupPermission", b =>
                {
                    b.Property<string>("GroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GROUP_ID");

                    b.Property<string>("PermissionId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PERMISSION_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("GroupId", "PermissionId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SCT_GRP_PRMN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SCT_GRP_PRMN_TXSTP");

                    b.HasIndex(new[] { "GroupId" }, "SEC_GRP_PERM_GRP");

                    b.ToTable("SECURITY_GROUP_PERMISSION", (string)null);
                });

            modelBuilder.Entity("Domain.SecurityPermission", b =>
                {
                    b.Property<string>("PermissionId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PERMISSION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("PermissionId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SCRT_PRMSSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SCRT_PRMSSN_TXSTMP");

                    b.ToTable("SECURITY_PERMISSION", (string)null);
                });

            modelBuilder.Entity("Domain.SegmentGroup", b =>
                {
                    b.Property<string>("SegmentGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEGMENT_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("SegmentGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEGMENT_GROUP_TYPE_ID");

                    b.HasKey("SegmentGroupId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SGMNT_GRP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SGMNT_GRP_TXSTMP");

                    b.HasIndex(new[] { "ProductStoreId" }, "SGMTGRP_PRST");

                    b.HasIndex(new[] { "SegmentGroupTypeId" }, "SGMTGRP_TYPE");

                    b.ToTable("SEGMENT_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.SegmentGroupClassification", b =>
                {
                    b.Property<string>("SegmentGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEGMENT_GROUP_ID");

                    b.Property<string>("PartyClassificationGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_CLASSIFICATION_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SegmentGroupId", "PartyClassificationGroupId")
                        .HasName("PK_SEGMENT_GROUP_CLASSIFICATIO");

                    b.HasIndex(new[] { "PartyClassificationGroupId" }, "SGMTGRPCLS_PCGP");

                    b.HasIndex(new[] { "SegmentGroupId" }, "SGMTGRPCLS_SGGP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SGT_GRP_CLSSN_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SGT_GRP_CLSSN_TXSP");

                    b.ToTable("SEGMENT_GROUP_CLASSIFICATION", (string)null);
                });

            modelBuilder.Entity("Domain.SegmentGroupGeo", b =>
                {
                    b.Property<string>("SegmentGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEGMENT_GROUP_ID");

                    b.Property<string>("GeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SegmentGroupId", "GeoId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SGMNT_GRP_G_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SGMNT_GRP_G_TXSTMP");

                    b.HasIndex(new[] { "GeoId" }, "SGMTGRPGEO_GEO");

                    b.HasIndex(new[] { "SegmentGroupId" }, "SGMTGRPGEO_SGGP");

                    b.ToTable("SEGMENT_GROUP_GEO", (string)null);
                });

            modelBuilder.Entity("Domain.SegmentGroupRole", b =>
                {
                    b.Property<string>("SegmentGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEGMENT_GROUP_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SegmentGroupId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "SGMTGRPRL_PRLE");

                    b.HasIndex(new[] { "SegmentGroupId" }, "SGMTGRPRL_SGGP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SGMT_GRP_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SGMT_GRP_RL_TXSTMP");

                    b.ToTable("SEGMENT_GROUP_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.SegmentGroupType", b =>
                {
                    b.Property<string>("SegmentGroupTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEGMENT_GROUP_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SegmentGroupTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SGMT_GRP_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SGMT_GRP_TP_TXSTMP");

                    b.ToTable("SEGMENT_GROUP_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.SequenceValueItem", b =>
                {
                    b.Property<string>("SeqName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SEQ_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SeqId")
                        .HasColumnType("int")
                        .HasColumnName("SEQ_ID");

                    b.HasKey("SeqName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SQNC_VL_ITM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SQNC_VL_ITM_TXSTMP");

                    b.ToTable("SEQUENCE_VALUE_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.ServerHit", b =>
                {
                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<DateTime>("HitStartDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("HIT_START_DATE_TIME");

                    b.Property<string>("HitTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("HIT_TYPE_ID");

                    b.Property<string>("IdByIpContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ID_BY_IP_CONTACT_MECH_ID");

                    b.Property<string>("InternalContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INTERNAL_CONTENT_ID");

                    b.Property<int?>("NumOfBytes")
                        .HasColumnType("int")
                        .HasColumnName("NUM_OF_BYTES");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RefByWebContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REF_BY_WEB_CONTACT_MECH_ID");

                    b.Property<string>("ReferrerUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("REFERRER_URL");

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("REQUEST_URL");

                    b.Property<int?>("RunningTimeMillis")
                        .HasColumnType("int")
                        .HasColumnName("RUNNING_TIME_MILLIS");

                    b.Property<string>("ServerHostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERVER_HOST_NAME");

                    b.Property<string>("ServerIpAddress")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SERVER_IP_ADDRESS");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.HasKey("VisitId", "ContentId", "HitStartDateTime", "HitTypeId");

                    b.HasIndex(new[] { "HitTypeId" }, "SERVER_HIT_SHTYP");

                    b.HasIndex(new[] { "VisitId" }, "SERVER_HIT_VISIT");

                    b.ToTable("SERVER_HIT", (string)null);
                });

            modelBuilder.Entity("Domain.ServerHitBin", b =>
                {
                    b.Property<string>("ServerHitBinId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SERVER_HIT_BIN_ID");

                    b.Property<DateTime?>("BinEndDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("BIN_END_DATE_TIME");

                    b.Property<DateTime?>("BinStartDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("BIN_START_DATE_TIME");

                    b.Property<string>("ContentId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("HitTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("HIT_TYPE_ID");

                    b.Property<string>("InternalContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INTERNAL_CONTENT_ID");

                    b.Property<int?>("MaxTimeMillis")
                        .HasColumnType("int")
                        .HasColumnName("MAX_TIME_MILLIS");

                    b.Property<int?>("MinTimeMillis")
                        .HasColumnType("int")
                        .HasColumnName("MIN_TIME_MILLIS");

                    b.Property<int?>("NumberHits")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER_HITS");

                    b.Property<string>("ServerHostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERVER_HOST_NAME");

                    b.Property<string>("ServerIpAddress")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SERVER_IP_ADDRESS");

                    b.Property<int?>("TotalTimeMillis")
                        .HasColumnType("int")
                        .HasColumnName("TOTAL_TIME_MILLIS");

                    b.HasKey("ServerHitBinId");

                    b.HasIndex(new[] { "HitTypeId" }, "SERVER_HBIN_TYPE");

                    b.ToTable("SERVER_HIT_BIN", (string)null);
                });

            modelBuilder.Entity("Domain.ServerHitType", b =>
                {
                    b.Property<string>("HitTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("HIT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("HitTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRVR_HT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRVR_HT_TP_TXSTMP");

                    b.ToTable("SERVER_HIT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ServiceRate", b =>
                {
                    b.Property<string>("ServiceRateId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MakeId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ProductStoreId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ServiceRateId");

                    b.HasIndex("MakeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductStoreId");

                    b.ToTable("SERVICE_RATES", (string)null);
                });

            modelBuilder.Entity("Domain.ServiceSemaphore", b =>
                {
                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SERVICE_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LockThread")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LOCK_THREAD");

                    b.Property<DateTime?>("LockTime")
                        .HasColumnType("datetime")
                        .HasColumnName("LOCK_TIME");

                    b.Property<string>("LockedByInstanceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCKED_BY_INSTANCE_ID");

                    b.HasKey("ServiceName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRVC_SMPHR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRVC_SMPHR_TXSTMP");

                    b.ToTable("SERVICE_SEMAPHORE", (string)null);
                });

            modelBuilder.Entity("Domain.ServiceSpecification", b =>
                {
                    b.Property<string>("ServiceSpecificationId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MakeId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<int>("StandardTimeInMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ServiceSpecificationId");

                    b.HasIndex("MakeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProductId");

                    b.ToTable("SERVICE_SPECIFICATION", (string)null);
                });

            modelBuilder.Entity("Domain.SettlementTerm", b =>
                {
                    b.Property<string>("SettlementTermId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SETTLEMENT_TERM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TermName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TERM_NAME");

                    b.Property<int?>("TermValue")
                        .HasColumnType("int")
                        .HasColumnName("TERM_VALUE");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("SettlementTermId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "STTLMNT_TRM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "STTLMNT_TRM_TXSTMP");

                    b.ToTable("SETTLEMENT_TERM", (string)null);
                });

            modelBuilder.Entity("Domain.Shipment", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<decimal?>("AdditionalShippingCharge")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ADDITIONAL_SHIPPING_CHARGE");

                    b.Property<string>("AddtlShippingChargeDesc")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ADDTL_SHIPPING_CHARGE_DESC");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("DestinationContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DESTINATION_CONTACT_MECH_ID");

                    b.Property<string>("DestinationFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DESTINATION_FACILITY_ID");

                    b.Property<string>("DestinationTelecomNumberId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DESTINATION_TELECOM_NUMBER_ID");

                    b.Property<DateTime?>("EstimatedArrivalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_ARRIVAL_DATE");

                    b.Property<string>("EstimatedArrivalWorkEffId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ESTIMATED_ARRIVAL_WORK_EFF_ID");

                    b.Property<DateTime?>("EstimatedReadyDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_READY_DATE");

                    b.Property<decimal?>("EstimatedShipCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ESTIMATED_SHIP_COST");

                    b.Property<DateTime?>("EstimatedShipDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_SHIP_DATE");

                    b.Property<string>("EstimatedShipWorkEffId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ESTIMATED_SHIP_WORK_EFF_ID");

                    b.Property<string>("HandlingInstructions")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HANDLING_INSTRUCTIONS");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("LatestCancelDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LATEST_CANCEL_DATE");

                    b.Property<string>("OriginContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGIN_CONTACT_MECH_ID");

                    b.Property<string>("OriginFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGIN_FACILITY_ID");

                    b.Property<string>("OriginTelecomNumberId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGIN_TELECOM_NUMBER_ID");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<string>("PicklistBinId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PICKLIST_BIN_ID");

                    b.Property<string>("PrimaryOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_ORDER_ID");

                    b.Property<string>("PrimaryReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_RETURN_ID");

                    b.Property<string>("PrimaryShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_SHIP_GROUP_SEQ_ID");

                    b.Property<string>("ShipmentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_TYPE_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("ShipmentId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHIPMENT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHIPMENT_TXSTMP");

                    b.HasIndex(new[] { "CurrencyUomId" }, "SHPMNT_CUOM");

                    b.HasIndex(new[] { "DestinationFacilityId" }, "SHPMNT_DFAC");

                    b.HasIndex(new[] { "DestinationContactMechId" }, "SHPMNT_DPAD");

                    b.HasIndex(new[] { "DestinationTelecomNumberId" }, "SHPMNT_DTCN");

                    b.HasIndex(new[] { "EstimatedArrivalWorkEffId" }, "SHPMNT_EARRWEFF");

                    b.HasIndex(new[] { "EstimatedShipWorkEffId" }, "SHPMNT_ESHWEFF");

                    b.HasIndex(new[] { "OriginFacilityId" }, "SHPMNT_OFAC");

                    b.HasIndex(new[] { "OriginContactMechId" }, "SHPMNT_OPAD");

                    b.HasIndex(new[] { "OriginTelecomNumberId" }, "SHPMNT_OTCN");

                    b.HasIndex(new[] { "PicklistBinId" }, "SHPMNT_PKLSTBIN");

                    b.HasIndex(new[] { "PrimaryOrderId" }, "SHPMNT_PODR");

                    b.HasIndex(new[] { "PrimaryReturnId" }, "SHPMNT_PRTNHDR");

                    b.HasIndex(new[] { "PartyIdFrom" }, "SHPMNT_PRTYFM");

                    b.HasIndex(new[] { "PartyIdTo" }, "SHPMNT_PRTYTO");

                    b.HasIndex(new[] { "StatusId" }, "SHPMNT_STTS");

                    b.HasIndex(new[] { "ShipmentTypeId" }, "SHPMNT_TYPE");

                    b.ToTable("SHIPMENT", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentAttribute", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ShipmentId", "AttrName");

                    b.HasIndex(new[] { "ShipmentId" }, "SHPMNT_ATTR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMT_ATTRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMT_ATTRT_TXSTMP");

                    b.ToTable("SHIPMENT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentBoxType", b =>
                {
                    b.Property<string>("ShipmentBoxTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_BOX_TYPE_ID");

                    b.Property<decimal?>("BoxHeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("BOX_HEIGHT");

                    b.Property<decimal?>("BoxLength")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("BOX_LENGTH");

                    b.Property<decimal?>("BoxWeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("BOX_WEIGHT");

                    b.Property<decimal?>("BoxWidth")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("BOX_WIDTH");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("DimensionUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DIMENSION_UOM_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("WeightUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEIGHT_UOM_ID");

                    b.HasKey("ShipmentBoxTypeId");

                    b.HasIndex(new[] { "DimensionUomId" }, "SHMT_BXTP_DUOM");

                    b.HasIndex(new[] { "WeightUomId" }, "SHMT_BXTP_WUOM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMT_BX_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMT_BX_TP_TXSTMP");

                    b.ToTable("SHIPMENT_BOX_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentContactMech", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentContactMechTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_CONTACT_MECH_TYPE_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ShipmentId", "ShipmentContactMechTypeId");

                    b.HasIndex(new[] { "ShipmentId" }, "SHPMT_CMECH");

                    b.HasIndex(new[] { "ContactMechId" }, "SHPMT_CMECH_CM");

                    b.HasIndex(new[] { "ShipmentContactMechTypeId" }, "SHPMT_CMECH_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPT_CNT_MCH_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPT_CNT_MCH_TXSTP");

                    b.ToTable("SHIPMENT_CONTACT_MECH", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentContactMechType", b =>
                {
                    b.Property<string>("ShipmentContactMechTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_CONTACT_MECH_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ShipmentContactMechTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHT_CNT_MCH_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHT_CNT_MCH_TP_TXS");

                    b.ToTable("SHIPMENT_CONTACT_MECH_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentCostEstimate", b =>
                {
                    b.Property<string>("ShipmentCostEstimateId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_COST_ESTIMATE_ID");

                    b.Property<string>("CarrierPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CARRIER_PARTY_ID");

                    b.Property<string>("CarrierRoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CARRIER_ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("FeaturePercent")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("FEATURE_PERCENT");

                    b.Property<decimal?>("FeaturePrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("FEATURE_PRICE");

                    b.Property<string>("GeoIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID_FROM");

                    b.Property<string>("GeoIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID_TO");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("OrderFlatPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ORDER_FLAT_PRICE");

                    b.Property<decimal?>("OrderItemFlatPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ORDER_ITEM_FLAT_PRICE");

                    b.Property<decimal?>("OrderPricePercent")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("ORDER_PRICE_PERCENT");

                    b.Property<decimal?>("OversizePrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("OVERSIZE_PRICE");

                    b.Property<decimal?>("OversizeUnit")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("OVERSIZE_UNIT");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PriceBreakId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRICE_BREAK_ID");

                    b.Property<decimal?>("PriceUnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PRICE_UNIT_PRICE");

                    b.Property<string>("PriceUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRICE_UOM_ID");

                    b.Property<string>("ProductFeatureGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_GROUP_ID");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("ProductStoreShipMethId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_SHIP_METH_ID");

                    b.Property<string>("QuantityBreakId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUANTITY_BREAK_ID");

                    b.Property<decimal?>("QuantityUnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("QUANTITY_UNIT_PRICE");

                    b.Property<string>("QuantityUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUANTITY_UOM_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.Property<decimal?>("ShippingPricePercent")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SHIPPING_PRICE_PERCENT");

                    b.Property<string>("WeightBreakId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEIGHT_BREAK_ID");

                    b.Property<decimal?>("WeightUnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("WEIGHT_UNIT_PRICE");

                    b.Property<string>("WeightUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEIGHT_UOM_ID");

                    b.HasKey("ShipmentCostEstimateId");

                    b.HasIndex(new[] { "ShipmentMethodTypeId", "CarrierPartyId", "CarrierRoleTypeId" }, "SHPMNT_CE_CSHMTH");

                    b.HasIndex(new[] { "GeoIdFrom" }, "SHPMNT_CE_FGEO");

                    b.HasIndex(new[] { "PartyId" }, "SHPMNT_CE_PARTY");

                    b.HasIndex(new[] { "PriceBreakId" }, "SHPMNT_CE_PRC_QB");

                    b.HasIndex(new[] { "PriceUomId" }, "SHPMNT_CE_PUOM");

                    b.HasIndex(new[] { "QuantityBreakId" }, "SHPMNT_CE_QNT_QB");

                    b.HasIndex(new[] { "QuantityUomId" }, "SHPMNT_CE_QUOM");

                    b.HasIndex(new[] { "RoleTypeId" }, "SHPMNT_CE_ROLET");

                    b.HasIndex(new[] { "GeoIdTo" }, "SHPMNT_CE_TGEO");

                    b.HasIndex(new[] { "WeightBreakId" }, "SHPMNT_CE_WHT_QB");

                    b.HasIndex(new[] { "WeightUomId" }, "SHPMNT_CE_WUOM");

                    b.HasIndex(new[] { "ProductStoreShipMethId" }, "SHPMNT_PS_SH_METH");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPT_CST_EST_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPT_CST_EST_TXSTP");

                    b.ToTable("SHIPMENT_COST_ESTIMATE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentGatewayConfig", b =>
                {
                    b.Property<string>("ShipmentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ShipmentGatewayConfTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_GATEWAY_CONF_TYPE_ID");

                    b.HasKey("ShipmentGatewayConfigId");

                    b.HasIndex(new[] { "ShipmentGatewayConfTypeId" }, "SGC_SGCT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPT_GTW_CNG_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPT_GTW_CNG_TXSTP");

                    b.ToTable("SHIPMENT_GATEWAY_CONFIG", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentGatewayConfigType", b =>
                {
                    b.Property<string>("ShipmentGatewayConfTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_GATEWAY_CONF_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ShipmentGatewayConfTypeId")
                        .HasName("PK_SHIPMENT_GATEWAY_CONFIG_TYP");

                    b.HasIndex(new[] { "ParentTypeId" }, "SGCT_PAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHT_GTW_CNG_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHT_GTW_CNG_TP_TXS");

                    b.ToTable("SHIPMENT_GATEWAY_CONFIG_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentGatewayDhl", b =>
                {
                    b.Property<string>("ShipmentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("AccessAccountNbr")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_ACCOUNT_NBR");

                    b.Property<string>("AccessPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_PASSWORD");

                    b.Property<string>("AccessShippingKey")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_SHIPPING_KEY");

                    b.Property<string>("AccessUserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_USER_ID");

                    b.Property<int?>("ConnectTimeout")
                        .HasColumnType("int")
                        .HasColumnName("CONNECT_TIMEOUT");

                    b.Property<string>("ConnectUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONNECT_URL");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("HeadAction")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HEAD_ACTION");

                    b.Property<string>("HeadVersion")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("HEAD_VERSION");

                    b.Property<string>("LabelImageFormat")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LABEL_IMAGE_FORMAT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RateEstimateTemplate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RATE_ESTIMATE_TEMPLATE");

                    b.HasKey("ShipmentGatewayConfigId");

                    b.HasIndex(new[] { "ShipmentGatewayConfigId" }, "SGDHL_SGC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPT_GTW_DHL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPT_GTW_DHL_TXSTP");

                    b.ToTable("SHIPMENT_GATEWAY_DHL", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentGatewayFedex", b =>
                {
                    b.Property<string>("ShipmentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("AccessAccountNbr")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_ACCOUNT_NBR");

                    b.Property<string>("AccessMeterNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_METER_NUMBER");

                    b.Property<string>("AccessUserKey")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_USER_KEY");

                    b.Property<string>("AccessUserPwd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_USER_PWD");

                    b.Property<string>("ConnectSoapUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONNECT_SOAP_URL");

                    b.Property<int?>("ConnectTimeout")
                        .HasColumnType("int")
                        .HasColumnName("CONNECT_TIMEOUT");

                    b.Property<string>("ConnectUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONNECT_URL");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DefaultDropoffType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DEFAULT_DROPOFF_TYPE");

                    b.Property<string>("DefaultPackagingType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DEFAULT_PACKAGING_TYPE");

                    b.Property<string>("LabelImageType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LABEL_IMAGE_TYPE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RateEstimateTemplate")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RATE_ESTIMATE_TEMPLATE");

                    b.Property<string>("TemplateShipment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TEMPLATE_SHIPMENT");

                    b.Property<string>("TemplateSubscription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TEMPLATE_SUBSCRIPTION");

                    b.HasKey("ShipmentGatewayConfigId");

                    b.HasIndex(new[] { "ShipmentGatewayConfigId" }, "SGFED_SGC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPT_GTW_FDX_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPT_GTW_FDX_TXSTP");

                    b.ToTable("SHIPMENT_GATEWAY_FEDEX", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentGatewayUp", b =>
                {
                    b.Property<string>("ShipmentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("AccessLicenseNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_LICENSE_NUMBER");

                    b.Property<string>("AccessPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_PASSWORD");

                    b.Property<string>("AccessUserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_USER_ID");

                    b.Property<string>("BillShipperAccountNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("BILL_SHIPPER_ACCOUNT_NUMBER");

                    b.Property<string>("CodAllowCod")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COD_ALLOW_COD");

                    b.Property<string>("CodFundsCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COD_FUNDS_CODE");

                    b.Property<decimal?>("CodSurchargeAmount")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("COD_SURCHARGE_AMOUNT");

                    b.Property<string>("CodSurchargeApplyToPackage")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COD_SURCHARGE_APPLY_TO_PACKAGE");

                    b.Property<string>("CodSurchargeCurrencyUomId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COD_SURCHARGE_CURRENCY_UOM_ID");

                    b.Property<int?>("ConnectTimeout")
                        .HasColumnType("int")
                        .HasColumnName("CONNECT_TIMEOUT");

                    b.Property<string>("ConnectUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONNECT_URL");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomerClassification")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CUSTOMER_CLASSIFICATION");

                    b.Property<string>("DefaultReturnLabelMemo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DEFAULT_RETURN_LABEL_MEMO");

                    b.Property<string>("DefaultReturnLabelSubject")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DEFAULT_RETURN_LABEL_SUBJECT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("MaxEstimateWeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("MAX_ESTIMATE_WEIGHT");

                    b.Property<decimal?>("MinEstimateWeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("MIN_ESTIMATE_WEIGHT");

                    b.Property<string>("SaveCertInfo")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SAVE_CERT_INFO");

                    b.Property<string>("SaveCertPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SAVE_CERT_PATH");

                    b.Property<string>("ShipperNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SHIPPER_NUMBER");

                    b.Property<string>("ShipperPickupType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SHIPPER_PICKUP_TYPE");

                    b.HasKey("ShipmentGatewayConfigId");

                    b.HasIndex(new[] { "ShipmentGatewayConfigId" }, "SGUPS_SGC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPT_GTW_UPS_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPT_GTW_UPS_TXSTP");

                    b.ToTable("SHIPMENT_GATEWAY_UPS", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentGatewayUsp", b =>
                {
                    b.Property<string>("ShipmentGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_GATEWAY_CONFIG_ID");

                    b.Property<string>("AccessPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_PASSWORD");

                    b.Property<string>("AccessUserId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACCESS_USER_ID");

                    b.Property<int?>("ConnectTimeout")
                        .HasColumnType("int")
                        .HasColumnName("CONNECT_TIMEOUT");

                    b.Property<string>("ConnectUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONNECT_URL");

                    b.Property<string>("ConnectUrlLabels")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONNECT_URL_LABELS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("MaxEstimateWeight")
                        .HasColumnType("int")
                        .HasColumnName("MAX_ESTIMATE_WEIGHT");

                    b.Property<string>("Test")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TEST");

                    b.HasKey("ShipmentGatewayConfigId");

                    b.HasIndex(new[] { "ShipmentGatewayConfigId" }, "SGUSPS_SGC");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPT_GTW_USS_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPT_GTW_USS_TXSTP");

                    b.ToTable("SHIPMENT_GATEWAY_USPS", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentItem", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("ShipmentContentDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SHIPMENT_CONTENT_DESCRIPTION");

                    b.HasKey("ShipmentId", "ShipmentItemSeqId");

                    b.HasIndex(new[] { "ProductId" }, "SHPMNT_ITM_PROD");

                    b.HasIndex(new[] { "ShipmentId" }, "SHPMNT_ITM_SHPMT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMNT_ITM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMNT_ITM_TXSTMP");

                    b.ToTable("SHIPMENT_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentItemBilling", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ShipmentId", "ShipmentItemSeqId", "InvoiceId", "InvoiceItemSeqId");

                    b.HasIndex(new[] { "InvoiceId", "InvoiceItemSeqId" }, "SHPMNT_ITBL_INIM");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentItemSeqId" }, "SHPMNT_ITBL_SPIM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPT_ITM_BLG_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPT_ITM_BLG_TXSTP");

                    b.ToTable("SHIPMENT_ITEM_BILLING", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentItemFeature", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ShipmentId", "ShipmentItemSeqId", "ProductFeatureId");

                    b.HasIndex(new[] { "ProductFeatureId" }, "SHPMNT_ITFT_FEAT");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentItemSeqId" }, "SHPMNT_ITFT_SPIM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPT_ITM_FTR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPT_ITM_FTR_TXSTP");

                    b.ToTable("SHIPMENT_ITEM_FEATURE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentMethodType", b =>
                {
                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("ShipmentMethodTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMT_MTD_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMT_MTD_TP_TXSTP");

                    b.ToTable("SHIPMENT_METHOD_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentPackage", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentPackageSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID");

                    b.Property<decimal?>("BoxHeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("BOX_HEIGHT");

                    b.Property<decimal?>("BoxLength")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("BOX_LENGTH");

                    b.Property<decimal?>("BoxWidth")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("BOX_WIDTH");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_CREATED");

                    b.Property<string>("DimensionUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DIMENSION_UOM_ID");

                    b.Property<decimal?>("InsuredValue")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("INSURED_VALUE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ShipmentBoxTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_BOX_TYPE_ID");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("WEIGHT");

                    b.Property<string>("WeightUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEIGHT_UOM_ID");

                    b.HasKey("ShipmentId", "ShipmentPackageSeqId");

                    b.HasIndex(new[] { "ShipmentBoxTypeId" }, "SHPKG_BXTYP");

                    b.HasIndex(new[] { "DimensionUomId" }, "SHPKG_DUOM");

                    b.HasIndex(new[] { "ShipmentId" }, "SHPKG_SHPMNT");

                    b.HasIndex(new[] { "WeightUomId" }, "SHPKG_WUOM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMNT_PCKG_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMNT_PCKG_TXSTMP");

                    b.ToTable("SHIPMENT_PACKAGE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentPackageContent", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentPackageSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID");

                    b.Property<string>("ShipmentItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("SubProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUB_PRODUCT_ID");

                    b.Property<decimal?>("SubProductQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("SUB_PRODUCT_QUANTITY");

                    b.HasKey("ShipmentId", "ShipmentPackageSeqId", "ShipmentItemSeqId");

                    b.HasIndex(new[] { "SubProductId" }, "PCK_CNTNT_PROD");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentItemSeqId" }, "PCK_CNTNT_SHITM");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentPackageSeqId" }, "PCK_CNTNT_SHPKG");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPT_PCG_CNT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPT_PCG_CNT_TXSTP");

                    b.ToTable("SHIPMENT_PACKAGE_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentPackageRouteSeg", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentPackageSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID");

                    b.Property<string>("ShipmentRouteSegmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ROUTE_SEGMENT_ID");

                    b.Property<string>("BoxNumber")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("BOX_NUMBER");

                    b.Property<decimal?>("CodAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("COD_AMOUNT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<decimal?>("InsuredAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("INSURED_AMOUNT");

                    b.Property<byte[]>("InternationalInvoice")
                        .HasColumnType("longblob")
                        .HasColumnName("INTERNATIONAL_INVOICE");

                    b.Property<string>("LabelHtml")
                        .HasColumnType("text")
                        .HasColumnName("LABEL_HTML");

                    b.Property<byte[]>("LabelImage")
                        .HasColumnType("longblob")
                        .HasColumnName("LABEL_IMAGE");

                    b.Property<byte[]>("LabelIntlSignImage")
                        .HasColumnType("longblob")
                        .HasColumnName("LABEL_INTL_SIGN_IMAGE");

                    b.Property<string>("LabelPrinted")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("LABEL_PRINTED")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("PackageOtherCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PACKAGE_OTHER_COST");

                    b.Property<decimal?>("PackageServiceCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PACKAGE_SERVICE_COST");

                    b.Property<decimal?>("PackageTransportCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("PACKAGE_TRANSPORT_COST");

                    b.Property<string>("TrackingCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TRACKING_CODE");

                    b.HasKey("ShipmentId", "ShipmentPackageSeqId", "ShipmentRouteSegmentId");

                    b.HasIndex(new[] { "CurrencyUomId" }, "SHPKRTSG_CUOM");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentRouteSegmentId" }, "SHPKRTSG_RTSG");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentPackageSeqId" }, "SHPKRTSG_SHPKG");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHT_PCG_RT_SG_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHT_PCG_RT_SG_TXSP");

                    b.ToTable("SHIPMENT_PACKAGE_ROUTE_SEG", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentReceipt", b =>
                {
                    b.Property<string>("ReceiptId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECEIPT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DatetimeReceived")
                        .HasColumnType("datetime")
                        .HasColumnName("DATETIME_RECEIVED");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<string>("ItemDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ITEM_DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("QuantityAccepted")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_ACCEPTED");

                    b.Property<decimal?>("QuantityRejected")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_REJECTED");

                    b.Property<string>("ReceivedByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("RECEIVED_BY_USER_LOGIN_ID");

                    b.Property<string>("RejectionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REJECTION_ID");

                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("ReturnItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ITEM_SEQ_ID");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                    b.Property<string>("ShipmentPackageSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID");

                    b.HasKey("ReceiptId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMNT_RCPT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMNT_RCPT_TXSTMP");

                    b.HasIndex(new[] { "InventoryItemId" }, "SHP_RCPT_INVITM");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "SHP_RCPT_ORDITM");

                    b.HasIndex(new[] { "ProductId" }, "SHP_RCPT_PROD");

                    b.HasIndex(new[] { "RejectionId" }, "SHP_RCPT_REJRSN");

                    b.HasIndex(new[] { "ReturnId", "ReturnItemSeqId" }, "SHP_RCPT_RETINVITM");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentPackageSeqId" }, "SHP_RCPT_SHPKG");

                    b.HasIndex(new[] { "ReceivedByUserLoginId" }, "SHP_RCPT_USERLGN");

                    b.ToTable("SHIPMENT_RECEIPT", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentReceiptRole", b =>
                {
                    b.Property<string>("ReceiptId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECEIPT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ReceiptId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMT_RCT_RL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMT_RCT_RL_TXSTP");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "SHP_RCPTRL_PTRL");

                    b.HasIndex(new[] { "PartyId" }, "SHP_RCPTRL_PTY");

                    b.HasIndex(new[] { "ReceiptId" }, "SHP_RCPTRL_RCPT");

                    b.ToTable("SHIPMENT_RECEIPT_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentRouteSegment", b =>
                {
                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentRouteSegmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ROUTE_SEGMENT_ID");

                    b.Property<DateTime?>("ActualArrivalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ACTUAL_ARRIVAL_DATE");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ACTUAL_COST");

                    b.Property<decimal?>("ActualOtherCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ACTUAL_OTHER_COST");

                    b.Property<decimal?>("ActualServiceCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ACTUAL_SERVICE_COST");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ACTUAL_START_DATE");

                    b.Property<decimal?>("ActualTransportCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ACTUAL_TRANSPORT_COST");

                    b.Property<decimal?>("BillingWeight")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("BILLING_WEIGHT");

                    b.Property<string>("BillingWeightUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BILLING_WEIGHT_UOM_ID");

                    b.Property<string>("CarrierDeliveryZone")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CARRIER_DELIVERY_ZONE");

                    b.Property<string>("CarrierPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CARRIER_PARTY_ID");

                    b.Property<string>("CarrierRestrictionCodes")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CARRIER_RESTRICTION_CODES");

                    b.Property<string>("CarrierRestrictionDesc")
                        .HasColumnType("text")
                        .HasColumnName("CARRIER_RESTRICTION_DESC");

                    b.Property<string>("CarrierServiceStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CARRIER_SERVICE_STATUS_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<string>("DeliveryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DELIVERY_ID");

                    b.Property<string>("DestContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEST_CONTACT_MECH_ID");

                    b.Property<string>("DestFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEST_FACILITY_ID");

                    b.Property<string>("DestTelecomNumberId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DEST_TELECOM_NUMBER_ID");

                    b.Property<DateTime?>("EstimatedArrivalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_ARRIVAL_DATE");

                    b.Property<DateTime?>("EstimatedStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_START_DATE");

                    b.Property<DateTime?>("HomeDeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("HOME_DELIVERY_DATE");

                    b.Property<string>("HomeDeliveryType")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("HOME_DELIVERY_TYPE");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OriginContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGIN_CONTACT_MECH_ID");

                    b.Property<string>("OriginFacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGIN_FACILITY_ID");

                    b.Property<string>("OriginTelecomNumberId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGIN_TELECOM_NUMBER_ID");

                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.Property<string>("ThirdPartyAccountNumber")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("THIRD_PARTY_ACCOUNT_NUMBER");

                    b.Property<string>("ThirdPartyCountryGeoCode")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("THIRD_PARTY_COUNTRY_GEO_CODE");

                    b.Property<string>("ThirdPartyPostalCode")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("THIRD_PARTY_POSTAL_CODE");

                    b.Property<string>("TrackingDigest")
                        .HasColumnType("text")
                        .HasColumnName("TRACKING_DIGEST");

                    b.Property<string>("TrackingIdNumber")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TRACKING_ID_NUMBER");

                    b.Property<string>("UpdatedByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("UPDATED_BY_USER_LOGIN_ID");

                    b.Property<byte[]>("UpsHighValueReport")
                        .HasColumnType("longblob")
                        .HasColumnName("UPS_HIGH_VALUE_REPORT");

                    b.HasKey("ShipmentId", "ShipmentRouteSegmentId");

                    b.HasIndex(new[] { "BillingWeightUomId" }, "SHPKRTSG_BWUOM");

                    b.HasIndex(new[] { "CarrierServiceStatusId" }, "SHPKRTSG_CSSTS");

                    b.HasIndex(new[] { "CarrierPartyId" }, "SHPMT_RTSEG_CPTY");

                    b.HasIndex(new[] { "CurrencyUomId" }, "SHPMT_RTSEG_CUOM");

                    b.HasIndex(new[] { "DeliveryId" }, "SHPMT_RTSEG_DEL");

                    b.HasIndex(new[] { "DestFacilityId" }, "SHPMT_RTSEG_DFAC");

                    b.HasIndex(new[] { "DestContactMechId" }, "SHPMT_RTSEG_DPAD");

                    b.HasIndex(new[] { "DestTelecomNumberId" }, "SHPMT_RTSEG_DTCN");

                    b.HasIndex(new[] { "OriginFacilityId" }, "SHPMT_RTSEG_OFAC");

                    b.HasIndex(new[] { "OriginContactMechId" }, "SHPMT_RTSEG_OPAD");

                    b.HasIndex(new[] { "OriginTelecomNumberId" }, "SHPMT_RTSEG_OTCN");

                    b.HasIndex(new[] { "ShipmentMethodTypeId" }, "SHPMT_RTSEG_SHMT");

                    b.HasIndex(new[] { "ShipmentId" }, "SHPMT_RTSEG_SHPMT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMT_RT_SGT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMT_RT_SGT_TXSTP");

                    b.ToTable("SHIPMENT_ROUTE_SEGMENT", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentStatus", b =>
                {
                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.HasKey("StatusId", "ShipmentId");

                    b.HasIndex(new[] { "ShipmentId" }, "SHPMNT_STTS_SHMT");

                    b.HasIndex(new[] { "StatusId" }, "SHPMNT_STTS_STTS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMNT_STTS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMNT_STTS_TXSTMP");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "SHPMNT_STTS_USRLGN");

                    b.ToTable("SHIPMENT_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentTimeEstimate", b =>
                {
                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("GeoIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID_TO");

                    b.Property<string>("GeoIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID_FROM");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("LeadTime")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("LEAD_TIME");

                    b.Property<string>("LeadTimeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LEAD_TIME_UOM_ID");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUMBER");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("ShipmentMethodTypeId", "PartyId", "RoleTypeId", "GeoIdTo", "GeoIdFrom", "FromDate");

                    b.HasIndex(new[] { "GeoIdFrom" }, "SHIPT_EST_GEO_FROM");

                    b.HasIndex(new[] { "GeoIdTo" }, "SHIPT_EST_GEO_TO");

                    b.HasIndex(new[] { "ShipmentMethodTypeId", "PartyId", "RoleTypeId" }, "SHIPT_EST_METHOD");

                    b.HasIndex(new[] { "LeadTimeUomId" }, "SHIPT_EST_UOM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMT_TM_EST_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMT_TM_EST_TXSTP");

                    b.ToTable("SHIPMENT_TIME_ESTIMATE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentType", b =>
                {
                    b.Property<string>("ShipmentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("ShipmentTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMNT_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "SHPMNT_TYPPAR");

                    b.ToTable("SHIPMENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ShipmentTypeAttr", b =>
                {
                    b.Property<string>("ShipmentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ShipmentTypeId", "AttrName");

                    b.HasIndex(new[] { "ShipmentTypeId" }, "SHPMNT_TYPATR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPMT_TP_ATR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPMT_TP_ATR_TXSTP");

                    b.ToTable("SHIPMENT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.ShippingDocument", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DOCUMENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ShipmentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ID");

                    b.Property<string>("ShipmentItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_ITEM_SEQ_ID");

                    b.Property<string>("ShipmentPackageSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_PACKAGE_SEQ_ID");

                    b.HasKey("DocumentId");

                    b.HasIndex(new[] { "DocumentId" }, "SHPNG_DOC_DOC");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentPackageSeqId" }, "SHPNG_DOC_SHPKG");

                    b.HasIndex(new[] { "ShipmentId", "ShipmentItemSeqId" }, "SHPNG_DOC_SMITM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPPNG_DCMT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPPNG_DCMT_TXSTMP");

                    b.ToTable("SHIPPING_DOCUMENT", (string)null);
                });

            modelBuilder.Entity("Domain.ShoppingList", b =>
                {
                    b.Property<string>("ShoppingListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOPPING_LIST_ID");

                    b.Property<string>("CarrierPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CARRIER_PARTY_ID");

                    b.Property<string>("CarrierRoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CARRIER_ROLE_TYPE_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrencyUom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("IsActive")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_ACTIVE")
                        .IsFixedLength();

                    b.Property<string>("IsPublic")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_PUBLIC")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastAdminModified")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_ADMIN_MODIFIED");

                    b.Property<DateTime?>("LastOrderedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_ORDERED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ListName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("LIST_NAME");

                    b.Property<string>("ParentShoppingListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_SHOPPING_LIST_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PAYMENT_METHOD_ID");

                    b.Property<string>("ProductPromoCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_PROMO_CODE_ID");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("RecurrenceInfoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECURRENCE_INFO_ID");

                    b.Property<string>("ShipmentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIPMENT_METHOD_TYPE_ID");

                    b.Property<string>("ShoppingListTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOPPING_LIST_TYPE_ID");

                    b.Property<string>("VisitorId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISITOR_ID");

                    b.HasKey("ShoppingListId");

                    b.HasIndex(new[] { "ContactMechId" }, "SHLIST_CMECH");

                    b.HasIndex(new[] { "ShipmentMethodTypeId", "CarrierPartyId", "CarrierRoleTypeId" }, "SHLIST_CSSM");

                    b.HasIndex(new[] { "ParentShoppingListId" }, "SHLIST_PARENT");

                    b.HasIndex(new[] { "ProductStoreId" }, "SHLIST_PRDS");

                    b.HasIndex(new[] { "ProductPromoCodeId" }, "SHLIST_PRMCD");

                    b.HasIndex(new[] { "PartyId" }, "SHLIST_PTY");

                    b.HasIndex(new[] { "PaymentMethodId" }, "SHLIST_PYMETH");

                    b.HasIndex(new[] { "RecurrenceInfoId" }, "SHLIST_RECINFO");

                    b.HasIndex(new[] { "ShoppingListTypeId" }, "SHLIST_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPPNG_LST_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPPNG_LST_TXSTMP");

                    b.ToTable("SHOPPING_LIST", (string)null);
                });

            modelBuilder.Entity("Domain.ShoppingListItem", b =>
                {
                    b.Property<string>("ShoppingListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOPPING_LIST_ID");

                    b.Property<string>("ShoppingListItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOPPING_LIST_ITEM_SEQ_ID");

                    b.Property<string>("ConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONFIG_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("ModifiedPrice")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("MODIFIED_PRICE");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY");

                    b.Property<decimal?>("QuantityPurchased")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_PURCHASED");

                    b.Property<decimal?>("ReservLength")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_LENGTH");

                    b.Property<decimal?>("ReservPersons")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_PERSONS");

                    b.Property<DateTime?>("ReservStart")
                        .HasColumnType("datetime")
                        .HasColumnName("RESERV_START");

                    b.HasKey("ShoppingListId", "ShoppingListItemSeqId");

                    b.HasIndex(new[] { "ShoppingListId" }, "SHLIST_ITEM_LIST");

                    b.HasIndex(new[] { "ProductId" }, "SHLIST_ITEM_PROD");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPG_LST_ITM_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPG_LST_ITM_TXSTP");

                    b.ToTable("SHOPPING_LIST_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.ShoppingListItemSurvey", b =>
                {
                    b.Property<string>("ShoppingListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOPPING_LIST_ID");

                    b.Property<string>("ShoppingListItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOPPING_LIST_ITEM_SEQ_ID");

                    b.Property<string>("SurveyResponseId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_RESPONSE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ShoppingListId", "ShoppingListItemSeqId", "SurveyResponseId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHG_LST_ITM_SRV_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHG_LST_ITM_SRV_TS");

                    b.HasIndex(new[] { "ShoppingListId", "ShoppingListItemSeqId" }, "SHLIST_ITSUR_ITEM");

                    b.HasIndex(new[] { "ShoppingListId" }, "SHLIST_ITSUR_LIST");

                    b.HasIndex(new[] { "SurveyResponseId" }, "SHLIST_ITSUR_RESP");

                    b.ToTable("SHOPPING_LIST_ITEM_SURVEY", (string)null);
                });

            modelBuilder.Entity("Domain.ShoppingListType", b =>
                {
                    b.Property<string>("ShoppingListTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOPPING_LIST_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ShoppingListTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHPPG_LST_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHPPG_LST_TP_TXSTP");

                    b.ToTable("SHOPPING_LIST_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.ShoppingListWorkEffort", b =>
                {
                    b.Property<string>("ShoppingListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOPPING_LIST_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ShoppingListId", "WorkEffortId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SHG_LST_WRK_EFT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SHG_LST_WRK_EFT_TS");

                    b.HasIndex(new[] { "ShoppingListId" }, "SHLISTWE_SHLST");

                    b.HasIndex(new[] { "WorkEffortId" }, "SHLISTWE_WEFF");

                    b.ToTable("SHOPPING_LIST_WORK_EFFORT", (string)null);
                });

            modelBuilder.Entity("Domain.SkillType", b =>
                {
                    b.Property<string>("SkillTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SKILL_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("SkillTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "PARNT_SKILL_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SKILL_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SKILL_TYPE_TXSTMP");

                    b.ToTable("SKILL_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.StandardLanguage", b =>
                {
                    b.Property<string>("StandardLanguageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STANDARD_LANGUAGE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("LangCharset")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LANG_CHARSET");

                    b.Property<string>("LangCode2")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("LANG_CODE2");

                    b.Property<string>("LangCode3b")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("LANG_CODE3B");

                    b.Property<string>("LangCode3t")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("LANG_CODE3T");

                    b.Property<string>("LangFamily")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LANG_FAMILY");

                    b.Property<string>("LangName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LANG_NAME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("StandardLanguageId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "STNDRD_LNGG_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "STNDRD_LNGG_TXSTMP");

                    b.ToTable("STANDARD_LANGUAGE", (string)null);
                });

            modelBuilder.Entity("Domain.StatusItem", b =>
                {
                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("SequenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEQUENCE_ID");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("STATUS_CODE");

                    b.Property<string>("StatusTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_TYPE_ID");

                    b.HasKey("StatusId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "STATUS_ITEM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "STATUS_ITEM_TXSTMP");

                    b.HasIndex(new[] { "StatusTypeId" }, "STATUS_TO_TYPE");

                    b.ToTable("STATUS_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.StatusType", b =>
                {
                    b.Property<string>("StatusTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("StatusTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "STATUS_TYPE_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "STATUS_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "STATUS_TYPE_TXSTMP");

                    b.ToTable("STATUS_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.StatusValidChange", b =>
                {
                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("StatusIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID_TO");

                    b.Property<string>("ConditionExpression")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONDITION_EXPRESSION");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TransitionName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TRANSITION_NAME");

                    b.HasKey("StatusId", "StatusIdTo");

                    b.HasIndex(new[] { "StatusId" }, "STATUS_CHG_MAIN");

                    b.HasIndex(new[] { "StatusIdTo" }, "STATUS_CHG_TO");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "STS_VLD_CHG_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "STS_VLD_CHG_TXSTMP");

                    b.ToTable("STATUS_VALID_CHANGE", (string)null);
                });

            modelBuilder.Entity("Domain.Subscription", b =>
                {
                    b.Property<string>("SubscriptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_ID");

                    b.Property<string>("AutomaticExtend")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("AUTOMATIC_EXTEND")
                        .IsFixedLength();

                    b.Property<int?>("AvailableTime")
                        .HasColumnType("int")
                        .HasColumnName("AVAILABLE_TIME");

                    b.Property<string>("AvailableTimeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AVAILABLE_TIME_UOM_ID");

                    b.Property<int?>("CanclAutmExtTime")
                        .HasColumnType("int")
                        .HasColumnName("CANCL_AUTM_EXT_TIME");

                    b.Property<string>("CanclAutmExtTimeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CANCL_AUTM_EXT_TIME_UOM_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("ExpirationCompletedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EXPIRATION_COMPLETED_DATE");

                    b.Property<string>("ExternalSubscriptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXTERNAL_SUBSCRIPTION_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<int?>("GracePeriodOnExpiry")
                        .HasColumnType("int")
                        .HasColumnName("GRACE_PERIOD_ON_EXPIRY");

                    b.Property<string>("GracePeriodOnExpiryUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GRACE_PERIOD_ON_EXPIRY_UOM_ID");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("MaxLifeTime")
                        .HasColumnType("int")
                        .HasColumnName("MAX_LIFE_TIME");

                    b.Property<string>("MaxLifeTimeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MAX_LIFE_TIME_UOM_ID");

                    b.Property<string>("NeedTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NEED_TYPE_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("OriginatedFromPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGINATED_FROM_PARTY_ID");

                    b.Property<string>("OriginatedFromRoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORIGINATED_FROM_ROLE_TYPE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PartyNeedId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_NEED_ID");

                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<DateTime?>("PurchaseFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PURCHASE_FROM_DATE");

                    b.Property<DateTime?>("PurchaseThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PURCHASE_THRU_DATE");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("SubscriptionResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_RESOURCE_ID");

                    b.Property<string>("SubscriptionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<int?>("UseCountLimit")
                        .HasColumnType("int")
                        .HasColumnName("USE_COUNT_LIMIT");

                    b.Property<int?>("UseTime")
                        .HasColumnType("int")
                        .HasColumnName("USE_TIME");

                    b.Property<string>("UseTimeUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USE_TIME_UOM_ID");

                    b.HasKey("SubscriptionId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SBSCRPTN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SBSCRPTN_TXSTMP");

                    b.HasIndex(new[] { "AvailableTimeUomId" }, "SUBSC_ATU");

                    b.HasIndex(new[] { "ContactMechId" }, "SUBSC_CONT_MECH");

                    b.HasIndex(new[] { "CanclAutmExtTimeUomId" }, "SUBSC_CTU");

                    b.HasIndex(new[] { "GracePeriodOnExpiryUomId" }, "SUBSC_GTU");

                    b.HasIndex(new[] { "InventoryItemId" }, "SUBSC_INV_ITM");

                    b.HasIndex(new[] { "MaxLifeTimeUomId" }, "SUBSC_MTU");

                    b.HasIndex(new[] { "NeedTypeId" }, "SUBSC_NEED_TYPE");

                    b.HasIndex(new[] { "OriginatedFromPartyId" }, "SUBSC_OPARTY");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "SUBSC_ORDERITM");

                    b.HasIndex(new[] { "OriginatedFromRoleTypeId" }, "SUBSC_OROLE_TYPE");

                    b.HasIndex(new[] { "PartyId" }, "SUBSC_PARTY");

                    b.HasIndex(new[] { "ProductId" }, "SUBSC_PRODUCT");

                    b.HasIndex(new[] { "ProductCategoryId" }, "SUBSC_PROD_CAT");

                    b.HasIndex(new[] { "RoleTypeId" }, "SUBSC_ROLE_TYPE");

                    b.HasIndex(new[] { "SubscriptionResourceId" }, "SUBSC_SRESRC");

                    b.HasIndex(new[] { "SubscriptionTypeId" }, "SUBSC_TO_TYPE");

                    b.HasIndex(new[] { "UseTimeUomId" }, "SUBSC_UTU");

                    b.ToTable("SUBSCRIPTION", (string)null);
                });

            modelBuilder.Entity("Domain.SubscriptionActivity", b =>
                {
                    b.Property<string>("SubscriptionActivityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_ACTIVITY_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_SENT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SubscriptionActivityId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SBSCRPN_ACTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SBSCRPN_ACTT_TXSTP");

                    b.ToTable("SUBSCRIPTION_ACTIVITY", (string)null);
                });

            modelBuilder.Entity("Domain.SubscriptionAttribute", b =>
                {
                    b.Property<string>("SubscriptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SubscriptionId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SBSCRPN_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SBSCRPN_ATTT_TXSTP");

                    b.HasIndex(new[] { "SubscriptionId" }, "SUBSC_ATTR");

                    b.ToTable("SUBSCRIPTION_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.SubscriptionCommEvent", b =>
                {
                    b.Property<string>("SubscriptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_ID");

                    b.Property<string>("CommunicationEventId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COMMUNICATION_EVENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SubscriptionId", "CommunicationEventId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SBSCN_CMM_EVT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SBSCN_CMM_EVT_TXSP");

                    b.HasIndex(new[] { "CommunicationEventId" }, "SUBSC_COM_EVENT");

                    b.HasIndex(new[] { "SubscriptionId" }, "SUBSC_SUBSC");

                    b.ToTable("SUBSCRIPTION_COMM_EVENT", (string)null);
                });

            modelBuilder.Entity("Domain.SubscriptionFulfillmentPiece", b =>
                {
                    b.Property<string>("SubscriptionActivityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_ACTIVITY_ID");

                    b.Property<string>("SubscriptionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SubscriptionActivityId", "SubscriptionId")
                        .HasName("PK_SUBSCRIPTION_FULFILLMENT_PI");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SBSCN_FLFLT_PC_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SBSCN_FLFLT_PC_TXS");

                    b.HasIndex(new[] { "SubscriptionId" }, "SUBSC_FP");

                    b.HasIndex(new[] { "SubscriptionActivityId" }, "SUBSC_FP_ACT");

                    b.ToTable("SUBSCRIPTION_FULFILLMENT_PIECE", (string)null);
                });

            modelBuilder.Entity("Domain.SubscriptionResource", b =>
                {
                    b.Property<string>("SubscriptionResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_RESOURCE_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_RESOURCE_ID");

                    b.Property<string>("ServiceNameOnExpiry")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERVICE_NAME_ON_EXPIRY");

                    b.Property<string>("WebSiteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_ID");

                    b.HasKey("SubscriptionResourceId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SBSCRPN_RSC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SBSCRPN_RSC_TXSTMP");

                    b.HasIndex(new[] { "ContentId" }, "SUBSC_RES_CNTNT");

                    b.HasIndex(new[] { "ParentResourceId" }, "SUBSC_RES_PARENT");

                    b.HasIndex(new[] { "WebSiteId" }, "SUBSC_RES_WBSITE");

                    b.ToTable("SUBSCRIPTION_RESOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.SubscriptionType", b =>
                {
                    b.Property<string>("SubscriptionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("SubscriptionTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SBSCRPTN_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SBSCRPTN_TP_TXSTMP");

                    b.HasIndex(new[] { "ParentTypeId" }, "SUBSC_TYPE_PARENT");

                    b.ToTable("SUBSCRIPTION_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.SubscriptionTypeAttr", b =>
                {
                    b.Property<string>("SubscriptionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBSCRIPTION_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SubscriptionTypeId", "AttrName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SBSCRN_TP_ATR_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SBSCRN_TP_ATR_TXSP");

                    b.HasIndex(new[] { "SubscriptionTypeId" }, "SUBSC_TYPE_ATTR");

                    b.ToTable("SUBSCRIPTION_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.SupplierPrefOrder", b =>
                {
                    b.Property<string>("SupplierPrefOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUPPLIER_PREF_ORDER_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SupplierPrefOrderId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SPPR_PRF_ORR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SPPR_PRF_ORR_TXSTP");

                    b.ToTable("SUPPLIER_PREF_ORDER", (string)null);
                });

            modelBuilder.Entity("Domain.SupplierProduct", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("CurrencyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENCY_UOM_ID");

                    b.Property<decimal>("MinimumOrderQuantity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("MINIMUM_ORDER_QUANTITY");

                    b.Property<DateTime>("AvailableFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AVAILABLE_FROM_DATE");

                    b.Property<string>("AgreementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ID");

                    b.Property<string>("AgreementItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AGREEMENT_ITEM_SEQ_ID");

                    b.Property<DateTime?>("AvailableThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("AVAILABLE_THRU_DATE");

                    b.Property<string>("CanDropShip")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("CAN_DROP_SHIP")
                        .IsFixedLength();

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("LastPrice")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("LAST_PRICE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("OrderQtyIncrements")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("ORDER_QTY_INCREMENTS");

                    b.Property<string>("QuantityUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("QUANTITY_UOM_ID");

                    b.Property<decimal?>("ShippingPrice")
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("SHIPPING_PRICE");

                    b.Property<decimal?>("StandardLeadTimeDays")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("STANDARD_LEAD_TIME_DAYS");

                    b.Property<string>("SupplierPrefOrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUPPLIER_PREF_ORDER_ID");

                    b.Property<string>("SupplierProductId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SUPPLIER_PRODUCT_ID");

                    b.Property<string>("SupplierProductName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SUPPLIER_PRODUCT_NAME");

                    b.Property<string>("SupplierRatingTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUPPLIER_RATING_TYPE_ID");

                    b.Property<decimal?>("UnitsIncluded")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("UNITS_INCLUDED");

                    b.HasKey("ProductId", "PartyId", "CurrencyUomId", "MinimumOrderQuantity", "AvailableFromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SPPLR_PRDCT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SPPLR_PRDCT_TXSTMP");

                    b.HasIndex(new[] { "AgreementId", "AgreementItemSeqId" }, "SUPPL_PROD_AGRIT");

                    b.HasIndex(new[] { "CurrencyUomId" }, "SUPPL_PROD_CUOM");

                    b.HasIndex(new[] { "PartyId" }, "SUPPL_PROD_PARTY");

                    b.HasIndex(new[] { "ProductId" }, "SUPPL_PROD_PROD");

                    b.HasIndex(new[] { "QuantityUomId" }, "SUPPL_PROD_QUOM");

                    b.HasIndex(new[] { "SupplierPrefOrderId" }, "SUPPL_PROD_SPORD");

                    b.HasIndex(new[] { "SupplierRatingTypeId" }, "SUPPL_PROD_SRTPE");

                    b.ToTable("SUPPLIER_PRODUCT", (string)null);
                });

            modelBuilder.Entity("Domain.SupplierProductFeature", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ProductFeatureId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_FEATURE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("IdCode")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ID_CODE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.HasKey("PartyId", "ProductFeatureId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SPPR_PRT_FTR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SPPR_PRT_FTR_TXSTP");

                    b.HasIndex(new[] { "ProductFeatureId" }, "SUPPL_FEAT_FEAT");

                    b.HasIndex(new[] { "PartyId" }, "SUPPL_FEAT_PARTY");

                    b.HasIndex(new[] { "UomId" }, "SUPPL_FEAT_UOM");

                    b.ToTable("SUPPLIER_PRODUCT_FEATURE", (string)null);
                });

            modelBuilder.Entity("Domain.SupplierRatingType", b =>
                {
                    b.Property<string>("SupplierRatingTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUPPLIER_RATING_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SupplierRatingTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SPPR_RTG_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SPPR_RTG_TP_TXSTMP");

                    b.ToTable("SUPPLIER_RATING_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Survey", b =>
                {
                    b.Property<string>("SurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_ID");

                    b.Property<string>("AcroFormContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACRO_FORM_CONTENT_ID");

                    b.Property<string>("AllowMultiple")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALLOW_MULTIPLE")
                        .IsFixedLength();

                    b.Property<string>("AllowUpdate")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALLOW_UPDATE")
                        .IsFixedLength();

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("IsAnonymous")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_ANONYMOUS")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ResponseService")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RESPONSE_SERVICE");

                    b.Property<string>("SubmitCaption")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SUBMIT_CAPTION");

                    b.Property<string>("SurveyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SURVEY_NAME");

                    b.HasKey("SurveyId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SURVEY_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SURVEY_TXSTMP");

                    b.ToTable("SURVEY", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyApplType", b =>
                {
                    b.Property<string>("SurveyApplTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_APPL_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SurveyApplTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_APPL_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_APPL_TP_TXSTMP");

                    b.ToTable("SURVEY_APPL_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyMultiResp", b =>
                {
                    b.Property<string>("SurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_ID");

                    b.Property<string>("SurveyMultiRespId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_MULTI_RESP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MultiRespTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MULTI_RESP_TITLE");

                    b.HasKey("SurveyId", "SurveyMultiRespId");

                    b.HasIndex(new[] { "SurveyId" }, "SRVYMRSP_SRVY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_MLT_RSP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_MLT_RSP_TXSTMP");

                    b.ToTable("SURVEY_MULTI_RESP", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyMultiRespColumn", b =>
                {
                    b.Property<string>("SurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_ID");

                    b.Property<string>("SurveyMultiRespId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_MULTI_RESP_ID");

                    b.Property<string>("SurveyMultiRespColId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_MULTI_RESP_COL_ID");

                    b.Property<string>("ColumnTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COLUMN_TITLE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("SurveyId", "SurveyMultiRespId", "SurveyMultiRespColId");

                    b.HasIndex(new[] { "SurveyId", "SurveyMultiRespId" }, "SRVYMRSPCL_SMRESP");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_MLT_RSP_CLN_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_MLT_RSP_CLN_TS");

                    b.ToTable("SURVEY_MULTI_RESP_COLUMN", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyPage", b =>
                {
                    b.Property<string>("SurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_ID");

                    b.Property<string>("SurveyPageSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_PAGE_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PageName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PAGE_NAME");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("SurveyId", "SurveyPageSeqId");

                    b.HasIndex(new[] { "SurveyId" }, "SRVYPAGE_SRVY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SURVEY_PAGE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SURVEY_PAGE_TXSTMP");

                    b.ToTable("SURVEY_PAGE", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyQuestion", b =>
                {
                    b.Property<string>("SurveyQuestionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_QUESTION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("EnumTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ENUM_TYPE_ID");

                    b.Property<string>("FormatString")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("FORMAT_STRING");

                    b.Property<string>("GeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GEO_ID");

                    b.Property<string>("Hint")
                        .HasColumnType("text")
                        .HasColumnName("HINT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("Question")
                        .HasColumnType("text")
                        .HasColumnName("QUESTION");

                    b.Property<string>("SurveyQuestionCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_QUESTION_CATEGORY_ID");

                    b.Property<string>("SurveyQuestionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_QUESTION_TYPE_ID");

                    b.HasKey("SurveyQuestionId");

                    b.HasIndex(new[] { "GeoId" }, "SRVYQST_GEO");

                    b.HasIndex(new[] { "SurveyQuestionCategoryId" }, "SRVYQST_SRVYQTCT");

                    b.HasIndex(new[] { "SurveyQuestionTypeId" }, "SRVYQST_SRVYQTP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_QSTN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_QSTN_TXSTMP");

                    b.ToTable("SURVEY_QUESTION", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyQuestionAppl", b =>
                {
                    b.Property<string>("SurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_ID");

                    b.Property<string>("SurveyQuestionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_QUESTION_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ExternalFieldRef")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("EXTERNAL_FIELD_REF");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RequiredField")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRED_FIELD")
                        .IsFixedLength();

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<string>("SurveyMultiRespColId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_MULTI_RESP_COL_ID");

                    b.Property<string>("SurveyMultiRespId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_MULTI_RESP_ID");

                    b.Property<string>("SurveyPageSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_PAGE_SEQ_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<string>("WithSurveyOptionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WITH_SURVEY_OPTION_SEQ_ID");

                    b.Property<string>("WithSurveyQuestionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WITH_SURVEY_QUESTION_ID");

                    b.HasKey("SurveyId", "SurveyQuestionId", "FromDate");

                    b.HasIndex(new[] { "SurveyId" }, "SRVYQSTAPL_SRVY");

                    b.HasIndex(new[] { "SurveyQuestionId" }, "SRVYQSTAPL_SRVYQ");

                    b.HasIndex(new[] { "WithSurveyQuestionId", "WithSurveyOptionSeqId" }, "SRVYQSTAPL_SVQO");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_QSN_APL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_QSN_APL_TXSTMP");

                    b.ToTable("SURVEY_QUESTION_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyQuestionCategory", b =>
                {
                    b.Property<string>("SurveyQuestionCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_QUESTION_CATEGORY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_CATEGORY_ID");

                    b.HasKey("SurveyQuestionCategoryId");

                    b.HasIndex(new[] { "ParentCategoryId" }, "SRVYQSTCT_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_QSN_CTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_QSN_CTR_TXSTMP");

                    b.ToTable("SURVEY_QUESTION_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyQuestionOption", b =>
                {
                    b.Property<string>("SurveyQuestionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_QUESTION_ID");

                    b.Property<string>("SurveyOptionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_OPTION_SEQ_ID");

                    b.Property<decimal?>("AmountBase")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT_BASE");

                    b.Property<string>("AmountBaseUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AMOUNT_BASE_UOM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("DURATION");

                    b.Property<string>("DurationUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DURATION_UOM_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<double?>("WeightFactor")
                        .HasColumnType("double")
                        .HasColumnName("WEIGHT_FACTOR");

                    b.HasKey("SurveyQuestionId", "SurveyOptionSeqId");

                    b.HasIndex(new[] { "SurveyQuestionId" }, "SRVYQSTOP_SRVYQ");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_QSN_OPN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_QSN_OPN_TXSTMP");

                    b.ToTable("SURVEY_QUESTION_OPTION", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyQuestionType", b =>
                {
                    b.Property<string>("SurveyQuestionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_QUESTION_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("SurveyQuestionTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_QSTN_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_QSTN_TP_TXSTMP");

                    b.ToTable("SURVEY_QUESTION_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyResponse", b =>
                {
                    b.Property<string>("SurveyResponseId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_RESPONSE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GeneralFeedback")
                        .HasColumnType("text")
                        .HasColumnName("GENERAL_FEEDBACK");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("REFERENCE_ID");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RESPONSE_DATE");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("SurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_ID");

                    b.HasKey("SurveyResponseId");

                    b.HasIndex(new[] { "SurveyId" }, "SRVYRSP_SRVY");

                    b.HasIndex(new[] { "StatusId" }, "SRVYRSP_STTS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_RSPNS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_RSPNS_TXSTMP");

                    b.ToTable("SURVEY_RESPONSE", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyResponseAnswer", b =>
                {
                    b.Property<string>("SurveyResponseId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_RESPONSE_ID");

                    b.Property<string>("SurveyQuestionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_QUESTION_ID");

                    b.Property<string>("SurveyMultiRespColId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_MULTI_RESP_COL_ID");

                    b.Property<decimal?>("AmountBase")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("AMOUNT_BASE");

                    b.Property<string>("AmountBaseUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AMOUNT_BASE_UOM_ID");

                    b.Property<DateTime?>("AnsweredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ANSWERED_DATE");

                    b.Property<string>("BooleanResponse")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("BOOLEAN_RESPONSE")
                        .IsFixedLength();

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("CurrencyResponse")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("CURRENCY_RESPONSE");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("DURATION");

                    b.Property<string>("DurationUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DURATION_UOM_ID");

                    b.Property<double?>("FloatResponse")
                        .HasColumnType("double")
                        .HasColumnName("FLOAT_RESPONSE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NumericResponse")
                        .HasColumnType("int")
                        .HasColumnName("NUMERIC_RESPONSE");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<string>("SurveyMultiRespId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_MULTI_RESP_ID");

                    b.Property<string>("SurveyOptionSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_OPTION_SEQ_ID");

                    b.Property<string>("TextResponse")
                        .HasColumnType("text")
                        .HasColumnName("TEXT_RESPONSE");

                    b.Property<double?>("WeightFactor")
                        .HasColumnType("double")
                        .HasColumnName("WEIGHT_FACTOR");

                    b.HasKey("SurveyResponseId", "SurveyQuestionId", "SurveyMultiRespColId");

                    b.HasIndex(new[] { "ContentId" }, "SRVYRSPA_CONT");

                    b.HasIndex(new[] { "SurveyQuestionId", "SurveyOptionSeqId" }, "SRVYRSPA_OPT");

                    b.HasIndex(new[] { "SurveyQuestionId" }, "SRVYRSPA_SVQU");

                    b.HasIndex(new[] { "SurveyResponseId" }, "SRVYRSPA_SVRSP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_RSPS_ANR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_RSPS_ANR_TXSTP");

                    b.ToTable("SURVEY_RESPONSE_ANSWER", (string)null);
                });

            modelBuilder.Entity("Domain.SurveyTrigger", b =>
                {
                    b.Property<string>("SurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_ID");

                    b.Property<string>("SurveyApplTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_APPL_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("SurveyId", "SurveyApplTypeId", "FromDate");

                    b.HasIndex(new[] { "SurveyId" }, "SRVYTRG_SRVY");

                    b.HasIndex(new[] { "SurveyApplTypeId" }, "SRVYTRG_SRVYAPT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SRV_TRGGR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SRV_TRGGR_TXSTMP");

                    b.ToTable("SURVEY_TRIGGER", (string)null);
                });

            modelBuilder.Entity("Domain.SystemProperty", b =>
                {
                    b.Property<string>("SystemResourceId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SYSTEM_RESOURCE_ID");

                    b.Property<string>("SystemPropertyId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SYSTEM_PROPERTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("SystemPropertyValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SYSTEM_PROPERTY_VALUE");

                    b.HasKey("SystemResourceId", "SystemPropertyId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "SSTM_PRPRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "SSTM_PRPRT_TXSTMP");

                    b.ToTable("SYSTEM_PROPERTY", (string)null);
                });

            modelBuilder.Entity("Domain.TarpittedLoginView", b =>
                {
                    b.Property<string>("ViewNameId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("VIEW_NAME_ID");

                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("TarpitReleaseDateTime")
                        .HasColumnType("int")
                        .HasColumnName("TARPIT_RELEASE_DATE_TIME");

                    b.HasKey("ViewNameId", "UserLoginId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRPTD_LGN_VW_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRPTD_LGN_VW_TXSTP");

                    b.ToTable("TARPITTED_LOGIN_VIEW", (string)null);
                });

            modelBuilder.Entity("Domain.TaxAuthority", b =>
                {
                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IncludeTaxInPrice")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_TAX_IN_PRICE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RequireTaxIdForExemption")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_TAX_ID_FOR_EXEMPTION")
                        .IsFixedLength();

                    b.Property<string>("TaxIdFormatPattern")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TAX_ID_FORMAT_PATTERN");

                    b.HasKey("TaxAuthGeoId", "TaxAuthPartyId");

                    b.HasIndex(new[] { "TaxAuthGeoId" }, "TAXAUTH_TAGEO");

                    b.HasIndex(new[] { "TaxAuthPartyId" }, "TAXAUTH_TAPARTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TX_ATHRT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TX_ATHRT_TXSTMP");

                    b.ToTable("TAX_AUTHORITY", (string)null);
                });

            modelBuilder.Entity("Domain.TaxAuthorityAssoc", b =>
                {
                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.Property<string>("ToTaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TO_TAX_AUTH_GEO_ID");

                    b.Property<string>("ToTaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TO_TAX_AUTH_PARTY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TaxAuthorityAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTHORITY_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("TaxAuthGeoId", "TaxAuthPartyId", "ToTaxAuthGeoId", "ToTaxAuthPartyId", "FromDate");

                    b.HasIndex(new[] { "TaxAuthorityAssocTypeId" }, "TAXAUTHASC_ASTP");

                    b.HasIndex(new[] { "ToTaxAuthGeoId", "ToTaxAuthPartyId" }, "TAXAUTHASC_TOTXA");

                    b.HasIndex(new[] { "TaxAuthGeoId", "TaxAuthPartyId" }, "TAXAUTHASC_TXA");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TX_ATHT_ASC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TX_ATHT_ASC_TXSTMP");

                    b.ToTable("TAX_AUTHORITY_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.TaxAuthorityAssocType", b =>
                {
                    b.Property<string>("TaxAuthorityAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTHORITY_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TaxAuthorityAssocTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TX_ATT_ASC_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TX_ATT_ASC_TP_TXSP");

                    b.ToTable("TAX_AUTHORITY_ASSOC_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.TaxAuthorityCategory", b =>
                {
                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TaxAuthGeoId", "TaxAuthPartyId", "ProductCategoryId");

                    b.HasIndex(new[] { "ProductCategoryId" }, "TAXAUTHCAT_CAT");

                    b.HasIndex(new[] { "TaxAuthGeoId", "TaxAuthPartyId" }, "TAXAUTHCAT_TXA");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TX_ATHT_CTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TX_ATHT_CTR_TXSTMP");

                    b.ToTable("TAX_AUTHORITY_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Domain.TaxAuthorityGlAccount", b =>
                {
                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TaxAuthGeoId", "TaxAuthPartyId", "OrganizationPartyId");

                    b.HasIndex(new[] { "GlAccountId" }, "TAXAUTHGLA_GLA");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "TAXAUTHGLA_OPTY");

                    b.HasIndex(new[] { "TaxAuthGeoId", "TaxAuthPartyId" }, "TAXAUTHGLA_TXA");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TX_ATT_GL_ACT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TX_ATT_GL_ACT_TXSP");

                    b.ToTable("TAX_AUTHORITY_GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.TaxAuthorityRateProduct", b =>
                {
                    b.Property<string>("TaxAuthorityRateSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTHORITY_RATE_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("IsTaxInShippingPrice")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_TAX_IN_SHIPPING_PRICE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("MinItemPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MIN_ITEM_PRICE");

                    b.Property<decimal?>("MinPurchase")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("MIN_PURCHASE");

                    b.Property<string>("ProductCategoryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("TaxAuthGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_GEO_ID");

                    b.Property<string>("TaxAuthPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTH_PARTY_ID");

                    b.Property<string>("TaxAuthorityRateTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTHORITY_RATE_TYPE_ID");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("TAX_PERCENTAGE");

                    b.Property<string>("TaxPromotions")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TAX_PROMOTIONS")
                        .IsFixedLength();

                    b.Property<string>("TaxShipping")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("TAX_SHIPPING")
                        .IsFixedLength();

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<string>("TitleTransferEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TITLE_TRANSFER_ENUM_ID");

                    b.HasKey("TaxAuthorityRateSeqId");

                    b.HasIndex(new[] { "ProductCategoryId" }, "TAXAUTHRTEP_PCAT");

                    b.HasIndex(new[] { "ProductStoreId" }, "TAXAUTHRTEP_PSTR");

                    b.HasIndex(new[] { "TaxAuthorityRateTypeId" }, "TAXAUTHRTEP_RTTP");

                    b.HasIndex(new[] { "TaxAuthGeoId", "TaxAuthPartyId" }, "TAXAUTHRTEP_TXA");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TX_ATT_RT_PRT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TX_ATT_RT_PRT_TXSP");

                    b.ToTable("TAX_AUTHORITY_RATE_PRODUCT", (string)null);
                });

            modelBuilder.Entity("Domain.TaxAuthorityRateType", b =>
                {
                    b.Property<string>("TaxAuthorityRateTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TAX_AUTHORITY_RATE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TaxAuthorityRateTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TX_ATT_RT_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TX_ATT_RT_TP_TXSTP");

                    b.ToTable("TAX_AUTHORITY_RATE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.TechDataCalendar", b =>
                {
                    b.Property<string>("CalendarId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CALENDAR_ID");

                    b.Property<string>("CalendarWeekId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CALENDAR_WEEK_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CalendarId");

                    b.HasIndex(new[] { "CalendarWeekId" }, "CALENDAR_WEEK");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TCH_DT_CLNR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TCH_DT_CLNR_TXSTMP");

                    b.ToTable("TECH_DATA_CALENDAR", (string)null);
                });

            modelBuilder.Entity("Domain.TechDataCalendarExcDay", b =>
                {
                    b.Property<string>("CalendarId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CALENDAR_ID");

                    b.Property<DateTime>("ExceptionDateStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("EXCEPTION_DATE_START_TIME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<decimal?>("ExceptionCapacity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("EXCEPTION_CAPACITY");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("UsedCapacity")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("USED_CAPACITY");

                    b.HasKey("CalendarId", "ExceptionDateStartTime");

                    b.HasIndex(new[] { "CalendarId" }, "EXC_DAY_CALENDAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TCH_CLR_EXC_D_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TCH_CLR_EXC_D_TS");

                    b.ToTable("TECH_DATA_CALENDAR_EXC_DAY", (string)null);
                });

            modelBuilder.Entity("Domain.TechDataCalendarExcWeek", b =>
                {
                    b.Property<string>("CalendarId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CALENDAR_ID");

                    b.Property<DateTime>("ExceptionDateStart")
                        .HasColumnType("datetime")
                        .HasColumnName("EXCEPTION_DATE_START");

                    b.Property<string>("CalendarWeekId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CALENDAR_WEEK_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("CalendarId", "ExceptionDateStart");

                    b.HasIndex(new[] { "CalendarId" }, "EXC_WEEK_CALENDAR");

                    b.HasIndex(new[] { "CalendarWeekId" }, "EXC_WEEK_WEEK");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TCH_CLR_EXC_WK_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TCH_CLR_EXC_WK_TS");

                    b.ToTable("TECH_DATA_CALENDAR_EXC_WEEK", (string)null);
                });

            modelBuilder.Entity("Domain.TechDataCalendarWeek", b =>
                {
                    b.Property<string>("CalendarWeekId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CALENDAR_WEEK_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<double?>("FridayCapacity")
                        .HasColumnType("double")
                        .HasColumnName("FRIDAY_CAPACITY");

                    b.Property<DateTime?>("FridayStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("FRIDAY_START_TIME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<double?>("MondayCapacity")
                        .HasColumnType("double")
                        .HasColumnName("MONDAY_CAPACITY");

                    b.Property<DateTime?>("MondayStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("MONDAY_START_TIME");

                    b.Property<double?>("SaturdayCapacity")
                        .HasColumnType("double")
                        .HasColumnName("SATURDAY_CAPACITY");

                    b.Property<DateTime?>("SaturdayStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("SATURDAY_START_TIME");

                    b.Property<double?>("SundayCapacity")
                        .HasColumnType("double")
                        .HasColumnName("SUNDAY_CAPACITY");

                    b.Property<DateTime?>("SundayStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("SUNDAY_START_TIME");

                    b.Property<double?>("ThursdayCapacity")
                        .HasColumnType("double")
                        .HasColumnName("THURSDAY_CAPACITY");

                    b.Property<DateTime?>("ThursdayStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("THURSDAY_START_TIME");

                    b.Property<double?>("TuesdayCapacity")
                        .HasColumnType("double")
                        .HasColumnName("TUESDAY_CAPACITY");

                    b.Property<DateTime?>("TuesdayStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("TUESDAY_START_TIME");

                    b.Property<double?>("WednesdayCapacity")
                        .HasColumnType("double")
                        .HasColumnName("WEDNESDAY_CAPACITY");

                    b.Property<DateTime?>("WednesdayStartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("WEDNESDAY_START_TIME");

                    b.HasKey("CalendarWeekId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TCH_DT_CLR_WK_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TCH_DT_CLR_WK_TXSP");

                    b.ToTable("TECH_DATA_CALENDAR_WEEK", (string)null);
                });

            modelBuilder.Entity("Domain.TelecomGatewayConfig", b =>
                {
                    b.Property<string>("TelecomGatewayConfigId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TELECOM_GATEWAY_CONFIG_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TelecomGatewayConfigId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TLM_GTW_CNG_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TLM_GTW_CNG_TXSTMP");

                    b.ToTable("TELECOM_GATEWAY_CONFIG", (string)null);
                });

            modelBuilder.Entity("Domain.TelecomMethodType", b =>
                {
                    b.Property<string>("TelecomMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TELECOM_METHOD_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TelecomMethodTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TLCM_MTD_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TLCM_MTD_TP_TXSTMP");

                    b.ToTable("TELECOM_METHOD_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.TelecomNumber", b =>
                {
                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("AreaCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("AREA_CODE");

                    b.Property<string>("AskForName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ASK_FOR_NAME");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CONTACT_NUMBER");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("COUNTRY_CODE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ContactMechId");

                    b.HasIndex(new[] { "AreaCode" }, "AREA_CODE_IDX");

                    b.HasIndex(new[] { "ContactNumber" }, "CONTACT_NUMBER_IDX");

                    b.HasIndex(new[] { "CountryCode" }, "COUNTRY_CODE_IDX");

                    b.HasIndex(new[] { "ContactMechId" }, "TEL_NUM_CMECH");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TLCM_NMBR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TLCM_NMBR_TXSTMP");

                    b.ToTable("TELECOM_NUMBER", (string)null);
                });

            modelBuilder.Entity("Domain.TemporalExpression", b =>
                {
                    b.Property<string>("TempExprId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TEMP_EXPR_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("Date1")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE1");

                    b.Property<DateTime?>("Date2")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<int?>("Integer1")
                        .HasColumnType("int")
                        .HasColumnName("INTEGER1");

                    b.Property<int?>("Integer2")
                        .HasColumnType("int")
                        .HasColumnName("INTEGER2");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("String1")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STRING1");

                    b.Property<string>("String2")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STRING2");

                    b.Property<string>("TempExprTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TEMP_EXPR_TYPE_ID");

                    b.HasKey("TempExprId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TMPL_EXPRSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TMPL_EXPRSN_TXSTMP");

                    b.ToTable("TEMPORAL_EXPRESSION", (string)null);
                });

            modelBuilder.Entity("Domain.TemporalExpressionAssoc", b =>
                {
                    b.Property<string>("FromTempExprId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FROM_TEMP_EXPR_ID");

                    b.Property<string>("ToTempExprId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TO_TEMP_EXPR_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ExprAssocType")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXPR_ASSOC_TYPE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("FromTempExprId", "ToTempExprId");

                    b.HasIndex(new[] { "FromTempExprId" }, "TEMP_EXPR_FROM");

                    b.HasIndex(new[] { "ToTempExprId" }, "TEMP_EXPR_TO");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TML_EXPRN_ASC_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TML_EXPRN_ASC_TXSP");

                    b.ToTable("TEMPORAL_EXPRESSION_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.Tenant", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TENANT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Disabled")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("DISABLED")
                        .IsFixedLength();

                    b.Property<string>("InitialPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INITIAL_PATH");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TenantName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TENANT_NAME");

                    b.HasKey("TenantId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TENANT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TENANT_TXSTMP");

                    b.ToTable("TENANT", (string)null);
                });

            modelBuilder.Entity("Domain.TenantComponent", b =>
                {
                    b.Property<string>("ComponentName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMPONENT_NAME");

                    b.Property<string>("TenantId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TENANT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.HasKey("ComponentName", "TenantId");

                    b.HasIndex(new[] { "ComponentName" }, "COMP_CNT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TNNT_CMPNNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TNNT_CMPNNT_TXSTMP");

                    b.HasIndex(new[] { "TenantId" }, "TNTCOMP_TNT");

                    b.ToTable("TENANT_COMPONENT", (string)null);
                });

            modelBuilder.Entity("Domain.TenantDataSource", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TENANT_ID");

                    b.Property<string>("EntityGroupName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ENTITY_GROUP_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("JdbcPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("JDBC_PASSWORD");

                    b.Property<string>("JdbcUri")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("JDBC_URI");

                    b.Property<string>("JdbcUsername")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("JDBC_USERNAME");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TenantId", "EntityGroupName");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TNNT_DT_SRC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TNNT_DT_SRC_TXSTMP");

                    b.HasIndex(new[] { "TenantId" }, "TNTDTSRC_TNT");

                    b.ToTable("TENANT_DATA_SOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.TenantDomainName", b =>
                {
                    b.Property<string>("DomainName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DOMAIN_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TenantId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TENANT_ID");

                    b.HasKey("DomainName");

                    b.HasIndex(new[] { "TenantId" }, "TNNT_DMNAM");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TNNT_DMN_NM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TNNT_DMN_NM_TXSTMP");

                    b.ToTable("TENANT_DOMAIN_NAME", (string)null);
                });

            modelBuilder.Entity("Domain.TenantKeyEncryptingKey", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TENANT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("KekText")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("KEK_TEXT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TenantId");

                    b.HasIndex(new[] { "TenantId" }, "TNTKEK_TNT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TNT_K_ENCRG_K_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TNT_K_ENCRG_K_TXSP");

                    b.ToTable("TENANT_KEY_ENCRYPTING_KEY", (string)null);
                });

            modelBuilder.Entity("Domain.TermType", b =>
                {
                    b.Property<string>("TermTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("TermTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "TERM_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TERM_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TERM_TYPE_TXSTMP");

                    b.ToTable("TERM_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.TermTypeAttr", b =>
                {
                    b.Property<string>("TermTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERM_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TermTypeId", "AttrName");

                    b.HasIndex(new[] { "TermTypeId" }, "TERM_TYPATR_TTYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRM_TP_ATTR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRM_TP_ATTR_TXSTMP");

                    b.ToTable("TERM_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.TerminationReason", b =>
                {
                    b.Property<string>("TerminationReasonId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERMINATION_REASON_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TerminationReasonId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRMNTN_RSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRMNTN_RSN_TXSTMP");

                    b.ToTable("TERMINATION_REASON", (string)null);
                });

            modelBuilder.Entity("Domain.TerminationType", b =>
                {
                    b.Property<string>("TerminationTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TERMINATION_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("TerminationTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "TERM_TYP_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRMNTN_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRMNTN_TP_TXSTMP");

                    b.ToTable("TERMINATION_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.TestFieldType", b =>
                {
                    b.Property<string>("TestFieldTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TEST_FIELD_TYPE_ID");

                    b.Property<byte[]>("BlobField")
                        .HasColumnType("longblob")
                        .HasColumnName("BLOB_FIELD");

                    b.Property<byte[]>("ByteArrayField")
                        .HasColumnType("longblob")
                        .HasColumnName("BYTE_ARRAY_FIELD");

                    b.Property<string>("ClobField")
                        .HasColumnType("text")
                        .HasColumnName("CLOB_FIELD");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("DateField")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_FIELD");

                    b.Property<DateTime?>("DateTimeField")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_TIME_FIELD");

                    b.Property<decimal?>("FixedPointField")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("FIXED_POINT_FIELD");

                    b.Property<double?>("FloatingPointField")
                        .HasColumnType("double")
                        .HasColumnName("FLOATING_POINT_FIELD");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NumericField")
                        .HasColumnType("int")
                        .HasColumnName("NUMERIC_FIELD");

                    b.Property<byte[]>("ObjectField")
                        .HasColumnType("longblob")
                        .HasColumnName("OBJECT_FIELD");

                    b.Property<DateTime?>("TimeField")
                        .HasColumnType("datetime")
                        .HasColumnName("TIME_FIELD");

                    b.HasKey("TestFieldTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TST_FLD_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TST_FLD_TP_TXSTMP");

                    b.ToTable("TEST_FIELD_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.Testing", b =>
                {
                    b.Property<string>("TestingId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("TestingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("TESTING_DATE");

                    b.Property<string>("TestingName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TESTING_NAME");

                    b.Property<int?>("TestingSize")
                        .HasColumnType("int")
                        .HasColumnName("TESTING_SIZE");

                    b.Property<string>("TestingTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_TYPE_ID");

                    b.HasKey("TestingId");

                    b.HasIndex(new[] { "TestingTypeId" }, "ENTITY_ENTY_TYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TESTING_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TESTING_TXSTMP");

                    b.ToTable("TESTING", (string)null);
                });

            modelBuilder.Entity("Domain.TestingCrypto", b =>
                {
                    b.Property<string>("TestingCryptoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_CRYPTO_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("EncryptedValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ENCRYPTED_VALUE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("SaltedEncryptedValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SALTED_ENCRYPTED_VALUE");

                    b.Property<string>("TestingCryptoTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_CRYPTO_TYPE_ID");

                    b.Property<string>("UnencryptedValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("UNENCRYPTED_VALUE");

                    b.HasKey("TestingCryptoId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TSTNG_CRPT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TSTNG_CRPT_TXSTMP");

                    b.ToTable("TESTING_CRYPTO", (string)null);
                });

            modelBuilder.Entity("Domain.TestingItem", b =>
                {
                    b.Property<string>("TestingId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_ID");

                    b.Property<string>("TestingSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("TestingHistory")
                        .HasColumnType("text")
                        .HasColumnName("TESTING_HISTORY");

                    b.HasKey("TestingId", "TestingSeqId");

                    b.HasIndex(new[] { "TestingId" }, "TESTING_IT_TEST");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TSTNG_ITM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TSTNG_ITM_TXSTMP");

                    b.ToTable("TESTING_ITEM", (string)null);
                });

            modelBuilder.Entity("Domain.TestingNode", b =>
                {
                    b.Property<string>("TestingNodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_NODE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PrimaryParentNodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRIMARY_PARENT_NODE_ID");

                    b.HasKey("TestingNodeId");

                    b.HasIndex(new[] { "PrimaryParentNodeId" }, "TESTNG_NDE_PARNT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TSTNG_ND_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TSTNG_ND_TXSTMP");

                    b.ToTable("TESTING_NODE", (string)null);
                });

            modelBuilder.Entity("Domain.TestingNodeMember", b =>
                {
                    b.Property<string>("TestingNodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_NODE_ID");

                    b.Property<string>("TestingId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("ExtendFromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EXTEND_FROM_DATE");

                    b.Property<DateTime?>("ExtendThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EXTEND_THRU_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("TestingNodeId", "TestingId", "FromDate");

                    b.HasIndex(new[] { "TestingId" }, "TESTING_NMBR_TEST");

                    b.HasIndex(new[] { "TestingNodeId" }, "TEST_NMBR_NODE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TSTG_ND_MMR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TSTG_ND_MMR_TXSTMP");

                    b.ToTable("TESTING_NODE_MEMBER", (string)null);
                });

            modelBuilder.Entity("Domain.TestingRemoveAll", b =>
                {
                    b.Property<string>("TestingRemoveAllId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_REMOVE_ALL_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TestingRemoveAllId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TSTG_RMV_ALL_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TSTG_RMV_ALL_TXSTP");

                    b.ToTable("TESTING_REMOVE_ALL", (string)null);
                });

            modelBuilder.Entity("Domain.TestingStatus", b =>
                {
                    b.Property<string>("TestingStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_STATUS_ID");

                    b.Property<string>("ChangeByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CHANGE_BY_USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<string>("TestingId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_ID");

                    b.HasKey("TestingStatusId");

                    b.HasIndex(new[] { "StatusId" }, "TEST_STA_STSITM");

                    b.HasIndex(new[] { "ChangeByUserLoginId" }, "TEST_STA_USRLGN");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TSTNG_STTS_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TSTNG_STTS_TXSTMP");

                    b.ToTable("TESTING_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.TestingSubtype", b =>
                {
                    b.Property<string>("TestingTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("SubtypeDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SUBTYPE_DESCRIPTION");

                    b.HasKey("TestingTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TSTNG_SBTP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TSTNG_SBTP_TXSTMP");

                    b.ToTable("TESTING_SUBTYPE", (string)null);
                });

            modelBuilder.Entity("Domain.TestingType", b =>
                {
                    b.Property<string>("TestingTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TESTING_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TestingTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TSTNG_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TSTNG_TP_TXSTMP");

                    b.ToTable("TESTING_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.TimeEntry", b =>
                {
                    b.Property<string>("TimeEntryId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TIME_ENTRY_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<double?>("Hours")
                        .HasColumnType("double")
                        .HasColumnName("HOURS");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RateTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RATE_TYPE_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<string>("TimesheetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TIMESHEET_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.HasKey("TimeEntryId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TIME_ENTRY_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TIME_ENTRY_TXSTMP");

                    b.HasIndex(new[] { "InvoiceId", "InvoiceItemSeqId" }, "TIME_ENT_INVIT");

                    b.HasIndex(new[] { "PartyId" }, "TIME_ENT_PRTY");

                    b.HasIndex(new[] { "RateTypeId" }, "TIME_ENT_RTTP");

                    b.HasIndex(new[] { "TimesheetId" }, "TIME_ENT_TSHT");

                    b.HasIndex(new[] { "WorkEffortId" }, "TIME_ENT_WEFF");

                    b.ToTable("TIME_ENTRY", (string)null);
                });

            modelBuilder.Entity("Domain.Timesheet", b =>
                {
                    b.Property<string>("TimesheetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TIMESHEET_ID");

                    b.Property<string>("ApprovedByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("APPROVED_BY_USER_LOGIN_ID");

                    b.Property<string>("ClientPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CLIENT_PARTY_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("TimesheetId");

                    b.HasIndex(new[] { "ApprovedByUserLoginId" }, "TIMESHEET_AB_UL");

                    b.HasIndex(new[] { "ClientPartyId" }, "TIMESHEET_CPTY");

                    b.HasIndex(new[] { "PartyId" }, "TIMESHEET_PRTY");

                    b.HasIndex(new[] { "StatusId" }, "TIMESHEET_STS");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TIMESHEET_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TIMESHEET_TXSTMP");

                    b.ToTable("TIMESHEET", (string)null);
                });

            modelBuilder.Entity("Domain.TimesheetRole", b =>
                {
                    b.Property<string>("TimesheetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TIMESHEET_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TimesheetId", "PartyId", "RoleTypeId");

                    b.HasIndex(new[] { "PartyId" }, "TIMESHTRL_PRTY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "TIMESHTRL_PTRL");

                    b.HasIndex(new[] { "TimesheetId" }, "TIMESHTRL_TSHT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TMSHT_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TMSHT_RL_TXSTMP");

                    b.ToTable("TIMESHEET_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.TrackingCode", b =>
                {
                    b.Property<string>("TrackingCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRACKING_CODE_ID");

                    b.Property<int?>("BillableLifetime")
                        .HasColumnType("int")
                        .HasColumnName("BILLABLE_LIFETIME");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("GroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GROUP_ID");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MarketingCampaignId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MARKETING_CAMPAIGN_ID");

                    b.Property<string>("OverrideCss")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("OVERRIDE_CSS");

                    b.Property<string>("OverrideLogo")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("OVERRIDE_LOGO");

                    b.Property<string>("ProdCatalogId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROD_CATALOG_ID");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("REDIRECT_URL");

                    b.Property<string>("SubgroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SUBGROUP_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<int?>("TrackableLifetime")
                        .HasColumnType("int")
                        .HasColumnName("TRACKABLE_LIFETIME");

                    b.Property<string>("TrackingCodeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRACKING_CODE_TYPE_ID");

                    b.HasKey("TrackingCodeId");

                    b.HasIndex(new[] { "MarketingCampaignId" }, "TKNG_COD_MKCMPN");

                    b.HasIndex(new[] { "TrackingCodeTypeId" }, "TKNG_COD_TYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRCKNG_CD_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRCKNG_CD_TXSTMP");

                    b.ToTable("TRACKING_CODE", (string)null);
                });

            modelBuilder.Entity("Domain.TrackingCodeOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("TrackingCodeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRACKING_CODE_TYPE_ID");

                    b.Property<DateTime?>("AffiliateReferredTimeStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("AFFILIATE_REFERRED_TIME_STAMP");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("HasExported")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_EXPORTED")
                        .IsFixedLength();

                    b.Property<string>("IsBillable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_BILLABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("SiteId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SITE_ID");

                    b.Property<string>("TrackingCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRACKING_CODE_ID");

                    b.HasKey("OrderId", "TrackingCodeTypeId");

                    b.HasIndex(new[] { "OrderId" }, "TKNG_CODODR_ODR");

                    b.HasIndex(new[] { "TrackingCodeId" }, "TKNG_CODODR_TKCD");

                    b.HasIndex(new[] { "TrackingCodeTypeId" }, "TKNG_CODODR_TYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRCKG_CD_ORR_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRCKG_CD_ORR_TXSTP");

                    b.ToTable("TRACKING_CODE_ORDER", (string)null);
                });

            modelBuilder.Entity("Domain.TrackingCodeOrderReturn", b =>
                {
                    b.Property<string>("ReturnId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RETURN_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("TrackingCodeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRACKING_CODE_TYPE_ID");

                    b.Property<DateTime?>("AffiliateReferredTimeStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("AFFILIATE_REFERRED_TIME_STAMP");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("HasExported")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_EXPORTED")
                        .IsFixedLength();

                    b.Property<string>("IsBillable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_BILLABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<string>("SiteId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SITE_ID");

                    b.Property<string>("TrackingCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRACKING_CODE_ID");

                    b.HasKey("ReturnId", "OrderId", "TrackingCodeTypeId");

                    b.HasIndex(new[] { "OrderId" }, "TKNG_CODODR_ODRTN");

                    b.HasIndex(new[] { "ReturnId" }, "TKNG_CODODR_RTN");

                    b.HasIndex(new[] { "TrackingCodeId" }, "TKNG_CODODR_RTNTCD");

                    b.HasIndex(new[] { "TrackingCodeTypeId" }, "TKNG_CODODR_RTNTYP");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRG_CD_ORR_RTN_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRG_CD_ORR_RTN_TXS");

                    b.ToTable("TRACKING_CODE_ORDER_RETURN", (string)null);
                });

            modelBuilder.Entity("Domain.TrackingCodeType", b =>
                {
                    b.Property<string>("TrackingCodeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRACKING_CODE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TrackingCodeTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRCKG_CD_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRCKG_CD_TP_TXSTMP");

                    b.ToTable("TRACKING_CODE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.TrackingCodeVisit", b =>
                {
                    b.Property<string>("TrackingCodeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRACKING_CODE_ID");

                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("SourceEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SOURCE_ENUM_ID");

                    b.HasKey("TrackingCodeId", "VisitId", "FromDate");

                    b.HasIndex(new[] { "SourceEnumId" }, "TKNG_CODVST_SRCEM");

                    b.HasIndex(new[] { "TrackingCodeId" }, "TKNG_CODVST_TKCD");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRCKG_CD_VST_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRCKG_CD_VST_TXSTP");

                    b.ToTable("TRACKING_CODE_VISIT", (string)null);
                });

            modelBuilder.Entity("Domain.TrainingClassType", b =>
                {
                    b.Property<string>("TrainingClassTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRAINING_CLASS_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("TrainingClassTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "TRAIN_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRNG_CLS_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRNG_CLS_TP_TXSTMP");

                    b.ToTable("TRAINING_CLASS_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.TrainingRequest", b =>
                {
                    b.Property<string>("TrainingRequestId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TRAINING_REQUEST_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("TrainingRequestId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "TRNNG_RQST_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "TRNNG_RQST_TXSTMP");

                    b.ToTable("TRAINING_REQUEST", (string)null);
                });

            modelBuilder.Entity("Domain.UnemploymentClaim", b =>
                {
                    b.Property<string>("UnemploymentClaimId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UNEMPLOYMENT_CLAIM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_FROM");

                    b.Property<string>("PartyIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID_TO");

                    b.Property<string>("RoleTypeIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_FROM");

                    b.Property<string>("RoleTypeIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID_TO");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<DateTime?>("UnemploymentClaimDate")
                        .HasColumnType("datetime")
                        .HasColumnName("UNEMPLOYMENT_CLAIM_DATE");

                    b.HasKey("UnemploymentClaimId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "UNMPLMT_CLM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "UNMPLMT_CLM_TXSTMP");

                    b.ToTable("UNEMPLOYMENT_CLAIM", (string)null);
                });

            modelBuilder.Entity("Domain.Uom", b =>
                {
                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ABBREVIATION");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NumericCode")
                        .HasColumnType("int")
                        .HasColumnName("NUMERIC_CODE");

                    b.Property<string>("UomTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_TYPE_ID");

                    b.HasKey("UomId");

                    b.HasIndex(new[] { "UomTypeId" }, "UOM_TO_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "UOM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "UOM_TXSTMP");

                    b.ToTable("UOM", (string)null);
                });

            modelBuilder.Entity("Domain.UomConversion", b =>
                {
                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.Property<string>("UomIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID_TO");

                    b.Property<double?>("ConversionFactor")
                        .HasColumnType("double")
                        .HasColumnName("CONVERSION_FACTOR");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_METHOD_ID");

                    b.Property<int?>("DecimalScale")
                        .HasColumnType("int")
                        .HasColumnName("DECIMAL_SCALE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("RoundingMode")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROUNDING_MODE");

                    b.HasKey("UomId", "UomIdTo");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "UM_CNVRSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "UM_CNVRSN_TXSTMP");

                    b.HasIndex(new[] { "UomId" }, "UOM_CONV_MAIN");

                    b.HasIndex(new[] { "UomIdTo" }, "UOM_CONV_TO");

                    b.HasIndex(new[] { "CustomMethodId" }, "UOM_CUSTOM_METHOD");

                    b.ToTable("UOM_CONVERSION", (string)null);
                });

            modelBuilder.Entity("Domain.UomConversionDated", b =>
                {
                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.Property<string>("UomIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID_TO");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<double?>("ConversionFactor")
                        .HasColumnType("double")
                        .HasColumnName("CONVERSION_FACTOR");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CustomMethodId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CUSTOM_METHOD_ID");

                    b.Property<int?>("DecimalScale")
                        .HasColumnType("int")
                        .HasColumnName("DECIMAL_SCALE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PurposeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PURPOSE_ENUM_ID");

                    b.Property<string>("RoundingMode")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROUNDING_MODE");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("UomId", "UomIdTo", "FromDate");

                    b.HasIndex(new[] { "UomId" }, "DATE_UOM_CONV_MAIN");

                    b.HasIndex(new[] { "UomIdTo" }, "DATE_UOM_CONV_TO");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "UM_CNVRN_DTD_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "UM_CNVRN_DTD_TXSTP");

                    b.HasIndex(new[] { "CustomMethodId" }, "UOMD_CUSTOM_METHOD");

                    b.HasIndex(new[] { "PurposeEnumId" }, "UOMD_PURPOSE_ENUM");

                    b.ToTable("UOM_CONVERSION_DATEDS", (string)null);
                });

            modelBuilder.Entity("Domain.UomGroup", b =>
                {
                    b.Property<string>("UomGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_GROUP_ID");

                    b.Property<string>("UomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("UomGroupId", "UomId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "UOM_GROUP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "UOM_GROUP_TXSTMP");

                    b.HasIndex(new[] { "UomId" }, "UOM_GROUP_UOM");

                    b.ToTable("UOM_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.UomType", b =>
                {
                    b.Property<string>("UomTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("UOM_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("UomTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "UOM_TYPE_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "UOM_TYPE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "UOM_TYPE_TXSTMP");

                    b.ToTable("UOM_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.UserAgent", b =>
                {
                    b.Property<string>("UserAgentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USER_AGENT_ID");

                    b.Property<string>("BrowserTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("BROWSER_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PlatformTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PLATFORM_TYPE_ID");

                    b.Property<string>("ProtocolTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROTOCOL_TYPE_ID");

                    b.Property<string>("UserAgentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USER_AGENT_METHOD_TYPE_ID");

                    b.Property<string>("UserAgentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USER_AGENT_TYPE_ID");

                    b.HasKey("UserAgentId");

                    b.HasIndex(new[] { "BrowserTypeId" }, "UAGENT_BROWSER");

                    b.HasIndex(new[] { "UserAgentMethodTypeId" }, "UAGENT_METHOD");

                    b.HasIndex(new[] { "PlatformTypeId" }, "UAGENT_PLATFORM");

                    b.HasIndex(new[] { "ProtocolTypeId" }, "UAGENT_PROTOCOL");

                    b.HasIndex(new[] { "UserAgentTypeId" }, "UAGENT_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "USER_AGENT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "USER_AGENT_TXSTMP");

                    b.ToTable("USER_AGENT", (string)null);
                });

            modelBuilder.Entity("Domain.UserAgentMethodType", b =>
                {
                    b.Property<string>("UserAgentMethodTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USER_AGENT_METHOD_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("UserAgentMethodTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "USR_AGT_MTD_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "USR_AGT_MTD_TP_TXS");

                    b.ToTable("USER_AGENT_METHOD_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.UserAgentType", b =>
                {
                    b.Property<string>("UserAgentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USER_AGENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("UserAgentTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "USR_AGNT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "USR_AGNT_TP_TXSTMP");

                    b.ToTable("USER_AGENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.UserLogin", b =>
                {
                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrentPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CURRENT_PASSWORD");

                    b.Property<string>("DisabledBy")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("DISABLED_BY");

                    b.Property<DateTime?>("DisabledDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("DISABLED_DATE_TIME");

                    b.Property<string>("Enabled")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ENABLED")
                        .IsFixedLength();

                    b.Property<string>("ExternalAuthId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("EXTERNAL_AUTH_ID");

                    b.Property<string>("HasLoggedOut")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_LOGGED_OUT")
                        .IsFixedLength();

                    b.Property<string>("IsSystem")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_SYSTEM")
                        .IsFixedLength();

                    b.Property<string>("LastCurrencyUom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LAST_CURRENCY_UOM");

                    b.Property<string>("LastLocale")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("LAST_LOCALE");

                    b.Property<string>("LastTimeZone")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LAST_TIME_ZONE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PasswordHint")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PASSWORD_HINT");

                    b.Property<string>("RequirePasswordChange")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REQUIRE_PASSWORD_CHANGE")
                        .IsFixedLength();

                    b.Property<int?>("SuccessiveFailedLogins")
                        .HasColumnType("int")
                        .HasColumnName("SUCCESSIVE_FAILED_LOGINS");

                    b.Property<string>("UserLdapDn")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LDAP_DN");

                    b.HasKey("UserLoginId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "USER_LOGIN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "USER_LOGIN_TXSTMP");

                    b.HasIndex(new[] { "PartyId" }, "USER_PARTY");

                    b.ToTable("USER_LOGIN", (string)null);
                });

            modelBuilder.Entity("Domain.UserLoginHistory", b =>
                {
                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OriginUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ORIGIN_USER_LOGIN_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("PasswordUsed")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PASSWORD_USED");

                    b.Property<string>("SuccessfulLogin")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SUCCESSFUL_LOGIN")
                        .IsFixedLength();

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.HasKey("UserLoginId", "FromDate");

                    b.HasIndex(new[] { "PartyId" }, "USER_LH_PARTY");

                    b.HasIndex(new[] { "UserLoginId" }, "USER_LH_USER");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "USR_LGN_HSR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "USR_LGN_HSR_TXSTMP");

                    b.ToTable("USER_LOGIN_HISTORY", (string)null);
                });

            modelBuilder.Entity("Domain.UserLoginPasswordHistory", b =>
                {
                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrentPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CURRENT_PASSWORD");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("UserLoginId", "FromDate");

                    b.HasIndex(new[] { "UserLoginId" }, "USER_LPH_USER");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "USR_LGN_PSD_HSR_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "USR_LGN_PSD_HSR_TS");

                    b.ToTable("USER_LOGIN_PASSWORD_HISTORY", (string)null);
                });

            modelBuilder.Entity("Domain.UserLoginSecurityGroup", b =>
                {
                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.Property<string>("GroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GROUP_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("UserLoginId", "GroupId", "FromDate");

                    b.HasIndex(new[] { "GroupId" }, "USER_SECGRP_GRP");

                    b.HasIndex(new[] { "UserLoginId" }, "USER_SECGRP_USER");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "USR_LGN_SCT_GRP_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "USR_LGN_SCT_GRP_TS");

                    b.ToTable("USER_LOGIN_SECURITY_GROUP", (string)null);
                });

            modelBuilder.Entity("Domain.UserLoginSession", b =>
                {
                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("SavedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SAVED_DATE");

                    b.Property<string>("SessionData")
                        .HasColumnType("text")
                        .HasColumnName("SESSION_DATA");

                    b.HasKey("UserLoginId");

                    b.HasIndex(new[] { "UserLoginId" }, "USER_SESSION_USER");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "USR_LGN_SSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "USR_LGN_SSN_TXSTMP");

                    b.ToTable("USER_LOGIN_SESSION", (string)null);
                });

            modelBuilder.Entity("Domain.UserPrefGroupType", b =>
                {
                    b.Property<string>("UserPrefGroupTypeId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("USER_PREF_GROUP_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("UserPrefGroupTypeId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "USR_PRF_GRP_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "USR_PRF_GRP_TP_TXS");

                    b.ToTable("USER_PREF_GROUP_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.UserPreference", b =>
                {
                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.Property<string>("UserPrefTypeId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("USER_PREF_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("UserPrefDataType")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("USER_PREF_DATA_TYPE");

                    b.Property<string>("UserPrefGroupTypeId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("USER_PREF_GROUP_TYPE_ID");

                    b.Property<string>("UserPrefValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("USER_PREF_VALUE");

                    b.HasKey("UserLoginId", "UserPrefTypeId");

                    b.HasIndex(new[] { "UserPrefGroupTypeId" }, "UP_USER_GROUP_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "USR_PRFRNC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "USR_PRFRNC_TXSTMP");

                    b.ToTable("USER_PREFERENCE", (string)null);
                });

            modelBuilder.Entity("Domain.ValidContactMechRole", b =>
                {
                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("ContactMechTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("RoleTypeId", "ContactMechTypeId");

                    b.HasIndex(new[] { "ContactMechTypeId" }, "VAL_CMRLE_CMTYPE");

                    b.HasIndex(new[] { "RoleTypeId" }, "VAL_CMRLE_ROLE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VLD_CNT_MCH_RL_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VLD_CNT_MCH_RL_TXS");

                    b.ToTable("VALID_CONTACT_MECH_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.ValidResponsibility", b =>
                {
                    b.Property<string>("EmplPositionTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EMPL_POSITION_TYPE_ID");

                    b.Property<string>("ResponsibilityTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RESPONSIBILITY_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("EmplPositionTypeId", "ResponsibilityTypeId", "FromDate");

                    b.HasIndex(new[] { "EmplPositionTypeId" }, "VALID_RTY_EPSTP");

                    b.HasIndex(new[] { "ResponsibilityTypeId" }, "VALID_RTY_RYTP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VLD_RSPNSBT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VLD_RSPNSBT_TXSTMP");

                    b.ToTable("VALID_RESPONSIBILITY", (string)null);
                });

            modelBuilder.Entity("Domain.ValueLinkKey", b =>
                {
                    b.Property<string>("MerchantId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("MERCHANT_ID");

                    b.Property<string>("CreatedByTerminal")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CREATED_BY_TERMINAL");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("ExchangeKey")
                        .HasColumnType("text")
                        .HasColumnName("EXCHANGE_KEY");

                    b.Property<string>("LastModifiedByTerminal")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LAST_MODIFIED_BY_TERMINAL");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LastWorkingKey")
                        .HasColumnType("text")
                        .HasColumnName("LAST_WORKING_KEY");

                    b.Property<string>("PrivateKey")
                        .HasColumnType("text")
                        .HasColumnName("PRIVATE_KEY");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text")
                        .HasColumnName("PUBLIC_KEY");

                    b.Property<string>("WorkingKey")
                        .HasColumnType("text")
                        .HasColumnName("WORKING_KEY");

                    b.Property<int?>("WorkingKeyIndex")
                        .HasColumnType("int")
                        .HasColumnName("WORKING_KEY_INDEX");

                    b.HasKey("MerchantId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VL_LNK_K_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VL_LNK_K_TXSTMP");

                    b.ToTable("VALUE_LINK_KEY", (string)null);
                });

            modelBuilder.Entity("Domain.VarianceReason", b =>
                {
                    b.Property<string>("VarianceReasonId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VARIANCE_REASON_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("VarianceReasonId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VRNC_RSN_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VRNC_RSN_TXSTMP");

                    b.ToTable("VARIANCE_REASON", (string)null);
                });

            modelBuilder.Entity("Domain.VarianceReasonGlAccount", b =>
                {
                    b.Property<string>("VarianceReasonId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VARIANCE_REASON_ID");

                    b.Property<string>("OrganizationPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORGANIZATION_PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GlAccountId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("GL_ACCOUNT_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("VarianceReasonId", "OrganizationPartyId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VRC_RSN_GL_ACT_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VRC_RSN_GL_ACT_TXS");

                    b.HasIndex(new[] { "GlAccountId" }, "VRGL_GLACCT");

                    b.HasIndex(new[] { "OrganizationPartyId" }, "VRGL_PARTY");

                    b.HasIndex(new[] { "VarianceReasonId" }, "VRGL_VREAS");

                    b.ToTable("VARIANCE_REASON_GL_ACCOUNT", (string)null);
                });

            modelBuilder.Entity("Domain.Vehicle", b =>
                {
                    b.Property<string>("VehicleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VEHICLE_ID");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExteriorColorId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("FromPartyId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("InteriorColorId")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MakeId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("NextServiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ServiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TransmissionTypeId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("VehicleTypeId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Vin")
                        .HasColumnType("longtext");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("ExteriorColorId");

                    b.HasIndex("FromPartyId");

                    b.HasIndex("InteriorColorId");

                    b.HasIndex("MakeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("TransmissionTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VEHICLES", (string)null);
                });

            modelBuilder.Entity("Domain.VehicleAnnotation", b =>
                {
                    b.Property<string>("VehicleAnnotationId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AnnotationId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VehicleId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.HasKey("VehicleAnnotationId");

                    b.HasIndex("AnnotationId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VEHICLE_ANNOTATIONS", (string)null);
                });

            modelBuilder.Entity("Domain.VehicleContent", b =>
                {
                    b.Property<string>("VehicleId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ContentId")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("VehicleId", "ContentId");

                    b.HasIndex("ContentId");

                    b.ToTable("VEHICLE_CONTENTS", (string)null);
                });

            modelBuilder.Entity("Domain.Vendor", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ManifestCompanyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MANIFEST_COMPANY_NAME");

                    b.Property<string>("ManifestCompanyTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MANIFEST_COMPANY_TITLE");

                    b.Property<string>("ManifestLogoUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("MANIFEST_LOGO_URL");

                    b.Property<string>("ManifestPolicies")
                        .HasColumnType("text")
                        .HasColumnName("MANIFEST_POLICIES");

                    b.HasKey("PartyId");

                    b.HasIndex(new[] { "PartyId" }, "VENDOR_PARTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VENDOR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VENDOR_TXSTMP");

                    b.ToTable("VENDOR", (string)null);
                });

            modelBuilder.Entity("Domain.VendorProduct", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("VendorPartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VENDOR_PARTY_ID");

                    b.Property<string>("ProductStoreGroupId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_GROUP_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProductId", "VendorPartyId", "ProductStoreGroupId");

                    b.HasIndex(new[] { "ProductId" }, "VENDPROD_PROD");

                    b.HasIndex(new[] { "ProductStoreGroupId" }, "VENDPROD_PSGRP");

                    b.HasIndex(new[] { "VendorPartyId" }, "VENDPROD_VPTY");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VNDR_PRDCT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VNDR_PRDCT_TXSTMP");

                    b.ToTable("VENDOR_PRODUCT", (string)null);
                });

            modelBuilder.Entity("Domain.VideoDataResource", b =>
                {
                    b.Property<string>("DataResourceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DATA_RESOURCE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<byte[]>("VideoData")
                        .HasColumnType("longblob")
                        .HasColumnName("VIDEO_DATA");

                    b.HasKey("DataResourceId");

                    b.HasIndex(new[] { "DataResourceId" }, "DATA_REC_VIDEO");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VD_DT_RSRC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VD_DT_RSRC_TXSTMP");

                    b.ToTable("VIDEO_DATA_RESOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.Visit", b =>
                {
                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.Property<string>("ClientHostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CLIENT_HOST_NAME");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CLIENT_IP_ADDRESS");

                    b.Property<string>("ClientIpCountryGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CLIENT_IP_COUNTRY_GEO_ID");

                    b.Property<string>("ClientIpIspName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CLIENT_IP_ISP_NAME");

                    b.Property<string>("ClientIpPostalCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CLIENT_IP_POSTAL_CODE");

                    b.Property<string>("ClientIpStateProvGeoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CLIENT_IP_STATE_PROV_GEO_ID");

                    b.Property<string>("ClientUser")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CLIENT_USER");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<string>("Cookie")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COOKIE");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("InitialLocale")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("INITIAL_LOCALE");

                    b.Property<string>("InitialReferrer")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("INITIAL_REFERRER");

                    b.Property<string>("InitialRequest")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("INITIAL_REQUEST");

                    b.Property<string>("InitialUserAgent")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INITIAL_USER_AGENT");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("ServerHostName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERVER_HOST_NAME");

                    b.Property<string>("ServerIpAddress")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SERVER_IP_ADDRESS");

                    b.Property<string>("SessionId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("SESSION_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.Property<string>("UserAgentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("USER_AGENT_ID");

                    b.Property<string>("UserCreated")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("USER_CREATED")
                        .IsFixedLength();

                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.Property<string>("VisitorId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISITOR_ID");

                    b.Property<string>("WebappName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("WEBAPP_NAME");

                    b.HasKey("VisitId");

                    b.HasIndex(new[] { "ThruDate" }, "VISIT_THRU_IDX");

                    b.HasIndex(new[] { "UserAgentId" }, "VISIT_USER_AGNT");

                    b.HasIndex(new[] { "VisitorId" }, "VISIT_VISITOR");

                    b.ToTable("VISIT", (string)null);
                });

            modelBuilder.Entity("Domain.Visitor", b =>
                {
                    b.Property<string>("VisitorId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISITOR_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.HasKey("VisitorId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VISITOR_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VISITOR_TXSTMP");

                    b.ToTable("VISITOR", (string)null);
                });

            modelBuilder.Entity("Domain.VisualTheme", b =>
                {
                    b.Property<string>("VisualThemeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISUAL_THEME_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("VisualThemeSetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISUAL_THEME_SET_ID");

                    b.HasKey("VisualThemeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VSL_THM_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VSL_THM_TXSTMP");

                    b.HasIndex(new[] { "VisualThemeSetId" }, "VT_THEME_SET");

                    b.ToTable("VISUAL_THEME", (string)null);
                });

            modelBuilder.Entity("Domain.VisualThemeResource", b =>
                {
                    b.Property<string>("VisualThemeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISUAL_THEME_ID");

                    b.Property<string>("ResourceTypeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RESOURCE_TYPE_ENUM_ID");

                    b.Property<string>("SequenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEQUENCE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ResourceValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("RESOURCE_VALUE");

                    b.HasKey("VisualThemeId", "ResourceTypeEnumId", "SequenceId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VSL_THM_RSC_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VSL_THM_RSC_TXSTMP");

                    b.HasIndex(new[] { "VisualThemeId" }, "VT_RES_THEME");

                    b.HasIndex(new[] { "ResourceTypeEnumId" }, "VT_RES_TYPE_ENUM");

                    b.ToTable("VISUAL_THEME_RESOURCE", (string)null);
                });

            modelBuilder.Entity("Domain.VisualThemeSet", b =>
                {
                    b.Property<string>("VisualThemeSetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISUAL_THEME_SET_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("VisualThemeSetId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "VSL_THM_ST_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "VSL_THM_ST_TXSTMP");

                    b.ToTable("VISUAL_THEME_SET", (string)null);
                });

            modelBuilder.Entity("Domain.WebAnalyticsConfig", b =>
                {
                    b.Property<string>("WebSiteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_ID");

                    b.Property<string>("WebAnalyticsTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_ANALYTICS_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("WebAnalyticsCode")
                        .HasColumnType("text")
                        .HasColumnName("WEB_ANALYTICS_CODE");

                    b.HasKey("WebSiteId", "WebAnalyticsTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WB_ANLTS_CNG_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WB_ANLTS_CNG_TXSTP");

                    b.ToTable("WEB_ANALYTICS_CONFIG", (string)null);
                });

            modelBuilder.Entity("Domain.WebAnalyticsType", b =>
                {
                    b.Property<string>("WebAnalyticsTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_ANALYTICS_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("WebAnalyticsTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "WANA_TYP_PARENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WB_ANLTS_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WB_ANLTS_TP_TXSTMP");

                    b.ToTable("WEB_ANALYTICS_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.WebPage", b =>
                {
                    b.Property<string>("WebPageId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_PAGE_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PageName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PAGE_NAME");

                    b.Property<string>("WebSiteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_ID");

                    b.HasKey("WebPageId");

                    b.HasIndex(new[] { "ContentId" }, "WEB_PAGE_CONTENT");

                    b.HasIndex(new[] { "WebSiteId" }, "WEB_PAGE_SITE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WEB_PAGE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WEB_PAGE_TXSTMP");

                    b.ToTable("WEB_PAGE", (string)null);
                });

            modelBuilder.Entity("Domain.WebPreferenceType", b =>
                {
                    b.Property<string>("WebPreferenceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_PREFERENCE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WebPreferenceTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WB_PRFRC_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WB_PRFRC_TP_TXSTMP");

                    b.ToTable("WEB_PREFERENCE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.WebSite", b =>
                {
                    b.Property<string>("WebSiteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_ID");

                    b.Property<string>("AllowProductStoreChange")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ALLOW_PRODUCT_STORE_CHANGE")
                        .IsFixedLength();

                    b.Property<string>("CookieDomain")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COOKIE_DOMAIN");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DisplayMaintenancePage")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("DISPLAY_MAINTENANCE_PAGE")
                        .IsFixedLength();

                    b.Property<string>("EnableHttps")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ENABLE_HTTPS")
                        .IsFixedLength();

                    b.Property<string>("HostedPathAlias")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("HOSTED_PATH_ALIAS");

                    b.Property<string>("HttpHost")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HTTP_HOST");

                    b.Property<string>("HttpPort")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("HTTP_PORT");

                    b.Property<string>("HttpsHost")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("HTTPS_HOST");

                    b.Property<string>("HttpsPort")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("HTTPS_PORT");

                    b.Property<string>("IsDefault")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_DEFAULT")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ProductStoreId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_STORE_ID");

                    b.Property<string>("SecureContentPrefix")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("SECURE_CONTENT_PREFIX");

                    b.Property<string>("SiteName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SITE_NAME");

                    b.Property<string>("StandardContentPrefix")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("STANDARD_CONTENT_PREFIX");

                    b.Property<string>("VisualThemeSetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISUAL_THEME_SET_ID");

                    b.Property<string>("WebappPath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("WEBAPP_PATH");

                    b.HasKey("WebSiteId");

                    b.HasIndex(new[] { "ProductStoreId" }, "WEB_SITE_PRDS");

                    b.HasIndex(new[] { "VisualThemeSetId" }, "WEB_SITE_THEME_SET");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WEB_SITE_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WEB_SITE_TXSTMP");

                    b.ToTable("WEB_SITE", (string)null);
                });

            modelBuilder.Entity("Domain.WebSiteContactList", b =>
                {
                    b.Property<string>("WebSiteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_ID");

                    b.Property<string>("ContactListId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_LIST_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WebSiteId", "ContactListId", "FromDate");

                    b.HasIndex(new[] { "ContactListId" }, "CNTCT_LST_WEB_SITE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WB_ST_CNT_LST_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WB_ST_CNT_LST_TXSP");

                    b.HasIndex(new[] { "WebSiteId" }, "WEB_SITE_CNTCT_LST");

                    b.ToTable("WEB_SITE_CONTACT_LIST", (string)null);
                });

            modelBuilder.Entity("Domain.WebSiteContent", b =>
                {
                    b.Property<string>("WebSiteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("WebSiteContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WebSiteId", "ContentId", "WebSiteContentTypeId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WB_ST_CNTNT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WB_ST_CNTNT_TXSTMP");

                    b.HasIndex(new[] { "ContentId" }, "WSCTNT_CONTENT");

                    b.HasIndex(new[] { "WebSiteId" }, "WSCTNT_WEBSITE");

                    b.HasIndex(new[] { "WebSiteContentTypeId" }, "WSCTNT_WSCTTYPE");

                    b.ToTable("WEB_SITE_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.WebSiteContentType", b =>
                {
                    b.Property<string>("WebSiteContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("WebSiteContentTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WB_ST_CNT_TP_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WB_ST_CNT_TP_TXSTP");

                    b.HasIndex(new[] { "ParentTypeId" }, "WSCT_TYPE_PARENT");

                    b.ToTable("WEB_SITE_CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.WebSitePathAlias", b =>
                {
                    b.Property<string>("WebSiteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_ID");

                    b.Property<string>("PathAlias")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("PATH_ALIAS");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("AliasTo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ALIAS_TO");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MapKey")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MAP_KEY");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WebSiteId", "PathAlias", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WB_ST_PTH_ALS_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WB_ST_PTH_ALS_TXSP");

                    b.HasIndex(new[] { "ContentId" }, "WSPATH_CONTENT");

                    b.HasIndex(new[] { "WebSiteId" }, "WSPATH_WEBSITE");

                    b.ToTable("WEB_SITE_PATH_ALIAS", (string)null);
                });

            modelBuilder.Entity("Domain.WebSitePublishPoint", b =>
                {
                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("AboutContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ABOUT_CONTENT_ID");

                    b.Property<string>("ContentDept")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_DEPT");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LeftBarId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LEFT_BAR_ID");

                    b.Property<string>("LineLogo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LINE_LOGO");

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LOGO");

                    b.Property<string>("MedallionLogo")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MEDALLION_LOGO");

                    b.Property<string>("RightBarId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RIGHT_BAR_ID");

                    b.Property<string>("StyleSheetFile")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("STYLE_SHEET_FILE");

                    b.Property<string>("TemplateTitle")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("TEMPLATE_TITLE");

                    b.HasKey("ContentId");

                    b.HasIndex(new[] { "ContentId" }, "WBSTPP_CONTENT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WB_ST_PBH_PNT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WB_ST_PBH_PNT_TXSP");

                    b.ToTable("WEB_SITE_PUBLISH_POINT", (string)null);
                });

            modelBuilder.Entity("Domain.WebSiteRole", b =>
                {
                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<string>("WebSiteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_SITE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("PartyId", "RoleTypeId", "WebSiteId", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WB_ST_RL_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WB_ST_RL_TXSTMP");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "WSRLE_PTYRLE");

                    b.HasIndex(new[] { "WebSiteId" }, "WSRLE_WSITE");

                    b.ToTable("WEB_SITE_ROLE", (string)null);
                });

            modelBuilder.Entity("Domain.WebUserPreference", b =>
                {
                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.Property<string>("WebPreferenceTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WEB_PREFERENCE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("WebPreferenceValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("WEB_PREFERENCE_VALUE");

                    b.HasKey("UserLoginId", "PartyId", "VisitId", "WebPreferenceTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WB_USR_PRFRC_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WB_USR_PRFRC_TXSTP");

                    b.HasIndex(new[] { "PartyId" }, "WEB_PREF_PARTY");

                    b.HasIndex(new[] { "WebPreferenceTypeId" }, "WEB_PREF_TYPE");

                    b.HasIndex(new[] { "UserLoginId" }, "WEB_PREF_USER");

                    b.ToTable("WEB_USER_PREFERENCE", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffort", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("AccommodationMapId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOMMODATION_MAP_ID");

                    b.Property<string>("AccommodationSpotId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ACCOMMODATION_SPOT_ID");

                    b.Property<DateTime?>("ActualCompletionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ACTUAL_COMPLETION_DATE");

                    b.Property<double?>("ActualMilliSeconds")
                        .HasColumnType("double")
                        .HasColumnName("ACTUAL_MILLI_SECONDS");

                    b.Property<double?>("ActualSetupMillis")
                        .HasColumnType("double")
                        .HasColumnName("ACTUAL_SETUP_MILLIS");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ACTUAL_START_DATE");

                    b.Property<string>("CreatedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("CREATED_BY_USER_LOGIN");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("CurrentStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CURRENT_STATUS_ID");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("EstimateCalcMethod")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ESTIMATE_CALC_METHOD");

                    b.Property<DateTime?>("EstimatedCompletionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_COMPLETION_DATE");

                    b.Property<double?>("EstimatedMilliSeconds")
                        .HasColumnType("double")
                        .HasColumnName("ESTIMATED_MILLI_SECONDS");

                    b.Property<double?>("EstimatedSetupMillis")
                        .HasColumnType("double")
                        .HasColumnName("ESTIMATED_SETUP_MILLIS");

                    b.Property<DateTime?>("EstimatedStartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ESTIMATED_START_DATE");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<string>("InfoUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INFO_URL");

                    b.Property<string>("LastModifiedByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("LAST_MODIFIED_BY_USER_LOGIN");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_MODIFIED_DATE");

                    b.Property<DateTime?>("LastStatusUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_STATUS_UPDATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LocationDesc")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("LOCATION_DESC");

                    b.Property<string>("MoneyUomId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("MONEY_UOM_ID");

                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_ID");

                    b.Property<int?>("PercentComplete")
                        .HasColumnType("int")
                        .HasColumnName("PERCENT_COMPLETE");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("PRIORITY");

                    b.Property<decimal?>("QuantityProduced")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_PRODUCED");

                    b.Property<decimal?>("QuantityRejected")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_REJECTED");

                    b.Property<decimal?>("QuantityToProduce")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("QUANTITY_TO_PRODUCE");

                    b.Property<string>("RecurrenceInfoId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RECURRENCE_INFO_ID");

                    b.Property<decimal?>("Reserv2ndPPPerc")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV2ND_P_P_PERC");

                    b.Property<decimal?>("ReservNthPPPerc")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_NTH_P_P_PERC");

                    b.Property<decimal?>("ReservPersons")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("RESERV_PERSONS");

                    b.Property<int?>("RevisionNumber")
                        .HasColumnType("int")
                        .HasColumnName("REVISION_NUMBER");

                    b.Property<string>("RuntimeDataId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("RUNTIME_DATA_ID");

                    b.Property<string>("ScopeEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SCOPE_ENUM_ID");

                    b.Property<string>("SendNotificationEmail")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("SEND_NOTIFICATION_EMAIL")
                        .IsFixedLength();

                    b.Property<string>("ServiceLoaderName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("SERVICE_LOADER_NAME");

                    b.Property<string>("ShowAsEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHOW_AS_ENUM_ID");

                    b.Property<string>("SourceReferenceId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("SOURCE_REFERENCE_ID");

                    b.Property<string>("SpecialTerms")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SPECIAL_TERMS");

                    b.Property<string>("TempExprId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("TEMP_EXPR_ID");

                    b.Property<int?>("TimeTransparency")
                        .HasColumnType("int")
                        .HasColumnName("TIME_TRANSPARENCY");

                    b.Property<double?>("TotalMilliSecondsAllowed")
                        .HasColumnType("double")
                        .HasColumnName("TOTAL_MILLI_SECONDS_ALLOWED");

                    b.Property<decimal?>("TotalMoneyAllowed")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TOTAL_MONEY_ALLOWED");

                    b.Property<string>("UniversalId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("UNIVERSAL_ID");

                    b.Property<string>("WorkEffortName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("WORK_EFFORT_NAME");

                    b.Property<string>("WorkEffortParentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_PARENT_ID");

                    b.Property<string>("WorkEffortPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_PURPOSE_TYPE_ID");

                    b.Property<string>("WorkEffortTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_TYPE_ID");

                    b.HasKey("WorkEffortId");

                    b.HasIndex(new[] { "AccommodationMapId" }, "WK_EFFRT_ACC_MAP");

                    b.HasIndex(new[] { "AccommodationSpotId" }, "WK_EFFRT_ACC_SPOT");

                    b.HasIndex(new[] { "CurrentStatusId" }, "WK_EFFRT_CURSTTS");

                    b.HasIndex(new[] { "EstimateCalcMethod" }, "WK_EFFRT_CUS_MET");

                    b.HasIndex(new[] { "FacilityId" }, "WK_EFFRT_FACILITY");

                    b.HasIndex(new[] { "FixedAssetId" }, "WK_EFFRT_FXDASST");

                    b.HasIndex(new[] { "MoneyUomId" }, "WK_EFFRT_MON_UOM");

                    b.HasIndex(new[] { "NoteId" }, "WK_EFFRT_NOTE");

                    b.HasIndex(new[] { "WorkEffortParentId" }, "WK_EFFRT_PARENT");

                    b.HasIndex(new[] { "WorkEffortPurposeTypeId" }, "WK_EFFRT_PRPTYP");

                    b.HasIndex(new[] { "RecurrenceInfoId" }, "WK_EFFRT_RECINFO");

                    b.HasIndex(new[] { "RuntimeDataId" }, "WK_EFFRT_RNTMDTA");

                    b.HasIndex(new[] { "ScopeEnumId" }, "WK_EFFRT_SC_ENUM");

                    b.HasIndex(new[] { "TempExprId" }, "WK_EFFRT_TEMPEXPR");

                    b.HasIndex(new[] { "WorkEffortTypeId" }, "WK_EFFRT_TYPE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WORK_EFFORT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WORK_EFFORT_TXSTMP");

                    b.ToTable("WORK_EFFORT", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortAssoc", b =>
                {
                    b.Property<string>("WorkEffortIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID_FROM");

                    b.Property<string>("WorkEffortIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID_TO");

                    b.Property<string>("WorkEffortAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("SequenceNum")
                        .HasColumnType("int")
                        .HasColumnName("SEQUENCE_NUM");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WorkEffortIdFrom", "WorkEffortIdTo", "WorkEffortAssocTypeId", "FromDate");

                    b.HasIndex(new[] { "WorkEffortIdFrom" }, "WK_EFFRTASSC_FWE");

                    b.HasIndex(new[] { "WorkEffortIdTo" }, "WK_EFFRTASSC_TWE");

                    b.HasIndex(new[] { "WorkEffortAssocTypeId" }, "WK_EFFRTASSC_TYP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFFT_ASC_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFFT_ASC_TXSTP");

                    b.ToTable("WORK_EFFORT_ASSOC", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortAssocAttribute", b =>
                {
                    b.Property<string>("WorkEffortIdFrom")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID_FROM");

                    b.Property<string>("WorkEffortIdTo")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID_TO");

                    b.Property<string>("WorkEffortAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortIdFrom", "WorkEffortIdTo", "WorkEffortAssocTypeId", "AttrName");

                    b.HasIndex(new[] { "WorkEffortIdFrom", "WorkEffortIdTo", "WorkEffortAssocTypeId", "FromDate" }, "WK_EFFRTASSC_ATTR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_ASC_ATT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_ASC_ATT_TS");

                    b.ToTable("WORK_EFFORT_ASSOC_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortAssocType", b =>
                {
                    b.Property<string>("WorkEffortAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("WorkEffortAssocTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "WK_EFFRTASSC_TPAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_ASC_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_ASC_TP_TXS");

                    b.ToTable("WORK_EFFORT_ASSOC_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortAssocTypeAttr", b =>
                {
                    b.Property<string>("WorkEffortAssocTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ASSOC_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortAssocTypeId", "AttrName");

                    b.HasIndex(new[] { "WorkEffortAssocTypeId" }, "WK_EFFRTASSC_TATR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_ASC_TP_ATR_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_ASC_TP_ATR_TS");

                    b.ToTable("WORK_EFFORT_ASSOC_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortAttribute", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<string>("AttrDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_DESCRIPTION");

                    b.Property<string>("AttrValue")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ATTR_VALUE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortId", "AttrName");

                    b.HasIndex(new[] { "WorkEffortId" }, "WK_EFFRT_ATTR_WE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_ATTT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_ATTT_TXSTP");

                    b.ToTable("WORK_EFFORT_ATTRIBUTE", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortBilling", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("InvoiceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ID");

                    b.Property<string>("InvoiceItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVOICE_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<double?>("Percentage")
                        .HasColumnType("double")
                        .HasColumnName("PERCENTAGE");

                    b.HasKey("WorkEffortId", "InvoiceId", "InvoiceItemSeqId");

                    b.HasIndex(new[] { "InvoiceId", "InvoiceItemSeqId" }, "WK_EFFBLNG_INVITM");

                    b.HasIndex(new[] { "WorkEffortId" }, "WK_EFFBLNG_WEFF");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFFT_BLG_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFFT_BLG_TXSTP");

                    b.ToTable("WORK_EFFORT_BILLING", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortContactMechNew", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WorkEffortId", "ContactMechId", "FromDate")
                        .HasName("PK_WORK_EFFORT_CONTACT_MECH_NE");

                    b.HasIndex(new[] { "ContactMechId" }, "WKEFF_CMECH_CMECH");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_CMECH_WKEFF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_CNT_MCH_NW_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_CNT_MCH_NW_TS");

                    b.ToTable("WORK_EFFORT_CONTACT_MECH_NEW", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortContent", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("ContentId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTENT_ID");

                    b.Property<string>("WorkEffortContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_CONTENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WorkEffortId", "ContentId", "WorkEffortContentTypeId", "FromDate");

                    b.HasIndex(new[] { "ContentId" }, "WKEFF_CNT_CNT");

                    b.HasIndex(new[] { "WorkEffortContentTypeId" }, "WKEFF_CNT_WCTP");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_CNT_WKEFF");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFFT_CNT_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFFT_CNT_TXSTP");

                    b.ToTable("WORK_EFFORT_CONTENT", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortContentType", b =>
                {
                    b.Property<string>("WorkEffortContentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_CONTENT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("WorkEffortContentTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "WEFFCTP_TP_PAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_CNT_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_CNT_TP_TXS");

                    b.ToTable("WORK_EFFORT_CONTENT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortCostCalc", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("CostComponentTypeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("COST_COMPONENT_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("CostComponentCalcId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("COST_COMPONENT_CALC_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WorkEffortId", "CostComponentTypeId", "FromDate");

                    b.HasIndex(new[] { "CostComponentCalcId" }, "WK_EFFRT_COS_CCC");

                    b.HasIndex(new[] { "CostComponentTypeId" }, "WK_EFFRT_COS_CCT");

                    b.HasIndex(new[] { "WorkEffortId" }, "WK_EFFRT_COS_WEF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_CST_CLC_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_CST_CLC_TS");

                    b.ToTable("WORK_EFFORT_COST_CALC", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortDeliverableProd", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("DeliverableId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DELIVERABLE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortId", "DeliverableId")
                        .HasName("PK_WORK_EFFORT_DELIVERABLE_PRO");

                    b.HasIndex(new[] { "DeliverableId" }, "WKEFF_DELPRD_DEL");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_DELPRD_WEFF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_DLL_PRD_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_DLL_PRD_TS");

                    b.ToTable("WORK_EFFORT_DELIVERABLE_PROD", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortEventReminder", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("SequenceId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SEQUENCE_ID");

                    b.Property<string>("ContactMechId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONTACT_MECH_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<int?>("CurrentCount")
                        .HasColumnType("int")
                        .HasColumnName("CURRENT_COUNT");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LocaleId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("LOCALE_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<DateTime?>("ReminderDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("REMINDER_DATE_TIME");

                    b.Property<int?>("ReminderOffset")
                        .HasColumnType("int")
                        .HasColumnName("REMINDER_OFFSET");

                    b.Property<int?>("RepeatCount")
                        .HasColumnType("int")
                        .HasColumnName("REPEAT_COUNT");

                    b.Property<int?>("RepeatInterval")
                        .HasColumnType("int")
                        .HasColumnName("REPEAT_INTERVAL");

                    b.Property<string>("TimeZoneId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TIME_ZONE_ID");

                    b.HasKey("WorkEffortId", "SequenceId");

                    b.HasIndex(new[] { "ContactMechId" }, "WE_EVENT_REMIND_CM");

                    b.HasIndex(new[] { "PartyId" }, "WE_EVENT_REMIND_PY");

                    b.HasIndex(new[] { "WorkEffortId" }, "WE_EVENT_REMIND_WE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_EVT_RMR_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_EVT_RMR_TS");

                    b.ToTable("WORK_EFFORT_EVENT_REMINDER", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortFixedAssetAssign", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("FixedAssetId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<decimal?>("AllocatedCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ALLOCATED_COST");

                    b.Property<string>("AvailabilityStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AVAILABILITY_STATUS_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WorkEffortId", "FixedAssetId", "FromDate")
                        .HasName("PK_WORK_EFFORT_FIXED_ASSET_ASS");

                    b.HasIndex(new[] { "AvailabilityStatusId" }, "WKEFF_FXDAA_AVAIL");

                    b.HasIndex(new[] { "FixedAssetId" }, "WKEFF_FXDAA_FXAS");

                    b.HasIndex(new[] { "StatusId" }, "WKEFF_FXDAA_STTS");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_FXDAA_WEFF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_FXD_AST_ASN_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_FXD_AST_ASN_TS");

                    b.ToTable("WORK_EFFORT_FIXED_ASSET_ASSIGN", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortFixedAssetStd", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("FixedAssetTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FIXED_ASSET_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ESTIMATED_COST");

                    b.Property<double?>("EstimatedDuration")
                        .HasColumnType("double")
                        .HasColumnName("ESTIMATED_DURATION");

                    b.Property<double?>("EstimatedQuantity")
                        .HasColumnType("double")
                        .HasColumnName("ESTIMATED_QUANTITY");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortId", "FixedAssetTypeId");

                    b.HasIndex(new[] { "FixedAssetTypeId" }, "WKEFF_FASTD_FAT");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_FASTD_WEFF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_FXD_AST_STD_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_FXD_AST_STD_TS");

                    b.ToTable("WORK_EFFORT_FIXED_ASSET_STD", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortGoodStandard", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("WorkEffortGoodStdTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_GOOD_STD_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ESTIMATED_COST");

                    b.Property<double?>("EstimatedQuantity")
                        .HasColumnType("double")
                        .HasColumnName("ESTIMATED_QUANTITY");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WorkEffortId", "ProductId", "WorkEffortGoodStdTypeId", "FromDate");

                    b.HasIndex(new[] { "ProductId" }, "WKEFF_GDSTD_PROD");

                    b.HasIndex(new[] { "StatusId" }, "WKEFF_GDSTD_STTS");

                    b.HasIndex(new[] { "WorkEffortGoodStdTypeId" }, "WKEFF_GDSTD_TYPE");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_GDSTD_WEFF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_GD_STD_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_GD_STD_TXS");

                    b.ToTable("WORK_EFFORT_GOOD_STANDARD", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortGoodStandardType", b =>
                {
                    b.Property<string>("WorkEffortGoodStdTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_GOOD_STD_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("WorkEffortGoodStdTypeId")
                        .HasName("PK_WORK_EFFORT_GOOD_STANDARD_T");

                    b.HasIndex(new[] { "ParentTypeId" }, "WKEFF_GDSTD_TPAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_GD_STD_TP_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_GD_STD_TP_TS");

                    b.ToTable("WORK_EFFORT_GOOD_STANDARD_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortIcalDatum", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IcalData")
                        .HasColumnType("text")
                        .HasColumnName("ICAL_DATA");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortId");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_ICAL_DATA");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_ICL_DT_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_ICL_DT_TXS");

                    b.ToTable("WORK_EFFORT_ICAL_DATA", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortInventoryAssign", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double")
                        .HasColumnName("QUANTITY");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("WorkEffortId", "InventoryItemId")
                        .HasName("PK_WORK_EFFORT_INVENTORY_ASSIG");

                    b.HasIndex(new[] { "InventoryItemId" }, "WKEFF_INVAS_INVIT");

                    b.HasIndex(new[] { "StatusId" }, "WKEFF_INVAS_STTS");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_INVAS_WEFF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_INR_ASN_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_INR_ASN_TS");

                    b.ToTable("WORK_EFFORT_INVENTORY_ASSIGN", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortInventoryProduced", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("InventoryItemId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("INVENTORY_ITEM_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortId", "InventoryItemId")
                        .HasName("PK_WORK_EFFORT_INVENTORY_PRODU");

                    b.HasIndex(new[] { "InventoryItemId" }, "WKEFF_INVPD_INVIT");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_INVPD_WEFF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_INR_PRD_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_INR_PRD_TS");

                    b.ToTable("WORK_EFFORT_INVENTORY_PRODUCED", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortKeyword", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("Keyword")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("KEYWORD");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("RelevancyWeight")
                        .HasColumnType("int")
                        .HasColumnName("RELEVANCY_WEIGHT");

                    b.HasKey("WorkEffortId", "Keyword");

                    b.HasIndex(new[] { "Keyword" }, "WEFF_KWD_KWD");

                    b.HasIndex(new[] { "WorkEffortId" }, "WEFF_KWD_WEFF");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFFT_KWD_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFFT_KWD_TXSTP");

                    b.ToTable("WORK_EFFORT_KEYWORD", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortNote", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("NoteId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("NOTE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("InternalNote")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INTERNAL_NOTE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortId", "NoteId");

                    b.HasIndex(new[] { "NoteId" }, "WKEFF_NTE_NOTE");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_NTE_WEFF");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFFT_NT_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFFT_NT_TXSTMP");

                    b.ToTable("WORK_EFFORT_NOTE", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortPartyAssignment", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("PartyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARTY_ID");

                    b.Property<string>("RoleTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ROLE_TYPE_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<string>("AssignedByUserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ASSIGNED_BY_USER_LOGIN_ID");

                    b.Property<string>("AvailabilityStatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("AVAILABILITY_STATUS_ID");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("DelegateReasonEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("DELEGATE_REASON_ENUM_ID");

                    b.Property<string>("ExpectationEnumId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("EXPECTATION_ENUM_ID");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("FACILITY_ID");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("MustRsvp")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("MUST_RSVP")
                        .IsFixedLength();

                    b.Property<DateTime?>("StatusDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATE_TIME");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WorkEffortId", "PartyId", "RoleTypeId", "FromDate")
                        .HasName("PK_WORK_EFFORT_PARTY_ASSIGNMEN");

                    b.HasIndex(new[] { "AssignedByUserLoginId" }, "WKEFF_PA_ABUSRLOG");

                    b.HasIndex(new[] { "AvailabilityStatusId" }, "WKEFF_PA_AVSTTS");

                    b.HasIndex(new[] { "DelegateReasonEnumId" }, "WKEFF_PA_DELR_ENM");

                    b.HasIndex(new[] { "ExpectationEnumId" }, "WKEFF_PA_EXP_ENUM");

                    b.HasIndex(new[] { "FacilityId" }, "WKEFF_PA_FACILITY");

                    b.HasIndex(new[] { "PartyId", "RoleTypeId" }, "WKEFF_PA_PRTY_ROLE");

                    b.HasIndex(new[] { "StatusId" }, "WKEFF_PA_STTS");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_PA_WE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_PRT_AST_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_PRT_AST_TS");

                    b.ToTable("WORK_EFFORT_PARTY_ASSIGNMENT", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortPurposeType", b =>
                {
                    b.Property<string>("WorkEffortPurposeTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_PURPOSE_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("WorkEffortPurposeTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "WK_EFFRT_PTYPE_PAR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_PRS_TP_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_PRS_TP_TXS");

                    b.ToTable("WORK_EFFORT_PURPOSE_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortReview", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("UserLoginId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("USER_LOGIN_ID");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime")
                        .HasColumnName("REVIEW_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("PostedAnonymous")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("POSTED_ANONYMOUS")
                        .IsFixedLength();

                    b.Property<double?>("Rating")
                        .HasColumnType("double")
                        .HasColumnName("RATING");

                    b.Property<string>("ReviewText")
                        .HasColumnType("text")
                        .HasColumnName("REVIEW_TEXT");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.HasKey("WorkEffortId", "UserLoginId", "ReviewDate");

                    b.HasIndex(new[] { "StatusId" }, "WEFF_REVIEW_STTS");

                    b.HasIndex(new[] { "UserLoginId" }, "WEFF_REVIEW_UL");

                    b.HasIndex(new[] { "WorkEffortId" }, "WEFF_REVIEW_WEFF");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFFT_RVW_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFFT_RVW_TXSTP");

                    b.ToTable("WORK_EFFORT_REVIEW", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortSearchConstraint", b =>
                {
                    b.Property<string>("WorkEffortSearchResultId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_SEARCH_RESULT_ID");

                    b.Property<string>("ConstraintSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CONSTRAINT_SEQ_ID");

                    b.Property<string>("AnyPrefix")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ANY_PREFIX")
                        .IsFixedLength();

                    b.Property<string>("AnySuffix")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("ANY_SUFFIX")
                        .IsFixedLength();

                    b.Property<string>("ConstraintName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CONSTRAINT_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("HighValue")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("HIGH_VALUE");

                    b.Property<string>("IncludeSubWorkEfforts")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INCLUDE_SUB_WORK_EFFORTS")
                        .IsFixedLength();

                    b.Property<string>("InfoString")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("INFO_STRING");

                    b.Property<string>("IsAnd")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_AND")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("LowValue")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("LOW_VALUE");

                    b.Property<string>("RemoveStems")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("REMOVE_STEMS")
                        .IsFixedLength();

                    b.HasKey("WorkEffortSearchResultId", "ConstraintSeqId")
                        .HasName("PK_WORK_EFFORT_SEARCH_CONSTRAI");

                    b.HasIndex(new[] { "WorkEffortSearchResultId" }, "WEFF_SCHRSI_RES");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_SRH_CNT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_SRH_CNT_TS");

                    b.ToTable("WORK_EFFORT_SEARCH_CONSTRAINT", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortSearchResult", b =>
                {
                    b.Property<string>("WorkEffortSearchResultId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_SEARCH_RESULT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IsAscending")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("IS_ASCENDING")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<int?>("NumResults")
                        .HasColumnType("int")
                        .HasColumnName("NUM_RESULTS");

                    b.Property<string>("OrderByName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ORDER_BY_NAME");

                    b.Property<DateTime?>("SearchDate")
                        .HasColumnType("datetime")
                        .HasColumnName("SEARCH_DATE");

                    b.Property<double?>("SecondsTotal")
                        .HasColumnType("double")
                        .HasColumnName("SECONDS_TOTAL");

                    b.Property<string>("VisitId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("VISIT_ID");

                    b.HasKey("WorkEffortSearchResultId");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_SRH_RST_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_SRH_RST_TS");

                    b.ToTable("WORK_EFFORT_SEARCH_RESULT", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortSkillStandard", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("SkillTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SKILL_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("ESTIMATED_COST");

                    b.Property<double?>("EstimatedDuration")
                        .HasColumnType("double")
                        .HasColumnName("ESTIMATED_DURATION");

                    b.Property<double?>("EstimatedNumPeople")
                        .HasColumnType("double")
                        .HasColumnName("ESTIMATED_NUM_PEOPLE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortId", "SkillTypeId");

                    b.HasIndex(new[] { "SkillTypeId" }, "WKEFF_SKLSTD_SKTP");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_SKLSTD_WEFF");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_SKL_STD_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_SKL_STD_TS");

                    b.ToTable("WORK_EFFORT_SKILL_STANDARD", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortStatus", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("StatusId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("STATUS_ID");

                    b.Property<DateTime>("StatusDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("STATUS_DATETIME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("REASON");

                    b.Property<string>("SetByUserLogin")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("SET_BY_USER_LOGIN");

                    b.HasKey("WorkEffortId", "StatusId", "StatusDatetime");

                    b.HasIndex(new[] { "SetByUserLogin" }, "WKEFF_STTS_SB_UL");

                    b.HasIndex(new[] { "StatusId" }, "WKEFF_STTS_STTS");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEFF_STTS_WE");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFFT_STS_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFFT_STS_TXSTP");

                    b.ToTable("WORK_EFFORT_STATUS", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortSurveyAppl", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("SurveyId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SURVEY_ID");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime")
                        .HasColumnName("THRU_DATE");

                    b.HasKey("WorkEffortId", "SurveyId", "FromDate");

                    b.HasIndex(new[] { "SurveyId" }, "WKEF_SURVAPL_PSSA");

                    b.HasIndex(new[] { "SurveyId" }, "WKEF_SURVAPL_SVY");

                    b.HasIndex(new[] { "WorkEffortId" }, "WKEF_SURVAPL_WKE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_SRV_APL_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_SRV_APL_TS");

                    b.ToTable("WORK_EFFORT_SURVEY_APPL", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortTransBox", b =>
                {
                    b.Property<string>("ProcessWorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PROCESS_WORK_EFFORT_ID");

                    b.Property<string>("ToActivityId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TO_ACTIVITY_ID");

                    b.Property<string>("TransitionId")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TRANSITION_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("ProcessWorkEffortId", "ToActivityId", "TransitionId");

                    b.HasIndex(new[] { "ProcessWorkEffortId" }, "WKEFF_TXBX_WE");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_TRS_BX_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_TRS_BX_TXS");

                    b.ToTable("WORK_EFFORT_TRANS_BOX", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortType", b =>
                {
                    b.Property<string>("WorkEffortTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("HasTable")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("HAS_TABLE")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ParentTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("PARENT_TYPE_ID");

                    b.HasKey("WorkEffortTypeId");

                    b.HasIndex(new[] { "ParentTypeId" }, "WK_EFFRT_TYPE_PAR");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFFT_TP_TXCRTS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFFT_TP_TXSTMP");

                    b.ToTable("WORK_EFFORT_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.WorkEffortTypeAttr", b =>
                {
                    b.Property<string>("WorkEffortTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_TYPE_ID");

                    b.Property<string>("AttrName")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ATTR_NAME");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkEffortTypeId", "AttrName");

                    b.HasIndex(new[] { "WorkEffortTypeId" }, "WK_EFFRT_TYPE_ATR");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_EFT_TP_ATR_TXP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_EFT_TP_ATR_TXS");

                    b.ToTable("WORK_EFFORT_TYPE_ATTR", (string)null);
                });

            modelBuilder.Entity("Domain.WorkOrderItemFulfillment", b =>
                {
                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ID");

                    b.Property<string>("OrderItemSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("ORDER_ITEM_SEQ_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ShipGroupSeqId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("SHIP_GROUP_SEQ_ID");

                    b.HasKey("WorkEffortId", "OrderId", "OrderItemSeqId");

                    b.HasIndex(new[] { "OrderId" }, "WORDER_ITFMT_OHDR");

                    b.HasIndex(new[] { "OrderId", "OrderItemSeqId" }, "WORDER_ITFMT_OITM");

                    b.HasIndex(new[] { "WorkEffortId" }, "WORDER_ITFMT_WEFRT");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_ORR_ITM_FLT_TP");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_ORR_ITM_FLT_TS");

                    b.ToTable("WORK_ORDER_ITEM_FULFILLMENT", (string)null);
                });

            modelBuilder.Entity("Domain.WorkReqFulfType", b =>
                {
                    b.Property<string>("WorkReqFulfTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_REQ_FULF_TYPE_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.HasKey("WorkReqFulfTypeId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_RQ_FLF_TP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_RQ_FLF_TP_TXSP");

                    b.ToTable("WORK_REQ_FULF_TYPE", (string)null);
                });

            modelBuilder.Entity("Domain.WorkRequirementFulfillment", b =>
                {
                    b.Property<string>("RequirementId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("REQUIREMENT_ID");

                    b.Property<string>("WorkEffortId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_EFFORT_ID");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("WorkReqFulfTypeId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("WORK_REQ_FULF_TYPE_ID");

                    b.HasKey("RequirementId", "WorkEffortId")
                        .HasName("PK_WORK_REQUIREMENT_FULFILLMEN");

                    b.HasIndex(new[] { "RequirementId" }, "WORK_REQFL_REQ");

                    b.HasIndex(new[] { "WorkEffortId" }, "WORK_REQFL_WEFF");

                    b.HasIndex(new[] { "WorkReqFulfTypeId" }, "WORK_REQFL_WRFT");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "WRK_RQT_FLFLT_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "WRK_RQT_FLFLT_TXSP");

                    b.ToTable("WORK_REQUIREMENT_FULFILLMENT", (string)null);
                });

            modelBuilder.Entity("Domain.X509IssuerProvision", b =>
                {
                    b.Property<string>("CertProvisionId")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CERT_PROVISION_ID");

                    b.Property<string>("CityLocality")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("CITY_LOCALITY");

                    b.Property<string>("CommonName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COMMON_NAME");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("COUNTRY");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ORGANIZATION_NAME");

                    b.Property<string>("OrganizationalUnit")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ORGANIZATIONAL_UNIT");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SERIAL_NUMBER");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("STATE_PROVINCE");

                    b.HasKey("CertProvisionId");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "X59_ISR_PRVN_TXCRS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "X59_ISR_PRVN_TXSTP");

                    b.ToTable("X509_ISSUER_PROVISION", (string)null);
                });

            modelBuilder.Entity("Domain.ZipSalesRuleLookup", b =>
                {
                    b.Property<string>("StateCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("STATE_CODE");

                    b.Property<string>("City")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CITY");

                    b.Property<string>("County")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COUNTY");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("IdCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ID_CODE");

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<string>("ShipCond")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SHIP_COND");

                    b.Property<string>("Taxable")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("TAXABLE");

                    b.HasKey("StateCode", "City", "County", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ZP_SLS_RL_LKP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ZP_SLS_RL_LKP_TXSP");

                    b.ToTable("ZIP_SALES_RULE_LOOKUP", (string)null);
                });

            modelBuilder.Entity("Domain.ZipSalesTaxLookup", b =>
                {
                    b.Property<string>("ZipCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("ZIP_CODE");

                    b.Property<string>("StateCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("STATE_CODE");

                    b.Property<string>("City")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("CITY");

                    b.Property<string>("County")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COUNTY");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FROM_DATE");

                    b.Property<decimal?>("CityLocalSalesTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("CITY_LOCAL_SALES_TAX");

                    b.Property<decimal?>("CityLocalUseTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("CITY_LOCAL_USE_TAX");

                    b.Property<decimal?>("CitySalesTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("CITY_SALES_TAX");

                    b.Property<decimal?>("CityUseTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("CITY_USE_TAX");

                    b.Property<decimal?>("ComboSalesTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("COMBO_SALES_TAX");

                    b.Property<decimal?>("ComboUseTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("COMBO_USE_TAX");

                    b.Property<string>("CountyDefault")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("COUNTY_DEFAULT")
                        .IsFixedLength();

                    b.Property<string>("CountyFips")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("COUNTY_FIPS");

                    b.Property<decimal?>("CountyLocalSalesTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("COUNTY_LOCAL_SALES_TAX");

                    b.Property<decimal?>("CountyLocalUseTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("COUNTY_LOCAL_USE_TAX");

                    b.Property<decimal?>("CountySalesTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("COUNTY_SALES_TAX");

                    b.Property<decimal?>("CountyUseTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("COUNTY_USE_TAX");

                    b.Property<DateTime?>("CreatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_STAMP");

                    b.Property<DateTime?>("CreatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATED_TX_STAMP");

                    b.Property<string>("GeneralDefault")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("GENERAL_DEFAULT")
                        .IsFixedLength();

                    b.Property<string>("GeoCode")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("GEO_CODE");

                    b.Property<string>("InsideCity")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("INSIDE_CITY")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastUpdatedStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_STAMP");

                    b.Property<DateTime?>("LastUpdatedTxStamp")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_UPDATED_TX_STAMP");

                    b.Property<decimal?>("StateSalesTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("STATE_SALES_TAX");

                    b.Property<decimal?>("StateUseTax")
                        .HasColumnType("decimal(18, 6)")
                        .HasColumnName("STATE_USE_TAX");

                    b.HasKey("ZipCode", "StateCode", "City", "County", "FromDate");

                    b.HasIndex(new[] { "CreatedTxStamp" }, "ZP_SLS_TX_LKP_TXCS");

                    b.HasIndex(new[] { "LastUpdatedTxStamp" }, "ZP_SLS_TX_LKP_TXSP");

                    b.ToTable("ZIP_SALES_TAX_LOOKUP", (string)null);
                });

            modelBuilder.Entity("Domain.AccommodationClass", b =>
                {
                    b.HasOne("Domain.AccommodationClass", "ParentClass")
                        .WithMany("InverseParentClass")
                        .HasForeignKey("ParentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCOMM_CLASS_PAR");

                    b.Navigation("ParentClass");
                });

            modelBuilder.Entity("Domain.AccommodationMap", b =>
                {
                    b.HasOne("Domain.AccommodationClass", "AccommodationClass")
                        .WithMany("AccommodationMaps")
                        .HasForeignKey("AccommodationClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACMD_MAP_CLASS");

                    b.HasOne("Domain.AccommodationMapType", "AccommodationMapType")
                        .WithMany("AccommodationMaps")
                        .HasForeignKey("AccommodationMapTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACMD_MAP_TYPE");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("AccommodationMaps")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACMD_MAP_FA");

                    b.Navigation("AccommodationClass");

                    b.Navigation("AccommodationMapType");

                    b.Navigation("FixedAsset");
                });

            modelBuilder.Entity("Domain.AccommodationSpot", b =>
                {
                    b.HasOne("Domain.AccommodationClass", "AccommodationClass")
                        .WithMany("AccommodationSpots")
                        .HasForeignKey("AccommodationClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCOM_CLASS");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("AccommodationSpots")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SPOT_FA");

                    b.Navigation("AccommodationClass");

                    b.Navigation("FixedAsset");
                });

            modelBuilder.Entity("Domain.AcctgTran", b =>
                {
                    b.HasOne("Domain.AcctgTransType", "AcctgTransType")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("AcctgTransTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_TYPE");

                    b.HasOne("Domain.FinAccountTran", "FinAccountTrans")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("FinAccountTransId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_FNACTTR");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_FASSET");

                    b.HasOne("Domain.GlFiscalType", "GlFiscalType")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("GlFiscalTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_GLFST");

                    b.HasOne("Domain.GlJournal", "GlJournal")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("GlJournalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_GLJRNL");

                    b.HasOne("Domain.StatusItem", "GroupStatus")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("GroupStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_GRPSTTS");

                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_INVITEM");

                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_INVOICE");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_PARTY");

                    b.HasOne("Domain.Payment", "Payment")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_PAYMENT");

                    b.HasOne("Domain.PhysicalInventory", "PhysicalInventory")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("PhysicalInventoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_PHS_INV");

                    b.HasOne("Domain.ShipmentReceipt", "Receipt")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_SHIPRCPT");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_ROLETYP");

                    b.HasOne("Domain.Shipment", "Shipment")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_SHIPMENT");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_WEFF");

                    b.HasOne("Domain.InventoryItemVariance", "InventoryItemVariance")
                        .WithMany("AcctgTrans")
                        .HasForeignKey("InventoryItemId", "PhysicalInventoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_INVITEMVAR");

                    b.Navigation("AcctgTransType");

                    b.Navigation("FinAccountTrans");

                    b.Navigation("FixedAsset");

                    b.Navigation("GlFiscalType");

                    b.Navigation("GlJournal");

                    b.Navigation("GroupStatus");

                    b.Navigation("InventoryItem");

                    b.Navigation("InventoryItemVariance");

                    b.Navigation("Invoice");

                    b.Navigation("Party");

                    b.Navigation("Payment");

                    b.Navigation("PhysicalInventory");

                    b.Navigation("Receipt");

                    b.Navigation("RoleType");

                    b.Navigation("Shipment");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.AcctgTransAttribute", b =>
                {
                    b.HasOne("Domain.AcctgTran", "AcctgTrans")
                        .WithMany("AcctgTransAttributes")
                        .HasForeignKey("AcctgTransId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ACCTTX_ATTR");

                    b.Navigation("AcctgTrans");
                });

            modelBuilder.Entity("Domain.AcctgTransEntry", b =>
                {
                    b.HasOne("Domain.AcctgTransEntryType", "AcctgTransEntryType")
                        .WithMany("AcctgTransEntries")
                        .HasForeignKey("AcctgTransEntryTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_ATET");

                    b.HasOne("Domain.AcctgTran", "AcctgTrans")
                        .WithMany("AcctgTransEntries")
                        .HasForeignKey("AcctgTransId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ACCTTXENT_ACTX");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("AcctgTransEntryCurrencyUoms")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_CURNCY");

                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("AcctgTransEntries")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_GLACT");

                    b.HasOne("Domain.GlAccountType", "GlAccountType")
                        .WithMany("AcctgTransEntries")
                        .HasForeignKey("GlAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_GLACTT");

                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("AcctgTransEntries")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_INVITEM");

                    b.HasOne("Domain.Uom", "OrigCurrencyUom")
                        .WithMany("AcctgTransEntryOrigCurrencyUoms")
                        .HasForeignKey("OrigCurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_OCURNCY");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("AcctgTransEntries")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_PARTY");

                    b.HasOne("Domain.StatusItem", "ReconcileStatus")
                        .WithMany("AcctgTransEntries")
                        .HasForeignKey("ReconcileStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_RCSTS");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("AcctgTransEntries")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_RLTYP");

                    b.HasOne("Domain.SettlementTerm", "SettlementTerm")
                        .WithMany("AcctgTransEntries")
                        .HasForeignKey("SettlementTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_STLEN");

                    b.HasOne("Domain.GlAccountOrganization", "GlAccountOrganization")
                        .WithMany("AcctgTransEntries")
                        .HasForeignKey("GlAccountId", "OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXENT_GLACOG");

                    b.Navigation("AcctgTrans");

                    b.Navigation("AcctgTransEntryType");

                    b.Navigation("CurrencyUom");

                    b.Navigation("GlAccount");

                    b.Navigation("GlAccountOrganization");

                    b.Navigation("GlAccountType");

                    b.Navigation("InventoryItem");

                    b.Navigation("OrigCurrencyUom");

                    b.Navigation("Party");

                    b.Navigation("ReconcileStatus");

                    b.Navigation("RoleType");

                    b.Navigation("SettlementTerm");
                });

            modelBuilder.Entity("Domain.AcctgTransEntryType", b =>
                {
                    b.HasOne("Domain.AcctgTransEntryType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTXE_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.AcctgTransType", b =>
                {
                    b.HasOne("Domain.AcctgTransType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTTX_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.AcctgTransTypeAttr", b =>
                {
                    b.HasOne("Domain.AcctgTransType", "AcctgTransType")
                        .WithMany("AcctgTransTypeAttrs")
                        .HasForeignKey("AcctgTransTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ACCTTX_TYPE_ATTR");

                    b.Navigation("AcctgTransType");
                });

            modelBuilder.Entity("Domain.Addendum", b =>
                {
                    b.HasOne("Domain.Agreement", "Agreement")
                        .WithMany("Addenda")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ADDNDM_AGRMNT");

                    b.HasOne("Domain.AgreementItem", "AgreementI")
                        .WithMany("Addenda")
                        .HasForeignKey("AgreementId", "AgreementItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ADDNDM_AGRMNT_ITM");

                    b.Navigation("Agreement");

                    b.Navigation("AgreementI");
                });

            modelBuilder.Entity("Domain.Affiliate", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithOne("Affiliate")
                        .HasForeignKey("Domain.Affiliate", "PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AFFILIATE_PARTY");

                    b.HasOne("Domain.PartyGroup", "PartyNavigation")
                        .WithOne("Affiliate")
                        .HasForeignKey("Domain.Affiliate", "PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AFFILIATE_PGRP");

                    b.Navigation("Party");

                    b.Navigation("PartyNavigation");
                });

            modelBuilder.Entity("Domain.Agreement", b =>
                {
                    b.HasOne("Domain.AgreementType", "AgreementType")
                        .WithMany("Agreements")
                        .HasForeignKey("AgreementTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_TYPE");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("Agreements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_PRODUCT");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("AgreementPartyRoles")
                        .HasForeignKey("PartyIdFrom", "RoleTypeIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_FPRTYRLE");

                    b.HasOne("Domain.PartyRole", "PartyRoleNavigation")
                        .WithMany("AgreementPartyRoleNavigations")
                        .HasForeignKey("PartyIdTo", "RoleTypeIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_TPRTYRLE");

                    b.Navigation("AgreementType");

                    b.Navigation("PartyRole");

                    b.Navigation("PartyRoleNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.AgreementAttribute", b =>
                {
                    b.HasOne("Domain.Agreement", "Agreement")
                        .WithMany("AgreementAttributes")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_ATTR");

                    b.Navigation("Agreement");
                });

            modelBuilder.Entity("Domain.AgreementContent", b =>
                {
                    b.HasOne("Domain.AgreementContentType", "AgreementContentType")
                        .WithMany("AgreementContents")
                        .HasForeignKey("AgreementContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AG_CNT_TYPE");

                    b.HasOne("Domain.Agreement", "Agreement")
                        .WithMany("AgreementContents")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AG_CNT_PROD");

                    b.HasOne("Domain.Content", "Content")
                        .WithMany("AgreementContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AG_CNT_CNT");

                    b.Navigation("Agreement");

                    b.Navigation("AgreementContentType");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.AgreementContentType", b =>
                {
                    b.HasOne("Domain.AgreementContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGCT_TYP_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.AgreementEmploymentAppl", b =>
                {
                    b.HasOne("Domain.AgreementItem", "AgreementI")
                        .WithMany("AgreementEmploymentAppls")
                        .HasForeignKey("AgreementId", "AgreementItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_EMPL_AITM");

                    b.HasOne("Domain.Employment", "Employment")
                        .WithMany("AgreementEmploymentAppls")
                        .HasForeignKey("RoleTypeIdFrom", "RoleTypeIdTo", "PartyIdFrom", "PartyIdTo", "FromDate")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_EMPL_APPL");

                    b.Navigation("AgreementI");

                    b.Navigation("Employment");
                });

            modelBuilder.Entity("Domain.AgreementFacilityAppl", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("AgreementFacilityAppls")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_FACLT_PRD");

                    b.HasOne("Domain.AgreementItem", "AgreementI")
                        .WithMany("AgreementFacilityAppls")
                        .HasForeignKey("AgreementId", "AgreementItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_FACLT_AITM");

                    b.Navigation("AgreementI");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.AgreementGeographicalApplic", b =>
                {
                    b.HasOne("Domain.Agreement", "Agreement")
                        .WithMany("AgreementGeographicalApplics")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_GEOAP_AGR");

                    b.HasOne("Domain.Geo", "Geo")
                        .WithMany("AgreementGeographicalApplics")
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_GEOAP_GEO");

                    b.HasOne("Domain.AgreementItem", "AgreementI")
                        .WithMany("AgreementGeographicalApplics")
                        .HasForeignKey("AgreementId", "AgreementItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_GEOAP_AGRI");

                    b.Navigation("Agreement");

                    b.Navigation("AgreementI");

                    b.Navigation("Geo");
                });

            modelBuilder.Entity("Domain.AgreementItem", b =>
                {
                    b.HasOne("Domain.Agreement", "Agreement")
                        .WithMany("AgreementItems")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_ITEM_AGR");

                    b.HasOne("Domain.AgreementItemType", "AgreementItemType")
                        .WithMany("AgreementItems")
                        .HasForeignKey("AgreementItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_ITEM_TYPE");

                    b.Navigation("Agreement");

                    b.Navigation("AgreementItemType");
                });

            modelBuilder.Entity("Domain.AgreementItemAttribute", b =>
                {
                    b.HasOne("Domain.AgreementItem", "AgreementI")
                        .WithMany("AgreementItemAttributes")
                        .HasForeignKey("AgreementId", "AgreementItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_ITEM_ATTR");

                    b.Navigation("AgreementI");
                });

            modelBuilder.Entity("Domain.AgreementItemType", b =>
                {
                    b.HasOne("Domain.AgreementItemType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_TYPEPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.AgreementItemTypeAttr", b =>
                {
                    b.HasOne("Domain.AgreementItemType", "AgreementItemType")
                        .WithMany("AgreementItemTypeAttrs")
                        .HasForeignKey("AgreementItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_ITEM_TYPATR");

                    b.Navigation("AgreementItemType");
                });

            modelBuilder.Entity("Domain.AgreementPartyApplic", b =>
                {
                    b.HasOne("Domain.Agreement", "Agreement")
                        .WithMany("AgreementPartyApplics")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_PTYA_AGR");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("AgreementPartyApplics")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_PTYA_PTY");

                    b.Navigation("Agreement");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.AgreementProductAppl", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("AgreementProductAppls")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_PRDA_PRD");

                    b.HasOne("Domain.AgreementItem", "AgreementI")
                        .WithMany("AgreementProductAppls")
                        .HasForeignKey("AgreementId", "AgreementItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_PRDA_AITM");

                    b.Navigation("AgreementI");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.AgreementPromoAppl", b =>
                {
                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("AgreementPromoAppls")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_PROM_PRO");

                    b.HasOne("Domain.AgreementItem", "AgreementI")
                        .WithMany("AgreementPromoAppls")
                        .HasForeignKey("AgreementId", "AgreementItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_PROM_AITM");

                    b.Navigation("AgreementI");

                    b.Navigation("ProductPromo");
                });

            modelBuilder.Entity("Domain.AgreementRole", b =>
                {
                    b.HasOne("Domain.Agreement", "Agreement")
                        .WithMany("AgreementRoles")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_ROLE_AGR");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("AgreementRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_ROLE_PTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("AgreementRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_ROLE_PRLE");

                    b.Navigation("Agreement");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.AgreementStatus", b =>
                {
                    b.HasOne("Domain.Agreement", "Agreement")
                        .WithMany("AgreementStatuses")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_STTS_AGRMNT");

                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("AgreementStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_STTS_USRLGN");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("AgreementStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_STTS_STTS");

                    b.Navigation("Agreement");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.AgreementTerm", b =>
                {
                    b.HasOne("Domain.Agreement", "Agreement")
                        .WithMany("AgreementTerms")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_TERM_AGR");

                    b.HasOne("Domain.InvoiceItemType", "InvoiceItemType")
                        .WithMany("AgreementTerms")
                        .HasForeignKey("InvoiceItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_TERM_IIT");

                    b.HasOne("Domain.TermType", "TermType")
                        .WithMany("AgreementTerms")
                        .HasForeignKey("TermTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_TERM_TTYP");

                    b.HasOne("Domain.AgreementItem", "AgreementI")
                        .WithMany("AgreementTerms")
                        .HasForeignKey("AgreementId", "AgreementItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_TERM_AITM");

                    b.Navigation("Agreement");

                    b.Navigation("AgreementI");

                    b.Navigation("InvoiceItemType");

                    b.Navigation("TermType");
                });

            modelBuilder.Entity("Domain.AgreementTermAttribute", b =>
                {
                    b.HasOne("Domain.AgreementTerm", "AgreementTerm")
                        .WithMany("AgreementTermAttributes")
                        .HasForeignKey("AgreementTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_TERM_ATTR");

                    b.Navigation("AgreementTerm");
                });

            modelBuilder.Entity("Domain.AgreementType", b =>
                {
                    b.HasOne("Domain.AgreementType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AGRMNT_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.AgreementTypeAttr", b =>
                {
                    b.HasOne("Domain.AgreementType", "AgreementType")
                        .WithMany("AgreementTypeAttrs")
                        .HasForeignKey("AgreementTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_TYPE_ATTR");

                    b.Navigation("AgreementType");
                });

            modelBuilder.Entity("Domain.AgreementWorkEffortApplic", b =>
                {
                    b.HasOne("Domain.Agreement", "Agreement")
                        .WithMany("AgreementWorkEffortApplics")
                        .HasForeignKey("AgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_WEA_AGRMNT");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("AgreementWorkEffortApplics")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AGRMNT_WEA_WE");

                    b.Navigation("Agreement");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.AllocationPlanHeader", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("AllocationPlanHeaderCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ALC_PLN_HDR_CBUL");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("AllocationPlanHeaderLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ALC_PLN_HDR_LMUL");

                    b.HasOne("Domain.AllocationPlanType", "PlanType")
                        .WithMany("AllocationPlanHeaders")
                        .HasForeignKey("PlanTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ALC_PLN_HDR_TYP");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("AllocationPlanHeaders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ALC_PLN_HDR_STS");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("PlanType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.AllocationPlanItem", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("AllocationPlanItemCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ALC_PLN_ITM_CBUL");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("AllocationPlanItemLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ALC_PLN_ITM_LMUL");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("AllocationPlanItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ALC_PLN_ITM_ODRHDR");

                    b.HasOne("Domain.Enumeration", "PlanMethodEnum")
                        .WithMany("AllocationPlanItems")
                        .HasForeignKey("PlanMethodEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ALC_PLN_ITM_ENUM");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("AllocationPlanItems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ALC_PLN_ITM_STS");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("AllocationPlanItems")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ALC_PLN_ITM_ODRITM");

                    b.HasOne("Domain.AllocationPlanHeader", "P")
                        .WithMany("AllocationPlanItems")
                        .HasForeignKey("PlanId", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ALC_PLN_ITM_HDR");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("Order");

                    b.Navigation("OrderI");

                    b.Navigation("P");

                    b.Navigation("PlanMethodEnum");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.AppUserLogin", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("AppUserLogins")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ApplicationSandbox", b =>
                {
                    b.HasOne("Domain.RuntimeDatum", "RuntimeData")
                        .WithMany("ApplicationSandboxes")
                        .HasForeignKey("RuntimeDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("APP_SNDBX_RNTMDTA");

                    b.HasOne("Domain.WorkEffortPartyAssignment", "WorkEffortPartyAssignment")
                        .WithMany("ApplicationSandboxes")
                        .HasForeignKey("WorkEffortId", "PartyId", "RoleTypeId", "FromDate")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("APP_SNDBX_WEPA");

                    b.Navigation("RuntimeData");

                    b.Navigation("WorkEffortPartyAssignment");
                });

            modelBuilder.Entity("Domain.ApplicationUserClaim", b =>
                {
                    b.HasOne("Domain.AppUserLogin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ApplicationUserLogin", b =>
                {
                    b.HasOne("Domain.AppUserLogin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ApplicationUserRole", b =>
                {
                    b.HasOne("Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.AppUserLogin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ApplicationUserToken", b =>
                {
                    b.HasOne("Domain.AppUserLogin", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AudioDataResource", b =>
                {
                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithOne("AudioDataResource")
                        .HasForeignKey("Domain.AudioDataResource", "DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_REC_AUDIO");

                    b.Navigation("DataResource");
                });

            modelBuilder.Entity("Domain.BenefitType", b =>
                {
                    b.HasOne("Domain.BenefitType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BEN_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.BillingAccount", b =>
                {
                    b.HasOne("Domain.Uom", "AccountCurrencyUom")
                        .WithMany("BillingAccounts")
                        .HasForeignKey("AccountCurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BILLACCT_CUOM");

                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("BillingAccounts")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BILLACCT_CMECH");

                    b.HasOne("Domain.PostalAddress", "ContactMechNavigation")
                        .WithMany("BillingAccounts")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BILLACCT_PADDR");

                    b.Navigation("AccountCurrencyUom");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechNavigation");
                });

            modelBuilder.Entity("Domain.BillingAccountRole", b =>
                {
                    b.HasOne("Domain.BillingAccount", "BillingAccount")
                        .WithMany("BillingAccountRoles")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BILLACCT_ROLE");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("BillingAccountRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BILLACCT_RL_PARTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("BillingAccountRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BILLACCT_RL_PTRL");

                    b.Navigation("BillingAccount");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.BillingAccountTerm", b =>
                {
                    b.HasOne("Domain.BillingAccount", "BillingAccount")
                        .WithMany("BillingAccountTerms")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BILLACCT_TRM_BACT");

                    b.HasOne("Domain.TermType", "TermType")
                        .WithMany("BillingAccountTerms")
                        .HasForeignKey("TermTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BILLACCT_TRM_TRM");

                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("BillingAccountTerms")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BILLACCT_TRM_UOM");

                    b.Navigation("BillingAccount");

                    b.Navigation("TermType");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Domain.BillingAccountTermAttr", b =>
                {
                    b.HasOne("Domain.BillingAccountTerm", "BillingAccountTerm")
                        .WithMany("BillingAccountTermAttrs")
                        .HasForeignKey("BillingAccountTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BILLACCT_TRM_ATTR");

                    b.Navigation("BillingAccountTerm");
                });

            modelBuilder.Entity("Domain.Budget", b =>
                {
                    b.HasOne("Domain.BudgetType", "BudgetType")
                        .WithMany("Budgets")
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BUDGET_BGTTYP");

                    b.HasOne("Domain.CustomTimePeriod", "CustomTimePeriod")
                        .WithMany("Budgets")
                        .HasForeignKey("CustomTimePeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BUDGET_CTP");

                    b.Navigation("BudgetType");

                    b.Navigation("CustomTimePeriod");
                });

            modelBuilder.Entity("Domain.BudgetAttribute", b =>
                {
                    b.HasOne("Domain.Budget", "Budget")
                        .WithMany("BudgetAttributes")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_ATTR_BDGT");

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("Domain.BudgetItem", b =>
                {
                    b.HasOne("Domain.Budget", "Budget")
                        .WithMany("BudgetItems")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BDGTITM_TO_BDGT");

                    b.HasOne("Domain.BudgetItemType", "BudgetItemType")
                        .WithMany("BudgetItems")
                        .HasForeignKey("BudgetItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BUDGET_ITEM_BTYP");

                    b.Navigation("Budget");

                    b.Navigation("BudgetItemType");
                });

            modelBuilder.Entity("Domain.BudgetItemAttribute", b =>
                {
                    b.HasOne("Domain.BudgetItem", "BudgetI")
                        .WithMany("BudgetItemAttributes")
                        .HasForeignKey("BudgetId", "BudgetItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_ITEM_ATTR");

                    b.Navigation("BudgetI");
                });

            modelBuilder.Entity("Domain.BudgetItemType", b =>
                {
                    b.HasOne("Domain.BudgetItemType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BUDGET_ITM_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.BudgetItemTypeAttr", b =>
                {
                    b.HasOne("Domain.BudgetItemType", "BudgetItemType")
                        .WithMany("BudgetItemTypeAttrs")
                        .HasForeignKey("BudgetItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_ITMTYPATTR");

                    b.Navigation("BudgetItemType");
                });

            modelBuilder.Entity("Domain.BudgetReview", b =>
                {
                    b.HasOne("Domain.Budget", "Budget")
                        .WithMany("BudgetReviews")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_RVW_BDGT");

                    b.HasOne("Domain.BudgetReviewResultType", "BudgetReviewResultType")
                        .WithMany("BudgetReviews")
                        .HasForeignKey("BudgetReviewResultTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_RVW_RTYPE");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("BudgetReviews")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_RVW_PARTY");

                    b.Navigation("Budget");

                    b.Navigation("BudgetReviewResultType");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.BudgetRevision", b =>
                {
                    b.HasOne("Domain.Budget", "Budget")
                        .WithMany("BudgetRevisions")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_RVSN_BDGT");

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("Domain.BudgetRevisionImpact", b =>
                {
                    b.HasOne("Domain.Budget", "Budget")
                        .WithMany("BudgetRevisionImpacts")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_RNIMP_BDGT");

                    b.HasOne("Domain.BudgetItem", "BudgetI")
                        .WithMany("BudgetRevisionImpacts")
                        .HasForeignKey("BudgetId", "BudgetItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_RNIMP_BITM");

                    b.HasOne("Domain.BudgetRevision", "BudgetRevision")
                        .WithMany("BudgetRevisionImpacts")
                        .HasForeignKey("BudgetId", "RevisionSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_RNIMP_REV");

                    b.Navigation("Budget");

                    b.Navigation("BudgetI");

                    b.Navigation("BudgetRevision");
                });

            modelBuilder.Entity("Domain.BudgetRole", b =>
                {
                    b.HasOne("Domain.Budget", "Budget")
                        .WithMany("BudgetRoles")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_ROLE_BDGT");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("BudgetRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_ROLE_PARTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("BudgetRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_ROLE_PROLE");

                    b.Navigation("Budget");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.BudgetScenarioApplication", b =>
                {
                    b.HasOne("Domain.Budget", "Budget")
                        .WithMany("BudgetScenarioApplications")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BUDGET_SAPL_BDGT");

                    b.HasOne("Domain.BudgetScenario", "BudgetScenario")
                        .WithMany("BudgetScenarioApplications")
                        .HasForeignKey("BudgetScenarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_SAPL_BSCN");

                    b.HasOne("Domain.BudgetItem", "BudgetI")
                        .WithMany("BudgetScenarioApplications")
                        .HasForeignKey("BudgetId", "BudgetItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BUDGET_SAPL_BITM");

                    b.Navigation("Budget");

                    b.Navigation("BudgetI");

                    b.Navigation("BudgetScenario");
                });

            modelBuilder.Entity("Domain.BudgetScenarioRule", b =>
                {
                    b.HasOne("Domain.BudgetItemType", "BudgetItemType")
                        .WithMany("BudgetScenarioRules")
                        .HasForeignKey("BudgetItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_SRLE_BITP");

                    b.HasOne("Domain.BudgetScenario", "BudgetScenario")
                        .WithMany("BudgetScenarioRules")
                        .HasForeignKey("BudgetScenarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_SRLE_BSCN");

                    b.Navigation("BudgetItemType");

                    b.Navigation("BudgetScenario");
                });

            modelBuilder.Entity("Domain.BudgetStatus", b =>
                {
                    b.HasOne("Domain.Budget", "Budget")
                        .WithMany("BudgetStatuses")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_STTS_BDGT");

                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("BudgetStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BUDGET_STTS_USRLGN");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("BudgetStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_STTS_STTS");

                    b.Navigation("Budget");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.BudgetType", b =>
                {
                    b.HasOne("Domain.BudgetType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("BUDGET_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.BudgetTypeAttr", b =>
                {
                    b.HasOne("Domain.BudgetType", "BudgetType")
                        .WithMany("BudgetTypeAttrs")
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("BUDGET_TPATR_BT");

                    b.Navigation("BudgetType");
                });

            modelBuilder.Entity("Domain.CarrierShipmentBoxType", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("CarrierShipmentBoxTypes")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CARR_SHBX_PARTY");

                    b.HasOne("Domain.ShipmentBoxType", "ShipmentBoxType")
                        .WithMany("CarrierShipmentBoxTypes")
                        .HasForeignKey("ShipmentBoxTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CARR_SHBX_TYPE");

                    b.Navigation("Party");

                    b.Navigation("ShipmentBoxType");
                });

            modelBuilder.Entity("Domain.CarrierShipmentMethod", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("CarrierShipmentMethods")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CARR_SHMETH_PARTY");

                    b.HasOne("Domain.ShipmentMethodType", "ShipmentMethodType")
                        .WithMany("CarrierShipmentMethods")
                        .HasForeignKey("ShipmentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CARR_SHMETH_TYPE");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("CarrierShipmentMethods")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CARR_SHMETH_PROLE");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");

                    b.Navigation("ShipmentMethodType");
                });

            modelBuilder.Entity("Domain.CartAbandonedLine", b =>
                {
                    b.HasOne("Domain.ProdCatalog", "ProdCatalog")
                        .WithMany("CartAbandonedLines")
                        .HasForeignKey("ProdCatalogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CART_ABLN_PRDCAT");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("CartAbandonedLines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CART_ABLN_PRD");

                    b.Navigation("ProdCatalog");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.CheckAccount", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("CheckAccounts")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CACCT_CMECH");

                    b.HasOne("Domain.PostalAddress", "ContactMechNavigation")
                        .WithMany("CheckAccounts")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CACCT_PADDR");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithOne("CheckAccount")
                        .HasForeignKey("Domain.CheckAccount", "PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CACCT_PMETH");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechNavigation");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.CommEventContentAssoc", b =>
                {
                    b.HasOne("Domain.CommContentAssocType", "CommContentAssocType")
                        .WithMany("CommEventContentAssocs")
                        .HasForeignKey("CommContentAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COMMEV_CA_TYP");

                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("CommEventContentAssocs")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMMEV_CA_COMMEV");

                    b.HasOne("Domain.Content", "Content")
                        .WithMany("CommEventContentAssocs")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMMEV_CA_FROM");

                    b.Navigation("CommContentAssocType");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.CommunicationEvent", b =>
                {
                    b.HasOne("Domain.CommunicationEventType", "CommunicationEventType")
                        .WithMany("CommunicationEvents")
                        .HasForeignKey("CommunicationEventTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_TYPE");

                    b.HasOne("Domain.ContactList", "ContactList")
                        .WithMany("CommunicationEvents")
                        .HasForeignKey("ContactListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_CLST");

                    b.HasOne("Domain.ContactMech", "ContactMechIdFromNavigation")
                        .WithMany("CommunicationEventContactMechIdFromNavigations")
                        .HasForeignKey("ContactMechIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_FCM");

                    b.HasOne("Domain.ContactMech", "ContactMechIdToNavigation")
                        .WithMany("CommunicationEventContactMechIdToNavigations")
                        .HasForeignKey("ContactMechIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_TCM");

                    b.HasOne("Domain.ContactMechType", "ContactMechType")
                        .WithMany("CommunicationEvents")
                        .HasForeignKey("ContactMechTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_CMTP");

                    b.HasOne("Domain.MimeType", "ContentMimeType")
                        .WithMany("CommunicationEvents")
                        .HasForeignKey("ContentMimeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_MIMETYPE");

                    b.HasOne("Domain.Party", "PartyIdFromNavigation")
                        .WithMany("CommunicationEventPartyIdFromNavigations")
                        .HasForeignKey("PartyIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_FPTY");

                    b.HasOne("Domain.Party", "PartyIdToNavigation")
                        .WithMany("CommunicationEventPartyIdToNavigations")
                        .HasForeignKey("PartyIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_TPTY");

                    b.HasOne("Domain.Enumeration", "ReasonEnum")
                        .WithMany("CommunicationEvents")
                        .HasForeignKey("ReasonEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_RESENUM");

                    b.HasOne("Domain.RoleType", "RoleTypeIdFromNavigation")
                        .WithMany("CommunicationEventRoleTypeIdFromNavigations")
                        .HasForeignKey("RoleTypeIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_FRTYP");

                    b.HasOne("Domain.RoleType", "RoleTypeIdToNavigation")
                        .WithMany("CommunicationEventRoleTypeIdToNavigations")
                        .HasForeignKey("RoleTypeIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_TRTYP");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("CommunicationEvents")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_STTS");

                    b.Navigation("CommunicationEventType");

                    b.Navigation("ContactList");

                    b.Navigation("ContactMechIdFromNavigation");

                    b.Navigation("ContactMechIdToNavigation");

                    b.Navigation("ContactMechType");

                    b.Navigation("ContentMimeType");

                    b.Navigation("PartyIdFromNavigation");

                    b.Navigation("PartyIdToNavigation");

                    b.Navigation("ReasonEnum");

                    b.Navigation("RoleTypeIdFromNavigation");

                    b.Navigation("RoleTypeIdToNavigation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.CommunicationEventOrder", b =>
                {
                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("CommunicationEventOrders")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMEV_ORDER_CMEV");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("CommunicationEventOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMEV_ORDER_ORDER");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.CommunicationEventProduct", b =>
                {
                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("CommunicationEventProducts")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMEV_PROD_CMEV");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("CommunicationEventProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMEV_PROD_PROD");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.CommunicationEventPrpTyp", b =>
                {
                    b.HasOne("Domain.CommunicationEventPrpTyp", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_PRP_TYP");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.CommunicationEventPurpose", b =>
                {
                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("CommunicationEventPurposes")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COM_EVNT_PRP_EVNT");

                    b.HasOne("Domain.CommunicationEventPrpTyp", "CommunicationEventPrpTyp")
                        .WithMany("CommunicationEventPurposes")
                        .HasForeignKey("CommunicationEventPrpTypId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COM_EVNT_PRP_TYPE");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("CommunicationEventPrpTyp");
                });

            modelBuilder.Entity("Domain.CommunicationEventReturn", b =>
                {
                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("CommunicationEventReturns")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMEV_RETURN_CMEV");

                    b.HasOne("Domain.ReturnHeader", "Return")
                        .WithMany("CommunicationEventReturns")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMEV_ORDER_RETURN");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Domain.CommunicationEventRole", b =>
                {
                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("CommunicationEventRoles")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COM_EVRL_CMEV");

                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("CommunicationEventRoles")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVRL_CMCH");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("CommunicationEventRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COM_EVRL_PTY");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("CommunicationEventRoles")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVRL_STTS");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("CommunicationEventRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COM_EVRL_PRLE");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("ContactMech");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.CommunicationEventType", b =>
                {
                    b.HasOne("Domain.ContactMechType", "ContactMechType")
                        .WithMany("CommunicationEventTypes")
                        .HasForeignKey("ContactMechTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_TYPE_CMT");

                    b.HasOne("Domain.CommunicationEventType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COM_EVNT_TYPE_PAR");

                    b.Navigation("ContactMechType");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.CommunicationEventWorkEff", b =>
                {
                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("CommunicationEventWorkEffs")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMEV_WEFF_CMEV");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("CommunicationEventWorkEffs")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMEV_WEFF_WEFF");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.ConfigOptionProductOption", b =>
                {
                    b.HasOne("Domain.ProductConfigProduct", "ProductConfigProduct")
                        .WithMany("ConfigOptionProductOptions")
                        .HasForeignKey("ConfigItemId", "ConfigOptionId", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OPTN_PROD");

                    b.HasOne("Domain.ProductConfigConfig", "ProductConfigConfig")
                        .WithMany("ConfigOptionProductOptions")
                        .HasForeignKey("ConfigId", "ConfigItemId", "ConfigOptionId", "SequenceNum")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OPTN_CONF");

                    b.Navigation("ProductConfigConfig");

                    b.Navigation("ProductConfigProduct");
                });

            modelBuilder.Entity("Domain.ContactList", b =>
                {
                    b.HasOne("Domain.ContactListType", "ContactListType")
                        .WithMany("ContactLists")
                        .HasForeignKey("ContactListTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LST_TYP");

                    b.HasOne("Domain.ContactMechType", "ContactMechType")
                        .WithMany("ContactLists")
                        .HasForeignKey("ContactMechTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LST_CMCHTP");

                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("ContactListCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LST_CBUL");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("ContactListLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LST_LMUL");

                    b.HasOne("Domain.MarketingCampaign", "MarketingCampaign")
                        .WithMany("ContactLists")
                        .HasForeignKey("MarketingCampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LST_MKCMPN");

                    b.HasOne("Domain.Party", "OwnerParty")
                        .WithMany("ContactLists")
                        .HasForeignKey("OwnerPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LST_OPTY");

                    b.Navigation("ContactListType");

                    b.Navigation("ContactMechType");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("MarketingCampaign");

                    b.Navigation("OwnerParty");
                });

            modelBuilder.Entity("Domain.ContactListCommStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("ContactListCommStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LST_CST_ST_UL");

                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("ContactListCommStatuses")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNCT_LST_CST_CE");

                    b.HasOne("Domain.ContactList", "ContactList")
                        .WithMany("ContactListCommStatuses")
                        .HasForeignKey("ContactListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNCT_LST_CST_CL");

                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("ContactListCommStatuses")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNCT_LST_CST_CM");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("ContactListCommStatuses")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LST_CST_PT");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("ContactListCommStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LST_CST_ST");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("ContactList");

                    b.Navigation("ContactMech");

                    b.Navigation("Party");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ContactListParty", b =>
                {
                    b.HasOne("Domain.ContactList", "ContactList")
                        .WithMany("ContactListParties")
                        .HasForeignKey("ContactListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNCT_LSTPTY_CLST");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("ContactListParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNCT_LSTPTY_PTY");

                    b.HasOne("Domain.ContactMech", "PreferredContactMech")
                        .WithMany("ContactListParties")
                        .HasForeignKey("PreferredContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LSTPTY_PCM");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("ContactListParties")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNCT_LSTPTY_STS");

                    b.Navigation("ContactList");

                    b.Navigation("Party");

                    b.Navigation("PreferredContactMech");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ContactListPartyStatus", b =>
                {
                    b.HasOne("Domain.ContactListParty", "ContactListParty")
                        .WithMany("ContactListPartyStatuses")
                        .HasForeignKey("ContactListId", "PartyId", "FromDate")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CTLSTPTST_CLP");

                    b.Navigation("ContactListParty");
                });

            modelBuilder.Entity("Domain.ContactMech", b =>
                {
                    b.HasOne("Domain.ContactMechType", "ContactMechType")
                        .WithMany("ContactMeches")
                        .HasForeignKey("ContactMechTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONT_MECH_TYPE");

                    b.Navigation("ContactMechType");
                });

            modelBuilder.Entity("Domain.ContactMechAttribute", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("ContactMechAttributes")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONT_MECH_ATTR");

                    b.Navigation("ContactMech");
                });

            modelBuilder.Entity("Domain.ContactMechLink", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMechIdFromNavigation")
                        .WithMany("ContactMechLinkContactMechIdFromNavigations")
                        .HasForeignKey("ContactMechIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONT_MECH_FCMECH");

                    b.HasOne("Domain.ContactMech", "ContactMechIdToNavigation")
                        .WithMany("ContactMechLinkContactMechIdToNavigations")
                        .HasForeignKey("ContactMechIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONT_MECH_TCMECH");

                    b.Navigation("ContactMechIdFromNavigation");

                    b.Navigation("ContactMechIdToNavigation");
                });

            modelBuilder.Entity("Domain.ContactMechType", b =>
                {
                    b.HasOne("Domain.ContactMechType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONT_MECH_TYP_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ContactMechTypeAttr", b =>
                {
                    b.HasOne("Domain.ContactMechType", "ContactMechType")
                        .WithMany("ContactMechTypeAttrs")
                        .HasForeignKey("ContactMechTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONT_MECH_TYP_ATR");

                    b.Navigation("ContactMechType");
                });

            modelBuilder.Entity("Domain.ContactMechTypePurpose", b =>
                {
                    b.HasOne("Domain.ContactMechPurposeType", "ContactMechPurposeType")
                        .WithMany("ContactMechTypePurposes")
                        .HasForeignKey("ContactMechPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONT_MECH_TP_PRPTP");

                    b.HasOne("Domain.ContactMechType", "ContactMechType")
                        .WithMany("ContactMechTypePurposes")
                        .HasForeignKey("ContactMechTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONT_MECH_TP_TYPE");

                    b.Navigation("ContactMechPurposeType");

                    b.Navigation("ContactMechType");
                });

            modelBuilder.Entity("Domain.Container", b =>
                {
                    b.HasOne("Domain.ContainerType", "ContainerType")
                        .WithMany("Containers")
                        .HasForeignKey("ContainerTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTAINER_CTTYP");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("Containers")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTAINER_FACILITY");

                    b.Navigation("ContainerType");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.ContainerGeoPoint", b =>
                {
                    b.HasOne("Domain.Container", "Container")
                        .WithMany("ContainerGeoPoints")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTNRGEOPT_CONTNR");

                    b.HasOne("Domain.GeoPoint", "GeoPoint")
                        .WithMany("ContainerGeoPoints")
                        .HasForeignKey("GeoPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTNRGEOPT_GEOPT");

                    b.Navigation("Container");

                    b.Navigation("GeoPoint");
                });

            modelBuilder.Entity("Domain.Content", b =>
                {
                    b.HasOne("Domain.CharacterSet", "CharacterSet")
                        .WithMany("Contents")
                        .HasForeignKey("CharacterSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_CHST");

                    b.HasOne("Domain.ContentType", "ContentType")
                        .WithMany("Contents")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_TO_TYPE");

                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("ContentCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_CB_ULGN");

                    b.HasOne("Domain.CustomMethod", "CustomMethod")
                        .WithMany("Contents")
                        .HasForeignKey("CustomMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_CUSTMET");

                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithMany("ContentDataResources")
                        .HasForeignKey("DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_TO_DATA");

                    b.HasOne("Domain.DataSource", "DataSource")
                        .WithMany("Contents")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_DTSRC");

                    b.HasOne("Domain.Content", "DecoratorContent")
                        .WithMany("InverseDecoratorContent")
                        .HasForeignKey("DecoratorContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_DCNTNT");

                    b.HasOne("Domain.Content", "InstanceOfContent")
                        .WithMany("InverseInstanceOfContent")
                        .HasForeignKey("InstanceOfContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_IOFCNT");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("ContentLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_LMB_ULGN");

                    b.HasOne("Domain.Content", "OwnerContent")
                        .WithMany("InverseOwnerContent")
                        .HasForeignKey("OwnerContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_PCNTNT");

                    b.HasOne("Domain.Enumeration", "PrivilegeEnum")
                        .WithMany("Contents")
                        .HasForeignKey("PrivilegeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_PRIVENM");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("Contents")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_STATUS");

                    b.HasOne("Domain.DataResource", "TemplateDataResource")
                        .WithMany("ContentTemplateDataResources")
                        .HasForeignKey("TemplateDataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENT_TO_TMPDATA");

                    b.Navigation("CharacterSet");

                    b.Navigation("ContentType");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("CustomMethod");

                    b.Navigation("DataResource");

                    b.Navigation("DataSource");

                    b.Navigation("DecoratorContent");

                    b.Navigation("InstanceOfContent");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("OwnerContent");

                    b.Navigation("PrivilegeEnum");

                    b.Navigation("Status");

                    b.Navigation("TemplateDataResource");
                });

            modelBuilder.Entity("Domain.ContentApproval", b =>
                {
                    b.HasOne("Domain.StatusItem", "ApprovalStatus")
                        .WithMany("ContentApprovals")
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNTNTAPPR_APSI");

                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ContentApprovals")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNTNTAPPR_CNT");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("ContentApprovals")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNTNTAPPR_PTY");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("ContentApprovals")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNTNTAPPR_RLTP");

                    b.Navigation("ApprovalStatus");

                    b.Navigation("Content");

                    b.Navigation("Party");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("Domain.ContentAssoc", b =>
                {
                    b.HasOne("Domain.ContentAssocPredicate", "ContentAssocPredicate")
                        .WithMany("ContentAssocs")
                        .HasForeignKey("ContentAssocPredicateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENTASSC_PRED");

                    b.HasOne("Domain.ContentAssocType", "ContentAssocType")
                        .WithMany("ContentAssocs")
                        .HasForeignKey("ContentAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENTASSC_TYP");

                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ContentAssocContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENTASSC_FROM");

                    b.HasOne("Domain.Content", "ContentIdToNavigation")
                        .WithMany("ContentAssocContentIdToNavigations")
                        .HasForeignKey("ContentIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENTASSC_TO");

                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("ContentAssocCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENTASSC_CBUSR");

                    b.HasOne("Domain.DataSource", "DataSource")
                        .WithMany("ContentAssocs")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENTASSC_DTSRC");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("ContentAssocLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENTASSC_LMBUR");

                    b.Navigation("Content");

                    b.Navigation("ContentAssocPredicate");

                    b.Navigation("ContentAssocType");

                    b.Navigation("ContentIdToNavigation");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("DataSource");

                    b.Navigation("LastModifiedByUserLoginNavigation");
                });

            modelBuilder.Entity("Domain.ContentAttribute", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ContentAttributes")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENT_ATTR");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.ContentKeyword", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ContentKeywords")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNT_KWD_CNT");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.ContentMetaDatum", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ContentMetaData")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENTMD_CNTNT");

                    b.HasOne("Domain.DataSource", "DataSource")
                        .WithMany("ContentMetaData")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CONTENTMD_DTSRC");

                    b.HasOne("Domain.MetaDataPredicate", "MetaDataPredicate")
                        .WithMany("ContentMetaData")
                        .HasForeignKey("MetaDataPredicateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENTMD_DMDPRD");

                    b.Navigation("Content");

                    b.Navigation("DataSource");

                    b.Navigation("MetaDataPredicate");
                });

            modelBuilder.Entity("Domain.ContentPurpose", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ContentPurposes")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENT_PRP");

                    b.HasOne("Domain.ContentPurposeType", "ContentPurposeType")
                        .WithMany("ContentPurposes")
                        .HasForeignKey("ContentPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENT_PRP_TYPE");

                    b.Navigation("Content");

                    b.Navigation("ContentPurposeType");
                });

            modelBuilder.Entity("Domain.ContentPurposeOperation", b =>
                {
                    b.HasOne("Domain.ContentOperation", "ContentOperation")
                        .WithMany("ContentPurposeOperations")
                        .HasForeignKey("ContentOperationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENT_PRO_OPER");

                    b.HasOne("Domain.ContentPurposeType", "ContentPurposeType")
                        .WithMany("ContentPurposeOperations")
                        .HasForeignKey("ContentPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENT_PRO_TYPE");

                    b.HasOne("Domain.Enumeration", "PrivilegeEnum")
                        .WithMany("ContentPurposeOperations")
                        .HasForeignKey("PrivilegeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENT_PRO_PEI");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("ContentPurposeOperations")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENT_PRO_RLT");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("ContentPurposeOperations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENT_PRO_STI");

                    b.Navigation("ContentOperation");

                    b.Navigation("ContentPurposeType");

                    b.Navigation("PrivilegeEnum");

                    b.Navigation("RoleType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ContentRevision", b =>
                {
                    b.HasOne("Domain.Party", "CommittedByParty")
                        .WithMany("ContentRevisions")
                        .HasForeignKey("CommittedByPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNTNTREV_CBPTY");

                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ContentRevisions")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNTNTREV_CNT");

                    b.Navigation("CommittedByParty");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.ContentRevisionItem", b =>
                {
                    b.HasOne("Domain.DataResource", "NewDataResource")
                        .WithMany("ContentRevisionItemNewDataResources")
                        .HasForeignKey("NewDataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNTNTREVIT_NEWDR");

                    b.HasOne("Domain.DataResource", "OldDataResource")
                        .WithMany("ContentRevisionItemOldDataResources")
                        .HasForeignKey("OldDataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNTNTREVIT_OLDDR");

                    b.HasOne("Domain.ContentRevision", "Content")
                        .WithMany("ContentRevisionItems")
                        .HasForeignKey("ContentId", "ContentRevisionSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNTNTREVIT_CNTREV");

                    b.Navigation("Content");

                    b.Navigation("NewDataResource");

                    b.Navigation("OldDataResource");
                });

            modelBuilder.Entity("Domain.ContentRole", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ContentRoles")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNTNT_RL_CNTNT");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("ContentRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNTNT_RL_PTRL");

                    b.Navigation("Content");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.ContentSearchConstraint", b =>
                {
                    b.HasOne("Domain.ContentSearchResult", "ContentSearchResult")
                        .WithMany("ContentSearchConstraints")
                        .HasForeignKey("ContentSearchResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNT_SCHRSI_RES");

                    b.Navigation("ContentSearchResult");
                });

            modelBuilder.Entity("Domain.ContentType", b =>
                {
                    b.HasOne("Domain.ContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNTNT_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ContentTypeAttr", b =>
                {
                    b.HasOne("Domain.ContentType", "ContentType")
                        .WithMany("ContentTypeAttrs")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CONTENT_TPAT_TYP");

                    b.Navigation("ContentType");
                });

            modelBuilder.Entity("Domain.CostComponent", b =>
                {
                    b.HasOne("Domain.CostComponentCalc", "CostComponentCalc")
                        .WithMany("CostComponents")
                        .HasForeignKey("CostComponentCalcId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COMP_CALC");

                    b.HasOne("Domain.CostComponentType", "CostComponentType")
                        .WithMany("CostComponents")
                        .HasForeignKey("CostComponentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COMP_TYPE");

                    b.HasOne("Domain.Uom", "CostUom")
                        .WithMany("CostComponents")
                        .HasForeignKey("CostUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COMP_CUOM");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("CostComponents")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COMP_FXADSST");

                    b.HasOne("Domain.Geo", "Geo")
                        .WithMany("CostComponents")
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COMP_GEO");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("CostComponents")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COMP_PARTY");

                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("CostComponents")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COMP_PRODFEAT");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("CostComponents")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COMP_PRODUCT");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("CostComponents")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COMP_WEFF");

                    b.Navigation("CostComponentCalc");

                    b.Navigation("CostComponentType");

                    b.Navigation("CostUom");

                    b.Navigation("FixedAsset");

                    b.Navigation("Geo");

                    b.Navigation("Party");

                    b.Navigation("Product");

                    b.Navigation("ProductFeature");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.CostComponentAttribute", b =>
                {
                    b.HasOne("Domain.CostComponent", "CostComponent")
                        .WithMany("CostComponentAttributes")
                        .HasForeignKey("CostComponentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COST_COMP_ATTR");

                    b.Navigation("CostComponent");
                });

            modelBuilder.Entity("Domain.CostComponentCalc", b =>
                {
                    b.HasOne("Domain.CustomMethod", "CostCustomMethod")
                        .WithMany("CostComponentCalcs")
                        .HasForeignKey("CostCustomMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COM_CMET");

                    b.HasOne("Domain.GlAccountType", "CostGlAccountType")
                        .WithMany("CostComponentCalcCostGlAccountTypes")
                        .HasForeignKey("CostGlAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COM_CGLAT");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("CostComponentCalcs")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COM_CUOM");

                    b.HasOne("Domain.GlAccountType", "OffsettingGlAccountType")
                        .WithMany("CostComponentCalcOffsettingGlAccountTypes")
                        .HasForeignKey("OffsettingGlAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COM_OGLAT");

                    b.Navigation("CostCustomMethod");

                    b.Navigation("CostGlAccountType");

                    b.Navigation("CurrencyUom");

                    b.Navigation("OffsettingGlAccountType");
                });

            modelBuilder.Entity("Domain.CostComponentType", b =>
                {
                    b.HasOne("Domain.CostComponentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("COST_COMP_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.CostComponentTypeAttr", b =>
                {
                    b.HasOne("Domain.CostComponentType", "CostComponentType")
                        .WithMany("CostComponentTypeAttrs")
                        .HasForeignKey("CostComponentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COST_COMP_TATTR");

                    b.Navigation("CostComponentType");
                });

            modelBuilder.Entity("Domain.CountryAddressFormat", b =>
                {
                    b.HasOne("Domain.GeoAssocType", "GeoAssocType")
                        .WithMany("CountryAddressFormats")
                        .HasForeignKey("GeoAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CNY_ADR_GEO_TYPE");

                    b.HasOne("Domain.Geo", "Geo")
                        .WithOne("CountryAddressFormat")
                        .HasForeignKey("Domain.CountryAddressFormat", "GeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNY_ADR_GEO");

                    b.Navigation("Geo");

                    b.Navigation("GeoAssocType");
                });

            modelBuilder.Entity("Domain.CountryCapital", b =>
                {
                    b.HasOne("Domain.CountryCode", "CountryCodeNavigation")
                        .WithOne("CountryCapital")
                        .HasForeignKey("Domain.CountryCapital", "CountryCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNTRY_CAP_TO_CODE");

                    b.Navigation("CountryCodeNavigation");
                });

            modelBuilder.Entity("Domain.CountryTeleCode", b =>
                {
                    b.HasOne("Domain.CountryCode", "CountryCodeNavigation")
                        .WithOne("CountryTeleCode")
                        .HasForeignKey("Domain.CountryTeleCode", "CountryCode")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNTRY_TELE_TO_CODE");

                    b.Navigation("CountryCodeNavigation");
                });

            modelBuilder.Entity("Domain.CreditCard", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("CreditCards")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CREDCARD_CMECH");

                    b.HasOne("Domain.PostalAddress", "ContactMechNavigation")
                        .WithMany("CreditCards")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CREDCARD_PADDR");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithOne("CreditCard")
                        .HasForeignKey("Domain.CreditCard", "PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CREDCARD_PMNTMETH");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechNavigation");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.CustRequest", b =>
                {
                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("CustRequestCurrencyUoms")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_CUOM");

                    b.HasOne("Domain.CustRequestCategory", "CustRequestCategory")
                        .WithMany("CustRequests")
                        .HasForeignKey("CustRequestCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_CAT");

                    b.HasOne("Domain.CustRequestType", "CustRequestType")
                        .WithMany("CustRequests")
                        .HasForeignKey("CustRequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_TYPE");

                    b.HasOne("Domain.Party", "FromParty")
                        .WithMany("CustRequests")
                        .HasForeignKey("FromPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_FRMPTY");

                    b.HasOne("Domain.ContactMech", "FulfillContactMech")
                        .WithMany("CustRequests")
                        .HasForeignKey("FulfillContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_FULCM");

                    b.HasOne("Domain.Uom", "MaximumAmountUom")
                        .WithMany("CustRequestMaximumAmountUoms")
                        .HasForeignKey("MaximumAmountUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_AUOM");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("CustRequests")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_PRDS");

                    b.HasOne("Domain.Enumeration", "SalesChannelEnum")
                        .WithMany("CustRequests")
                        .HasForeignKey("SalesChannelEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_CHANNEL");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("CustRequests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_STATUS");

                    b.Navigation("CurrencyUom");

                    b.Navigation("CustRequestCategory");

                    b.Navigation("CustRequestType");

                    b.Navigation("FromParty");

                    b.Navigation("FulfillContactMech");

                    b.Navigation("MaximumAmountUom");

                    b.Navigation("ProductStore");

                    b.Navigation("SalesChannelEnum");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.CustRequestAttribute", b =>
                {
                    b.HasOne("Domain.CustRequest", "CustRequest")
                        .WithMany("CustRequestAttributes")
                        .HasForeignKey("CustRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CUST_REQ_ATTR");

                    b.Navigation("CustRequest");
                });

            modelBuilder.Entity("Domain.CustRequestCategory", b =>
                {
                    b.HasOne("Domain.CustRequestType", "CustRequestType")
                        .WithMany("CustRequestCategories")
                        .HasForeignKey("CustRequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_RQCT_TYPE");

                    b.Navigation("CustRequestType");
                });

            modelBuilder.Entity("Domain.CustRequestCommEvent", b =>
                {
                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("CustRequestCommEvents")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CUSTREQ_CEV_CEV");

                    b.HasOne("Domain.CustRequest", "CustRequest")
                        .WithMany("CustRequestCommEvents")
                        .HasForeignKey("CustRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CUSTREQ_CEV_CRQ");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("CustRequest");
                });

            modelBuilder.Entity("Domain.CustRequestContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("CustRequestContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CUSTREQ_CNT_CNT");

                    b.HasOne("Domain.CustRequest", "CustRequest")
                        .WithMany("CustRequestContents")
                        .HasForeignKey("CustRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CUSTREQ_CNT_CUSTRQ");

                    b.Navigation("Content");

                    b.Navigation("CustRequest");
                });

            modelBuilder.Entity("Domain.CustRequestItem", b =>
                {
                    b.HasOne("Domain.CustRequest", "CustRequest")
                        .WithMany("CustRequestItems")
                        .HasForeignKey("CustRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CUST_REQITM_CREQ");

                    b.HasOne("Domain.CustRequestResolution", "CustRequestResolution")
                        .WithMany("CustRequestItems")
                        .HasForeignKey("CustRequestResolutionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQITM_RES");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("CustRequestItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQITM_PRD");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("CustRequestItems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQITM_STTS");

                    b.Navigation("CustRequest");

                    b.Navigation("CustRequestResolution");

                    b.Navigation("Product");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.CustRequestItemNote", b =>
                {
                    b.HasOne("Domain.NoteDatum", "Note")
                        .WithMany("CustRequestItemNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CUST_REQ_NOTE");

                    b.HasOne("Domain.CustRequestItem", "CustRequestI")
                        .WithMany("CustRequestItemNotes")
                        .HasForeignKey("CustRequestId", "CustRequestItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CUST_REQ_ITNT");

                    b.Navigation("CustRequestI");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Domain.CustRequestItemWorkEffort", b =>
                {
                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("CustRequestItemWorkEfforts")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CUST_REQ_WEFF");

                    b.HasOne("Domain.CustRequestItem", "CustRequestI")
                        .WithMany("CustRequestItemWorkEfforts")
                        .HasForeignKey("CustRequestId", "CustRequestItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WORK_REQFL_CSTRQ");

                    b.Navigation("CustRequestI");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.CustRequestNote", b =>
                {
                    b.HasOne("Domain.CustRequest", "CustRequest")
                        .WithMany("CustRequestNotes")
                        .HasForeignKey("CustRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CRQ_CR");

                    b.HasOne("Domain.NoteDatum", "Note")
                        .WithMany("CustRequestNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CRQ_NOTE");

                    b.Navigation("CustRequest");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Domain.CustRequestParty", b =>
                {
                    b.HasOne("Domain.CustRequest", "CustRequest")
                        .WithMany("CustRequestParties")
                        .HasForeignKey("CustRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CREQ_RL_CRQST");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("CustRequestParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CREQ_RL_PARTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("CustRequestParties")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CREQ_RL_PROLE");

                    b.Navigation("CustRequest");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.CustRequestResolution", b =>
                {
                    b.HasOne("Domain.CustRequestType", "CustRequestType")
                        .WithMany("CustRequestResolutions")
                        .HasForeignKey("CustRequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_RQRS_TYPE");

                    b.Navigation("CustRequestType");
                });

            modelBuilder.Entity("Domain.CustRequestStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("CustRequestStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_RQSTTS_USRLGN");

                    b.HasOne("Domain.CustRequest", "CustRequest")
                        .WithMany("CustRequestStatuses")
                        .HasForeignKey("CustRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_STRQ");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("CustRequestStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQST_STTS");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("CustRequest");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.CustRequestType", b =>
                {
                    b.HasOne("Domain.CustRequestType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_REQ_TYPE_PAR");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("CustRequestTypes")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CUST_PTY_PARTY");

                    b.Navigation("ParentType");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.CustRequestTypeAttr", b =>
                {
                    b.HasOne("Domain.CustRequestType", "CustRequestType")
                        .WithMany("CustRequestTypeAttrs")
                        .HasForeignKey("CustRequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CUST_REQ_TYPE_ATTR");

                    b.Navigation("CustRequestType");
                });

            modelBuilder.Entity("Domain.CustRequestWorkEffort", b =>
                {
                    b.HasOne("Domain.CustRequest", "CustRequest")
                        .WithMany("CustRequestWorkEfforts")
                        .HasForeignKey("CustRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CSTREQ_WF_CREQ");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("CustRequestWorkEfforts")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CSTREQ_WF_WEFF");

                    b.Navigation("CustRequest");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.CustomMethod", b =>
                {
                    b.HasOne("Domain.CustomMethodType", "CustomMethodType")
                        .WithMany("CustomMethods")
                        .HasForeignKey("CustomMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CME_TO_TYPE");

                    b.Navigation("CustomMethodType");
                });

            modelBuilder.Entity("Domain.CustomMethodType", b =>
                {
                    b.HasOne("Domain.CustomMethodType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CME_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.CustomScreen", b =>
                {
                    b.HasOne("Domain.CustomScreenType", "CustomScreenType")
                        .WithMany("CustomScreens")
                        .HasForeignKey("CustomScreenTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CSCR_TO_TYPE");

                    b.Navigation("CustomScreenType");
                });

            modelBuilder.Entity("Domain.CustomTimePeriod", b =>
                {
                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("CustomTimePeriods")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORG_PRD_PARTY");

                    b.HasOne("Domain.CustomTimePeriod", "ParentPeriod")
                        .WithMany("InverseParentPeriod")
                        .HasForeignKey("ParentPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORG_PRD_PARPER");

                    b.HasOne("Domain.PeriodType", "PeriodType")
                        .WithMany("CustomTimePeriods")
                        .HasForeignKey("PeriodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORG_PRD_PERTYP");

                    b.Navigation("OrganizationParty");

                    b.Navigation("ParentPeriod");

                    b.Navigation("PeriodType");
                });

            modelBuilder.Entity("Domain.DataCategory", b =>
                {
                    b.HasOne("Domain.DataCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_CAT_PARENT");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.DataResource", b =>
                {
                    b.HasOne("Domain.CharacterSet", "CharacterSet")
                        .WithMany("DataResources")
                        .HasForeignKey("CharacterSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_REC_CHST");

                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("DataResourceCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_REC_CB_ULGN");

                    b.HasOne("Domain.DataCategory", "DataCategory")
                        .WithMany("DataResources")
                        .HasForeignKey("DataCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_REC_TO_CAT");

                    b.HasOne("Domain.DataResourceType", "DataResourceType")
                        .WithMany("DataResources")
                        .HasForeignKey("DataResourceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_REC_TO_TYPE");

                    b.HasOne("Domain.DataSource", "DataSource")
                        .WithMany("DataResources")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_REC_DTSRC");

                    b.HasOne("Domain.DataTemplateType", "DataTemplateType")
                        .WithMany("DataResources")
                        .HasForeignKey("DataTemplateTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_REC_TO_TTP");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("DataResourceLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_REC_LMB_ULGN");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("DataResources")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DTRSRC_STATUS");

                    b.HasOne("Domain.Survey", "Survey")
                        .WithMany("DataResources")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_REC_SURVEY");

                    b.HasOne("Domain.SurveyResponse", "SurveyResponse")
                        .WithMany("DataResources")
                        .HasForeignKey("SurveyResponseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_REC_SVRSP");

                    b.Navigation("CharacterSet");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("DataCategory");

                    b.Navigation("DataResourceType");

                    b.Navigation("DataSource");

                    b.Navigation("DataTemplateType");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("Status");

                    b.Navigation("Survey");

                    b.Navigation("SurveyResponse");
                });

            modelBuilder.Entity("Domain.DataResourceAttribute", b =>
                {
                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithMany("DataResourceAttributes")
                        .HasForeignKey("DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_REC_ATTR");

                    b.Navigation("DataResource");
                });

            modelBuilder.Entity("Domain.DataResourceMetaDatum", b =>
                {
                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithMany("DataResourceMetaData")
                        .HasForeignKey("DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_MD_DATREC");

                    b.HasOne("Domain.DataSource", "DataSource")
                        .WithMany("DataResourceMetaData")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_MD_DTSRC");

                    b.HasOne("Domain.MetaDataPredicate", "MetaDataPredicate")
                        .WithMany("DataResourceMetaData")
                        .HasForeignKey("MetaDataPredicateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_MD_DMDPRD");

                    b.Navigation("DataResource");

                    b.Navigation("DataSource");

                    b.Navigation("MetaDataPredicate");
                });

            modelBuilder.Entity("Domain.DataResourcePurpose", b =>
                {
                    b.HasOne("Domain.ContentPurposeType", "ContentPurposeType")
                        .WithMany("DataResourcePurposes")
                        .HasForeignKey("ContentPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_REC_PRP_TYPE");

                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithMany("DataResourcePurposes")
                        .HasForeignKey("DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_REC_PRP");

                    b.Navigation("ContentPurposeType");

                    b.Navigation("DataResource");
                });

            modelBuilder.Entity("Domain.DataResourceRole", b =>
                {
                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithMany("DataResourceRoles")
                        .HasForeignKey("DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATARECRL_DATREC");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("DataResourceRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATARECRL_PTRL");

                    b.Navigation("DataResource");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.DataResourceType", b =>
                {
                    b.HasOne("Domain.DataResourceType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_OBTYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.DataResourceTypeAttr", b =>
                {
                    b.HasOne("Domain.DataResourceType", "DataResourceType")
                        .WithMany("DataResourceTypeAttrs")
                        .HasForeignKey("DataResourceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_OBTYPE_ATTR");

                    b.Navigation("DataResourceType");
                });

            modelBuilder.Entity("Domain.DataSource", b =>
                {
                    b.HasOne("Domain.DataSourceType", "DataSourceType")
                        .WithMany("DataSources")
                        .HasForeignKey("DataSourceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DATA_SRC_TYP");

                    b.Navigation("DataSourceType");
                });

            modelBuilder.Entity("Domain.Deduction", b =>
                {
                    b.HasOne("Domain.DeductionType", "DeductionType")
                        .WithMany("Deductions")
                        .HasForeignKey("DeductionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DEDCTN_DEDTYP");

                    b.HasOne("Domain.Payment", "Payment")
                        .WithMany("Deductions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DEDCTN_PMNT");

                    b.Navigation("DeductionType");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.DeductionType", b =>
                {
                    b.HasOne("Domain.DeductionType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DEDUCT_TYP_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.Deliverable", b =>
                {
                    b.HasOne("Domain.DeliverableType", "DeliverableType")
                        .WithMany("Deliverables")
                        .HasForeignKey("DeliverableTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DELIVERABLE_DLTYP");

                    b.Navigation("DeliverableType");
                });

            modelBuilder.Entity("Domain.Delivery", b =>
                {
                    b.HasOne("Domain.Facility", "DestFacility")
                        .WithMany("DeliveryDestFacilities")
                        .HasForeignKey("DestFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DELIV_DFAC");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("Deliveries")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DELIV_FXAS");

                    b.HasOne("Domain.Facility", "OriginFacility")
                        .WithMany("DeliveryOriginFacilities")
                        .HasForeignKey("OriginFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DELIV_OFAC");

                    b.Navigation("DestFacility");

                    b.Navigation("FixedAsset");

                    b.Navigation("OriginFacility");
                });

            modelBuilder.Entity("Domain.DesiredFeature", b =>
                {
                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("DesiredFeatures")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DES_FEAT_PFEAT");

                    b.HasOne("Domain.Requirement", "Requirement")
                        .WithMany("DesiredFeatures")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DES_FEAT_REQ");

                    b.Navigation("ProductFeature");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Domain.Document", b =>
                {
                    b.HasOne("Domain.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DOCUMENT_TO_TYPE");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Domain.DocumentAttribute", b =>
                {
                    b.HasOne("Domain.Document", "Document")
                        .WithMany("DocumentAttributes")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DOCUMENT_ATTR");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Domain.DocumentType", b =>
                {
                    b.HasOne("Domain.DocumentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("DOC_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.DocumentTypeAttr", b =>
                {
                    b.HasOne("Domain.DocumentType", "DocumentType")
                        .WithMany("DocumentTypeAttrs")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DOC_TYPE_ATTR");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("Domain.EftAccount", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("EftAccounts")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EFTACCT_CMECH");

                    b.HasOne("Domain.PostalAddress", "ContactMechNavigation")
                        .WithMany("EftAccounts")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EFTACCT_PADDR");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithOne("EftAccount")
                        .HasForeignKey("Domain.EftAccount", "PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EFTACCT_PMETH");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechNavigation");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.ElectronicText", b =>
                {
                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithOne("ElectronicText")
                        .HasForeignKey("Domain.ElectronicText", "DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_REC_TEXT");

                    b.Navigation("DataResource");
                });

            modelBuilder.Entity("Domain.EmailTemplateSetting", b =>
                {
                    b.HasOne("Domain.Enumeration", "EmailTypeNavigation")
                        .WithMany("EmailTemplateSettings")
                        .HasForeignKey("EmailType")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMAILSET_ENUM");

                    b.Navigation("EmailTypeNavigation");
                });

            modelBuilder.Entity("Domain.EmplLeave", b =>
                {
                    b.HasOne("Domain.Party", "ApproverParty")
                        .WithMany("EmplLeaveApproverParties")
                        .HasForeignKey("ApproverPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPL_LEAVE_APPR");

                    b.HasOne("Domain.EmplLeaveReasonType", "EmplLeaveReasonType")
                        .WithMany("EmplLeaves")
                        .HasForeignKey("EmplLeaveReasonTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMP_LEAV_REAS_ELTP");

                    b.HasOne("Domain.StatusItem", "LeaveStatusNavigation")
                        .WithMany("EmplLeaves")
                        .HasForeignKey("LeaveStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPL_LEAVE_STS");

                    b.HasOne("Domain.EmplLeaveType", "LeaveType")
                        .WithMany("EmplLeaves")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_LEAVE_ELETP");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("EmplLeaveParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_LEAVE_PRTY");

                    b.Navigation("ApproverParty");

                    b.Navigation("EmplLeaveReasonType");

                    b.Navigation("LeaveStatusNavigation");

                    b.Navigation("LeaveType");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.EmplLeaveReasonType", b =>
                {
                    b.HasOne("Domain.EmplLeaveReasonType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPL_REASON_TPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.EmplLeaveType", b =>
                {
                    b.HasOne("Domain.EmplLeaveType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPL_LEAVE_TPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.EmplPosition", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("EmplPositions")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPL_POS_PRTY");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("EmplPositions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPL_POS_STTS");

                    b.Navigation("Party");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.EmplPositionClassType", b =>
                {
                    b.HasOne("Domain.EmplPositionClassType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPL_CLS_TYP_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.EmplPositionFulfillment", b =>
                {
                    b.HasOne("Domain.EmplPosition", "EmplPosition")
                        .WithMany("EmplPositionFulfillments")
                        .HasForeignKey("EmplPositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_PSFLMT_EMPS");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("EmplPositionFulfillments")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_PSFLMT_PRTY");

                    b.Navigation("EmplPosition");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.EmplPositionReportingStruct", b =>
                {
                    b.HasOne("Domain.EmplPosition", "EmplPositionIdManagedByNavigation")
                        .WithMany("EmplPositionReportingStructEmplPositionIdManagedByNavigations")
                        .HasForeignKey("EmplPositionIdManagedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_PSRPS_EMPSM");

                    b.HasOne("Domain.EmplPosition", "EmplPositionIdReportingToNavigation")
                        .WithMany("EmplPositionReportingStructEmplPositionIdReportingToNavigations")
                        .HasForeignKey("EmplPositionIdReportingTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_PSRPS_EMPSR");

                    b.Navigation("EmplPositionIdManagedByNavigation");

                    b.Navigation("EmplPositionIdReportingToNavigation");
                });

            modelBuilder.Entity("Domain.EmplPositionResponsibility", b =>
                {
                    b.HasOne("Domain.EmplPosition", "EmplPosition")
                        .WithMany("EmplPositionResponsibilities")
                        .HasForeignKey("EmplPositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_PSRTY_EMPS");

                    b.HasOne("Domain.ResponsibilityType", "ResponsibilityType")
                        .WithMany("EmplPositionResponsibilities")
                        .HasForeignKey("ResponsibilityTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_PSRTY_RYTP");

                    b.Navigation("EmplPosition");

                    b.Navigation("ResponsibilityType");
                });

            modelBuilder.Entity("Domain.EmplPositionType", b =>
                {
                    b.HasOne("Domain.EmplPositionType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPL_POSI_TYP_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.EmplPositionTypeClass", b =>
                {
                    b.HasOne("Domain.EmplPositionClassType", "EmplPositionClassType")
                        .WithMany("EmplPositionTypeClasses")
                        .HasForeignKey("EmplPositionClassTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_PSTPCS_EPCTP");

                    b.HasOne("Domain.EmplPositionType", "EmplPositionType")
                        .WithMany("EmplPositionTypeClasses")
                        .HasForeignKey("EmplPositionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_PSTPCS_EPTP");

                    b.Navigation("EmplPositionClassType");

                    b.Navigation("EmplPositionType");
                });

            modelBuilder.Entity("Domain.EmplPositionTypeRateNew", b =>
                {
                    b.HasOne("Domain.EmplPositionType", "EmplPositionType")
                        .WithMany("EmplPositionTypeRateNews")
                        .HasForeignKey("EmplPositionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPL_PTPRT_EPTP");

                    b.Navigation("EmplPositionType");
                });

            modelBuilder.Entity("Domain.Employment", b =>
                {
                    b.HasOne("Domain.Party", "PartyIdFromNavigation")
                        .WithMany("EmploymentPartyIdFromNavigations")
                        .HasForeignKey("PartyIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPLMNT_FPTY");

                    b.HasOne("Domain.Party", "PartyIdToNavigation")
                        .WithMany("EmploymentPartyIdToNavigations")
                        .HasForeignKey("PartyIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPLMNT_TPTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("EmploymentPartyRoles")
                        .HasForeignKey("PartyIdFrom", "RoleTypeIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPLMNT_FPTRL");

                    b.HasOne("Domain.PartyRole", "PartyRoleNavigation")
                        .WithMany("EmploymentPartyRoleNavigations")
                        .HasForeignKey("PartyIdTo", "RoleTypeIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EMPLMNT_TPTRL");

                    b.Navigation("PartyIdFromNavigation");

                    b.Navigation("PartyIdToNavigation");

                    b.Navigation("PartyRole");

                    b.Navigation("PartyRoleNavigation");
                });

            modelBuilder.Entity("Domain.EmploymentApp", b =>
                {
                    b.HasOne("Domain.Party", "ApproverParty")
                        .WithMany("EmploymentApps")
                        .HasForeignKey("ApproverPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPLMNT_APP_APER");

                    b.HasOne("Domain.JobRequisition", "JobRequisition")
                        .WithMany("EmploymentApps")
                        .HasForeignKey("JobRequisitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPLMNT_APP_JBRQ");

                    b.Navigation("ApproverParty");

                    b.Navigation("JobRequisition");
                });

            modelBuilder.Entity("Domain.EmploymentAppSourceType", b =>
                {
                    b.HasOne("Domain.EmploymentAppSourceType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EMPL_APP_SRC_TYP");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.EntityGroupEntry", b =>
                {
                    b.HasOne("Domain.EntityGroup", "EntityGroup")
                        .WithMany("EntityGroupEntries")
                        .HasForeignKey("EntityGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ENTGRP_GRP");

                    b.Navigation("EntityGroup");
                });

            modelBuilder.Entity("Domain.EntitySyncHistory", b =>
                {
                    b.HasOne("Domain.EntitySync", "EntitySync")
                        .WithMany("EntitySyncHistories")
                        .HasForeignKey("EntitySyncId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ENTSYNC_HSTSNC");

                    b.Navigation("EntitySync");
                });

            modelBuilder.Entity("Domain.EntitySyncInclude", b =>
                {
                    b.HasOne("Domain.EntitySync", "EntitySync")
                        .WithMany("EntitySyncIncludes")
                        .HasForeignKey("EntitySyncId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ENTSYNC_INCSNC");

                    b.Navigation("EntitySync");
                });

            modelBuilder.Entity("Domain.EntitySyncIncludeGroup", b =>
                {
                    b.HasOne("Domain.EntityGroup", "EntityGroup")
                        .WithMany("EntitySyncIncludeGroups")
                        .HasForeignKey("EntityGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ENTSNCGU_GRP");

                    b.HasOne("Domain.EntitySync", "EntitySync")
                        .WithMany("EntitySyncIncludeGroups")
                        .HasForeignKey("EntitySyncId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ENTSNCGU_SNC");

                    b.Navigation("EntityGroup");

                    b.Navigation("EntitySync");
                });

            modelBuilder.Entity("Domain.Enumeration", b =>
                {
                    b.HasOne("Domain.EnumerationType", "EnumType")
                        .WithMany("Enumerations")
                        .HasForeignKey("EnumTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ENUM_TO_TYPE");

                    b.Navigation("EnumType");
                });

            modelBuilder.Entity("Domain.EnumerationType", b =>
                {
                    b.HasOne("Domain.EnumerationType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ENUM_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.Facility", b =>
                {
                    b.HasOne("Domain.Uom", "DefaultDimensionUom")
                        .WithMany("FacilityDefaultDimensionUoms")
                        .HasForeignKey("DefaultDimensionUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FAC_DEF_DUOM");

                    b.HasOne("Domain.InventoryItemType", "DefaultInventoryItemType")
                        .WithMany("Facilities")
                        .HasForeignKey("DefaultInventoryItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FAC_INVITM_TYPE");

                    b.HasOne("Domain.Uom", "DefaultWeightUom")
                        .WithMany("FacilityDefaultWeightUoms")
                        .HasForeignKey("DefaultWeightUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FAC_DEF_WUOM");

                    b.HasOne("Domain.Uom", "FacilitySizeUom")
                        .WithMany("FacilityFacilitySizeUoms")
                        .HasForeignKey("FacilitySizeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_SUOM");

                    b.HasOne("Domain.FacilityType", "FacilityType")
                        .WithMany("Facilities")
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_FCTYP");

                    b.HasOne("Domain.GeoPoint", "GeoPoint")
                        .WithMany("Facilities")
                        .HasForeignKey("GeoPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_GEOPT");

                    b.HasOne("Domain.Party", "OwnerParty")
                        .WithMany("Facilities")
                        .HasForeignKey("OwnerPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_OWNER");

                    b.HasOne("Domain.Facility", "ParentFacility")
                        .WithMany("InverseParentFacility")
                        .HasForeignKey("ParentFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_PARENT");

                    b.HasOne("Domain.FacilityGroup", "PrimaryFacilityGroup")
                        .WithMany("Facilities")
                        .HasForeignKey("PrimaryFacilityGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_PGRP");

                    b.Navigation("DefaultDimensionUom");

                    b.Navigation("DefaultInventoryItemType");

                    b.Navigation("DefaultWeightUom");

                    b.Navigation("FacilitySizeUom");

                    b.Navigation("FacilityType");

                    b.Navigation("GeoPoint");

                    b.Navigation("OwnerParty");

                    b.Navigation("ParentFacility");

                    b.Navigation("PrimaryFacilityGroup");
                });

            modelBuilder.Entity("Domain.FacilityAttribute", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("FacilityAttributes")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_ATTR");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.FacilityCalendar", b =>
                {
                    b.HasOne("Domain.FacilityCalendarType", "FacilityCalendarType")
                        .WithMany("FacilityCalendars")
                        .HasForeignKey("FacilityCalendarTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_CAL_TYPE");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("FacilityCalendars")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_CAL_FAC");

                    b.Navigation("Facility");

                    b.Navigation("FacilityCalendarType");
                });

            modelBuilder.Entity("Domain.FacilityCarrierShipment", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("FacilityCarrierShipments")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_CSH_FAC");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("FacilityCarrierShipments")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_CSH_PTY");

                    b.HasOne("Domain.ShipmentMethodType", "ShipmentMethodType")
                        .WithMany("FacilityCarrierShipments")
                        .HasForeignKey("ShipmentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_CSH_STP");

                    b.HasOne("Domain.CarrierShipmentMethod", "CarrierShipmentMethod")
                        .WithMany("FacilityCarrierShipments")
                        .HasForeignKey("ShipmentMethodTypeId", "PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_CSH_CSM");

                    b.Navigation("CarrierShipmentMethod");

                    b.Navigation("Facility");

                    b.Navigation("Party");

                    b.Navigation("ShipmentMethodType");
                });

            modelBuilder.Entity("Domain.FacilityContactMech", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("FacilityContactMeches")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACIL_CMECH_CMECH");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("FacilityContactMeches")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACIL_CMECH_FACIL");

                    b.Navigation("ContactMech");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.FacilityContactMechPurpose", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("FacilityContactMechPurposes")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACIL_CMPRP_CMECH");

                    b.HasOne("Domain.ContactMechPurposeType", "ContactMechPurposeType")
                        .WithMany("FacilityContactMechPurposes")
                        .HasForeignKey("ContactMechPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACIL_CMPRP_TYPE");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("FacilityContactMechPurposes")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACIL_CMPRP_FACIL");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechPurposeType");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.FacilityContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("FacilityContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FAC_CNT_CNT");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("FacilityContents")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FAC_CNT_FAC");

                    b.Navigation("Content");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("Domain.FacilityGroup", b =>
                {
                    b.HasOne("Domain.FacilityGroupType", "FacilityGroupType")
                        .WithMany("FacilityGroups")
                        .HasForeignKey("FacilityGroupTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_GP_TYPE");

                    b.HasOne("Domain.FacilityGroup", "PrimaryParentGroup")
                        .WithMany("InversePrimaryParentGroup")
                        .HasForeignKey("PrimaryParentGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_GP_PGRP");

                    b.Navigation("FacilityGroupType");

                    b.Navigation("PrimaryParentGroup");
                });

            modelBuilder.Entity("Domain.FacilityGroupMember", b =>
                {
                    b.HasOne("Domain.FacilityGroup", "FacilityGroup")
                        .WithMany("FacilityGroupMembers")
                        .HasForeignKey("FacilityGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_MEM_FGRP");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("FacilityGroupMembers")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_MEM_FAC");

                    b.Navigation("Facility");

                    b.Navigation("FacilityGroup");
                });

            modelBuilder.Entity("Domain.FacilityGroupRole", b =>
                {
                    b.HasOne("Domain.FacilityGroup", "FacilityGroup")
                        .WithMany("FacilityGroupRoles")
                        .HasForeignKey("FacilityGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FGROUP_RLE_FGRP");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("FacilityGroupRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FGROUP_RLE_PTRLE");

                    b.Navigation("FacilityGroup");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.FacilityGroupRollup", b =>
                {
                    b.HasOne("Domain.FacilityGroup", "FacilityGroup")
                        .WithMany("FacilityGroupRollupFacilityGroups")
                        .HasForeignKey("FacilityGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FGRP_FRLP_CURRENT");

                    b.HasOne("Domain.FacilityGroup", "ParentFacilityGroup")
                        .WithMany("FacilityGroupRollupParentFacilityGroups")
                        .HasForeignKey("ParentFacilityGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FGRP_FRLP_PARENT");

                    b.Navigation("FacilityGroup");

                    b.Navigation("ParentFacilityGroup");
                });

            modelBuilder.Entity("Domain.FacilityLocation", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("FacilityLocations")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_LOC_FAC");

                    b.HasOne("Domain.GeoPoint", "GeoPoint")
                        .WithMany("FacilityLocations")
                        .HasForeignKey("GeoPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_LOC_GEOPT");

                    b.HasOne("Domain.Enumeration", "LocationTypeEnum")
                        .WithMany("FacilityLocations")
                        .HasForeignKey("LocationTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_LOC_TENM");

                    b.Navigation("Facility");

                    b.Navigation("GeoPoint");

                    b.Navigation("LocationTypeEnum");
                });

            modelBuilder.Entity("Domain.FacilityLocationGeoPoint", b =>
                {
                    b.HasOne("Domain.GeoPoint", "GeoPoint")
                        .WithMany("FacilityLocationGeoPoints")
                        .HasForeignKey("GeoPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACLOCGEOPT_GEOPT");

                    b.HasOne("Domain.FacilityLocation", "FacilityLocation")
                        .WithMany("FacilityLocationGeoPoints")
                        .HasForeignKey("FacilityId", "LocationSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACLOCGEOPT_FACLOC");

                    b.Navigation("FacilityLocation");

                    b.Navigation("GeoPoint");
                });

            modelBuilder.Entity("Domain.FacilityParty", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("FacilityParties")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_RLE_FACI");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("FacilityParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_RLE_PRT");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("FacilityParties")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_RLE_ROL");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("FacilityParties")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_PRTY_ROLE");

                    b.Navigation("Facility");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("Domain.FacilityType", b =>
                {
                    b.HasOne("Domain.FacilityType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FACILITY_TYPEPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.FacilityTypeAttr", b =>
                {
                    b.HasOne("Domain.FacilityType", "FacilityType")
                        .WithMany("FacilityTypeAttrs")
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FACILITY_TPAT_FT");

                    b.Navigation("FacilityType");
                });

            modelBuilder.Entity("Domain.FileExtension", b =>
                {
                    b.HasOne("Domain.MimeType", "MimeType")
                        .WithMany("FileExtensions")
                        .HasForeignKey("MimeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FILEEXT_MMTYP");

                    b.Navigation("MimeType");
                });

            modelBuilder.Entity("Domain.FinAccount", b =>
                {
                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("FinAccounts")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_CURUOM");

                    b.HasOne("Domain.FinAccountType", "FinAccountType")
                        .WithMany("FinAccounts")
                        .HasForeignKey("FinAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_TYPE");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("FinAccountOrganizationParties")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_ORGPTY");

                    b.HasOne("Domain.Party", "OwnerParty")
                        .WithMany("FinAccountOwnerParties")
                        .HasForeignKey("OwnerPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_OWNPTY");

                    b.HasOne("Domain.GlAccount", "PostToGlAccount")
                        .WithMany("FinAccounts")
                        .HasForeignKey("PostToGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_GLAC");

                    b.HasOne("Domain.PaymentMethod", "ReplenishPayment")
                        .WithMany("FinAccounts")
                        .HasForeignKey("ReplenishPaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_PAYMETH");

                    b.Navigation("CurrencyUom");

                    b.Navigation("FinAccountType");

                    b.Navigation("OrganizationParty");

                    b.Navigation("OwnerParty");

                    b.Navigation("PostToGlAccount");

                    b.Navigation("ReplenishPayment");
                });

            modelBuilder.Entity("Domain.FinAccountAttribute", b =>
                {
                    b.HasOne("Domain.FinAccount", "FinAccount")
                        .WithMany("FinAccountAttributes")
                        .HasForeignKey("FinAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FINACCT_ATTR");

                    b.Navigation("FinAccount");
                });

            modelBuilder.Entity("Domain.FinAccountAuth", b =>
                {
                    b.HasOne("Domain.FinAccount", "FinAccount")
                        .WithMany("FinAccountAuths")
                        .HasForeignKey("FinAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACT_AUTH_FINACT");

                    b.Navigation("FinAccount");
                });

            modelBuilder.Entity("Domain.FinAccountRole", b =>
                {
                    b.HasOne("Domain.FinAccount", "FinAccount")
                        .WithMany("FinAccountRoles")
                        .HasForeignKey("FinAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIN_ACT_RL_FNACT");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("FinAccountRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIN_ACT_RL_RTRL");

                    b.Navigation("FinAccount");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.FinAccountStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("FinAccountStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACT_STTS_USER");

                    b.HasOne("Domain.FinAccount", "FinAccount")
                        .WithMany("FinAccountStatuses")
                        .HasForeignKey("FinAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FINACT_STTS_FNA");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("FinAccountStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FINACT_STTS_STI");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("FinAccount");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.FinAccountTran", b =>
                {
                    b.HasOne("Domain.FinAccount", "FinAccount")
                        .WithMany("FinAccountTrans")
                        .HasForeignKey("FinAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIN_ACT_TX_FNACT");

                    b.HasOne("Domain.FinAccountTransType", "FinAccountTransType")
                        .WithMany("FinAccountTrans")
                        .HasForeignKey("FinAccountTransTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_TX_TYPE");

                    b.HasOne("Domain.GlReconciliation", "GlReconciliation")
                        .WithMany("FinAccountTrans")
                        .HasForeignKey("GlReconciliationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIN_ACT_TX_GLREC");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("FinAccountTranParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIN_ACT_TX_PARTY");

                    b.HasOne("Domain.Payment", "Payment")
                        .WithMany("FinAccountTrans")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIN_ACT_TX_PMT");

                    b.HasOne("Domain.Party", "PerformedByParty")
                        .WithMany("FinAccountTranPerformedByParties")
                        .HasForeignKey("PerformedByPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIN_ACT_TX_PBPTY");

                    b.HasOne("Domain.Enumeration", "ReasonEnum")
                        .WithMany("FinAccountTrans")
                        .HasForeignKey("ReasonEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIN_ACT_REAS_ENUM");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("FinAccountTrans")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIN_ACT_TX_STI");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("FinAccountTrans")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIN_ACT_TX_ODITM");

                    b.Navigation("FinAccount");

                    b.Navigation("FinAccountTransType");

                    b.Navigation("GlReconciliation");

                    b.Navigation("OrderI");

                    b.Navigation("Party");

                    b.Navigation("Payment");

                    b.Navigation("PerformedByParty");

                    b.Navigation("ReasonEnum");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.FinAccountTransAttribute", b =>
                {
                    b.HasOne("Domain.FinAccountTran", "FinAccountTrans")
                        .WithMany("FinAccountTransAttributes")
                        .HasForeignKey("FinAccountTransId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FINACCT_TX_ATTR");

                    b.Navigation("FinAccountTrans");
                });

            modelBuilder.Entity("Domain.FinAccountTransType", b =>
                {
                    b.HasOne("Domain.FinAccountTransType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_TX_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.FinAccountTransTypeAttr", b =>
                {
                    b.HasOne("Domain.FinAccountTransType", "FinAccountTransType")
                        .WithMany("FinAccountTransTypeAttrs")
                        .HasForeignKey("FinAccountTransTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FINACCT_TX_TYPATR");

                    b.Navigation("FinAccountTransType");
                });

            modelBuilder.Entity("Domain.FinAccountType", b =>
                {
                    b.HasOne("Domain.FinAccountType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_TYPE_PAR");

                    b.HasOne("Domain.Enumeration", "ReplenishEnum")
                        .WithMany("FinAccountTypes")
                        .HasForeignKey("ReplenishEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_TYPE_RENUM");

                    b.Navigation("ParentType");

                    b.Navigation("ReplenishEnum");
                });

            modelBuilder.Entity("Domain.FinAccountTypeAttr", b =>
                {
                    b.HasOne("Domain.FinAccountType", "FinAccountType")
                        .WithMany("FinAccountTypeAttrs")
                        .HasForeignKey("FinAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FINACCT_TYPE_ATTR");

                    b.Navigation("FinAccountType");
                });

            modelBuilder.Entity("Domain.FinAccountTypeGlAccount", b =>
                {
                    b.HasOne("Domain.FinAccountType", "FinAccountType")
                        .WithMany("FinAccountTypeGlAccounts")
                        .HasForeignKey("FinAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FINACCT_TGA_PMT");

                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("FinAccountTypeGlAccounts")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FINACCT_TGA_GLAC");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("FinAccountTypeGlAccounts")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FINACCT_TGA_OPTY");

                    b.Navigation("FinAccountType");

                    b.Navigation("GlAccount");

                    b.Navigation("OrganizationParty");
                });

            modelBuilder.Entity("Domain.FixedAsset", b =>
                {
                    b.HasOne("Domain.OrderHeader", "AcquireOrder")
                        .WithMany("FixedAssets")
                        .HasForeignKey("AcquireOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_ORDHDR");

                    b.HasOne("Domain.TechDataCalendar", "Calendar")
                        .WithMany("FixedAssets")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_CALENDAR");

                    b.HasOne("Domain.Enumeration", "ClassEnum")
                        .WithMany("FixedAssets")
                        .HasForeignKey("ClassEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_CLSENM");

                    b.HasOne("Domain.FixedAssetType", "FixedAssetType")
                        .WithMany("FixedAssets")
                        .HasForeignKey("FixedAssetTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_TYPE");

                    b.HasOne("Domain.Product", "InstanceOfProduct")
                        .WithMany("FixedAssets")
                        .HasForeignKey("InstanceOfProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_IOPROD");

                    b.HasOne("Domain.Facility", "LocatedAtFacility")
                        .WithMany("FixedAssets")
                        .HasForeignKey("LocatedAtFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_FAC");

                    b.HasOne("Domain.FixedAsset", "ParentFixedAsset")
                        .WithMany("InverseParentFixedAsset")
                        .HasForeignKey("ParentFixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_PAR");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("FixedAssets")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_PARTY");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("FixedAssets")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_ROLETYP");

                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("FixedAssets")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_UOM");

                    b.HasOne("Domain.OrderItem", "AcquireOrderI")
                        .WithMany("FixedAssets")
                        .HasForeignKey("AcquireOrderId", "AcquireOrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_ORDITM");

                    b.Navigation("AcquireOrder");

                    b.Navigation("AcquireOrderI");

                    b.Navigation("Calendar");

                    b.Navigation("ClassEnum");

                    b.Navigation("FixedAssetType");

                    b.Navigation("InstanceOfProduct");

                    b.Navigation("LocatedAtFacility");

                    b.Navigation("ParentFixedAsset");

                    b.Navigation("Party");

                    b.Navigation("RoleType");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Domain.FixedAssetAttribute", b =>
                {
                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("FixedAssetAttributes")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXEDAST_ATTR");

                    b.Navigation("FixedAsset");
                });

            modelBuilder.Entity("Domain.FixedAssetDepMethod", b =>
                {
                    b.HasOne("Domain.CustomMethod", "DepreciationCustomMethod")
                        .WithMany("FixedAssetDepMethods")
                        .HasForeignKey("DepreciationCustomMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXDAST_DM_CMET");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("FixedAssetDepMethods")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXDAST_DM_FXAST");

                    b.Navigation("DepreciationCustomMethod");

                    b.Navigation("FixedAsset");
                });

            modelBuilder.Entity("Domain.FixedAssetGeoPoint", b =>
                {
                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("FixedAssetGeoPoints")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FXDASTGEOPT_FXDAST");

                    b.HasOne("Domain.GeoPoint", "GeoPoint")
                        .WithMany("FixedAssetGeoPoints")
                        .HasForeignKey("GeoPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FXDASTGEOPT_GEOPT");

                    b.Navigation("FixedAsset");

                    b.Navigation("GeoPoint");
                });

            modelBuilder.Entity("Domain.FixedAssetIdent", b =>
                {
                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("FixedAssetIdents")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXDASTID_FXAST");

                    b.HasOne("Domain.FixedAssetIdentType", "FixedAssetIdentType")
                        .WithMany("FixedAssetIdents")
                        .HasForeignKey("FixedAssetIdentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXDASTID_IDTYP");

                    b.Navigation("FixedAsset");

                    b.Navigation("FixedAssetIdentType");
                });

            modelBuilder.Entity("Domain.FixedAssetMaint", b =>
                {
                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("FixedAssetMaints")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FXDASTMNT_FXAST");

                    b.HasOne("Domain.ProductMeterType", "IntervalMeterType")
                        .WithMany("FixedAssetMaints")
                        .HasForeignKey("IntervalMeterTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FXDASTMNT_PDMTTYP");

                    b.HasOne("Domain.Uom", "IntervalUom")
                        .WithMany("FixedAssetMaints")
                        .HasForeignKey("IntervalUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FXDASTMNT_INTUOM");

                    b.HasOne("Domain.ProductMaintType", "ProductMaintType")
                        .WithMany("FixedAssetMaints")
                        .HasForeignKey("ProductMaintTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FXDASTMNT_PMNTP");

                    b.HasOne("Domain.OrderHeader", "PurchaseOrder")
                        .WithMany("FixedAssetMaints")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FXDASTMNT_PURORD");

                    b.HasOne("Domain.WorkEffort", "ScheduleWorkEffort")
                        .WithMany("FixedAssetMaints")
                        .HasForeignKey("ScheduleWorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FXDASTMNT_SCHWE");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("FixedAssetMaints")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FXDASTMNT_SI");

                    b.Navigation("FixedAsset");

                    b.Navigation("IntervalMeterType");

                    b.Navigation("IntervalUom");

                    b.Navigation("ProductMaintType");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("ScheduleWorkEffort");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.FixedAssetMaintOrder", b =>
                {
                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("FixedAssetMaintOrders")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FXDASTMNT_ORD_FXAS");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("FixedAssetMaintOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FXDASTMNT_ORD");

                    b.Navigation("FixedAsset");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.FixedAssetMeter", b =>
                {
                    b.HasOne("Domain.ProductMeterType", "ProductMeterType")
                        .WithMany("FixedAssetMeters")
                        .HasForeignKey("ProductMeterTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FXDASTMTR_PMTYP");

                    b.HasOne("Domain.FixedAssetMaint", "FixedAssetMaint")
                        .WithMany("FixedAssetMeters")
                        .HasForeignKey("FixedAssetId", "MaintHistSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FXDASTMTR_FAMNT");

                    b.Navigation("FixedAssetMaint");

                    b.Navigation("ProductMeterType");
                });

            modelBuilder.Entity("Domain.FixedAssetProduct", b =>
                {
                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("FixedAssetProducts")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXDASTPRD_FA");

                    b.HasOne("Domain.FixedAssetProductType", "FixedAssetProductType")
                        .WithMany("FixedAssetProducts")
                        .HasForeignKey("FixedAssetProductTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXDASTPRD_FAPT");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("FixedAssetProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXDASTPRD_PRD");

                    b.HasOne("Domain.Uom", "QuantityUom")
                        .WithMany("FixedAssetProducts")
                        .HasForeignKey("QuantityUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXDASTPRD_UOM");

                    b.Navigation("FixedAsset");

                    b.Navigation("FixedAssetProductType");

                    b.Navigation("Product");

                    b.Navigation("QuantityUom");
                });

            modelBuilder.Entity("Domain.FixedAssetRegistration", b =>
                {
                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("FixedAssetRegistrations")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXDASTREG_FXAST");

                    b.HasOne("Domain.Party", "GovAgencyParty")
                        .WithMany("FixedAssetRegistrations")
                        .HasForeignKey("GovAgencyPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXDASTREG_GVAPTY");

                    b.Navigation("FixedAsset");

                    b.Navigation("GovAgencyParty");
                });

            modelBuilder.Entity("Domain.FixedAssetStdCost", b =>
                {
                    b.HasOne("Domain.Uom", "AmountUom")
                        .WithMany("FixedAssetStdCosts")
                        .HasForeignKey("AmountUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXASTCO_AMCURR");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("FixedAssetStdCosts")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXASTCO_FIXAST");

                    b.HasOne("Domain.FixedAssetStdCostType", "FixedAssetStdCostType")
                        .WithMany("FixedAssetStdCosts")
                        .HasForeignKey("FixedAssetStdCostTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXASTCO_TYPCOS");

                    b.Navigation("AmountUom");

                    b.Navigation("FixedAsset");

                    b.Navigation("FixedAssetStdCostType");
                });

            modelBuilder.Entity("Domain.FixedAssetStdCostType", b =>
                {
                    b.HasOne("Domain.FixedAssetStdCostType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXASTCO_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.FixedAssetType", b =>
                {
                    b.HasOne("Domain.FixedAssetType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FIXEDAST_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.FixedAssetTypeAttr", b =>
                {
                    b.HasOne("Domain.FixedAssetType", "FixedAssetType")
                        .WithMany("FixedAssetTypeAttrs")
                        .HasForeignKey("FixedAssetTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FIXEDAST_TYPATTR");

                    b.Navigation("FixedAssetType");
                });

            modelBuilder.Entity("Domain.FixedAssetTypeGlAccount", b =>
                {
                    b.HasOne("Domain.GlAccount", "AccDepGlAccount")
                        .WithMany("FixedAssetTypeGlAccountAccDepGlAccounts")
                        .HasForeignKey("AccDepGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FATGL_ACCDGL");

                    b.HasOne("Domain.GlAccount", "AssetGlAccount")
                        .WithMany("FixedAssetTypeGlAccountAssetGlAccounts")
                        .HasForeignKey("AssetGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FATGL_AGL");

                    b.HasOne("Domain.GlAccount", "DepGlAccount")
                        .WithMany("FixedAssetTypeGlAccountDepGlAccounts")
                        .HasForeignKey("DepGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FATGL_DGL");

                    b.HasOne("Domain.GlAccount", "LossGlAccount")
                        .WithMany("FixedAssetTypeGlAccountLossGlAccounts")
                        .HasForeignKey("LossGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FATGL_LGL");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("FixedAssetTypeGlAccounts")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FATGL_OP");

                    b.HasOne("Domain.GlAccount", "ProfitGlAccount")
                        .WithMany("FixedAssetTypeGlAccountProfitGlAccounts")
                        .HasForeignKey("ProfitGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FATGL_PGL");

                    b.Navigation("AccDepGlAccount");

                    b.Navigation("AssetGlAccount");

                    b.Navigation("DepGlAccount");

                    b.Navigation("LossGlAccount");

                    b.Navigation("OrganizationParty");

                    b.Navigation("ProfitGlAccount");
                });

            modelBuilder.Entity("Domain.FtpAddress", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithOne("FtpAddress")
                        .HasForeignKey("Domain.FtpAddress", "ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FTP_SRV_CMECH");

                    b.Navigation("ContactMech");
                });

            modelBuilder.Entity("Domain.Geo", b =>
                {
                    b.HasOne("Domain.GeoType", "GeoType")
                        .WithMany("Geos")
                        .HasForeignKey("GeoTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GEO_TO_TYPE");

                    b.Navigation("GeoType");
                });

            modelBuilder.Entity("Domain.GeoAssoc", b =>
                {
                    b.HasOne("Domain.GeoAssocType", "GeoAssocType")
                        .WithMany("GeoAssocs")
                        .HasForeignKey("GeoAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GEO_ASSC_TO_TYPE");

                    b.HasOne("Domain.Geo", "Geo")
                        .WithMany("GeoAssocGeos")
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GEO_ASSC_TO_MAIN");

                    b.HasOne("Domain.Geo", "GeoIdToNavigation")
                        .WithMany("GeoAssocGeoIdToNavigations")
                        .HasForeignKey("GeoIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GEO_ASSC_TO_ASSC");

                    b.Navigation("Geo");

                    b.Navigation("GeoAssocType");

                    b.Navigation("GeoIdToNavigation");
                });

            modelBuilder.Entity("Domain.GeoPoint", b =>
                {
                    b.HasOne("Domain.DataSource", "DataSource")
                        .WithMany("GeoPoints")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GEOPOINT_DTSRC");

                    b.HasOne("Domain.Uom", "ElevationUom")
                        .WithMany("GeoPoints")
                        .HasForeignKey("ElevationUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GPT_ELEV_UOM");

                    b.HasOne("Domain.Enumeration", "GeoPointTypeEnum")
                        .WithMany("GeoPoints")
                        .HasForeignKey("GeoPointTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GEOPOINT_TYPE");

                    b.Navigation("DataSource");

                    b.Navigation("ElevationUom");

                    b.Navigation("GeoPointTypeEnum");
                });

            modelBuilder.Entity("Domain.GeoType", b =>
                {
                    b.HasOne("Domain.GeoType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GEO_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.GiftCard", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("GiftCards")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GIFTCARD_CMECH");

                    b.HasOne("Domain.PostalAddress", "ContactMechNavigation")
                        .WithMany("GiftCards")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GIFTCARD_PADDR");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithOne("GiftCard")
                        .HasForeignKey("Domain.GiftCard", "PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GIFTCARD_PMNTMETH");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechNavigation");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.GiftCardFulfillment", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("GiftCardFulfillments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GC_FILL_ODRH");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("GiftCardFulfillments")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GC_FILL_PARTY");

                    b.HasOne("Domain.SurveyResponse", "SurveyResponse")
                        .WithMany("GiftCardFulfillments")
                        .HasForeignKey("SurveyResponseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GC_FILL_SURVY");

                    b.HasOne("Domain.Enumeration", "TypeEnum")
                        .WithMany("GiftCardFulfillments")
                        .HasForeignKey("TypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GC_FILL_ENUM");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("GiftCardFulfillments")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GC_FILL_ODRI");

                    b.Navigation("Order");

                    b.Navigation("OrderI");

                    b.Navigation("Party");

                    b.Navigation("SurveyResponse");

                    b.Navigation("TypeEnum");
                });

            modelBuilder.Entity("Domain.GlAccount", b =>
                {
                    b.HasOne("Domain.GlAccountClass", "GlAccountClass")
                        .WithMany("GlAccounts")
                        .HasForeignKey("GlAccountClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACCT_CLSS");

                    b.HasOne("Domain.GlAccountType", "GlAccountType")
                        .WithMany("GlAccounts")
                        .HasForeignKey("GlAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACCT_TYPE");

                    b.HasOne("Domain.GlResourceType", "GlResourceType")
                        .WithMany("GlAccounts")
                        .HasForeignKey("GlResourceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACCT_REC");

                    b.HasOne("Domain.GlXbrlClass", "GlXbrlClass")
                        .WithMany("GlAccounts")
                        .HasForeignKey("GlXbrlClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACCT_XBRLCLS");

                    b.HasOne("Domain.GlAccount", "ParentGlAccount")
                        .WithMany("InverseParentGlAccount")
                        .HasForeignKey("ParentGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACCT_PAR");

                    b.Navigation("GlAccountClass");

                    b.Navigation("GlAccountType");

                    b.Navigation("GlResourceType");

                    b.Navigation("GlXbrlClass");

                    b.Navigation("ParentGlAccount");
                });

            modelBuilder.Entity("Domain.GlAccountCategory", b =>
                {
                    b.HasOne("Domain.GlAccountCategoryType", "GlAccountCategoryType")
                        .WithMany("GlAccountCategories")
                        .HasForeignKey("GlAccountCategoryTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACT_CAT_TP");

                    b.Navigation("GlAccountCategoryType");
                });

            modelBuilder.Entity("Domain.GlAccountCategoryMember", b =>
                {
                    b.HasOne("Domain.GlAccountCategory", "GlAccountCategory")
                        .WithMany("GlAccountCategoryMembers")
                        .HasForeignKey("GlAccountCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACT_CATMBR_CAT");

                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("GlAccountCategoryMembers")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACT_CATMBR_AC");

                    b.Navigation("GlAccount");

                    b.Navigation("GlAccountCategory");
                });

            modelBuilder.Entity("Domain.GlAccountClass", b =>
                {
                    b.HasOne("Domain.GlAccountClass", "ParentClass")
                        .WithMany("InverseParentClass")
                        .HasForeignKey("ParentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACTCLS_PAR");

                    b.Navigation("ParentClass");
                });

            modelBuilder.Entity("Domain.GlAccountGroup", b =>
                {
                    b.HasOne("Domain.GlAccountGroupType", "GlAccountGroupType")
                        .WithMany("GlAccountGroups")
                        .HasForeignKey("GlAccountGroupTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACT_GRP_TP");

                    b.Navigation("GlAccountGroupType");
                });

            modelBuilder.Entity("Domain.GlAccountGroupMember", b =>
                {
                    b.HasOne("Domain.GlAccountGroup", "GlAccountGroup")
                        .WithMany("GlAccountGroupMembers")
                        .HasForeignKey("GlAccountGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACT_GPMBR_GP");

                    b.HasOne("Domain.GlAccountGroupType", "GlAccountGroupType")
                        .WithMany("GlAccountGroupMembers")
                        .HasForeignKey("GlAccountGroupTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACT_GPMBR_TP");

                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("GlAccountGroupMembers")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACT_GPMBR_AC");

                    b.Navigation("GlAccount");

                    b.Navigation("GlAccountGroup");

                    b.Navigation("GlAccountGroupType");
                });

            modelBuilder.Entity("Domain.GlAccountHistory", b =>
                {
                    b.HasOne("Domain.CustomTimePeriod", "CustomTimePeriod")
                        .WithMany("GlAccountHistories")
                        .HasForeignKey("CustomTimePeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACCT_HST_CTP");

                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("GlAccountHistories")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACCT_HST_GLA");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("GlAccountHistories")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACCT_HST_PARTY");

                    b.Navigation("CustomTimePeriod");

                    b.Navigation("GlAccount");

                    b.Navigation("OrganizationParty");
                });

            modelBuilder.Entity("Domain.GlAccountOrganization", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("GlAccountOrganizations")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACCT_ORG_GLA");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("GlAccountOrganizations")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACCT_ORG_PARTY");

                    b.Navigation("GlAccount");

                    b.Navigation("OrganizationParty");
                });

            modelBuilder.Entity("Domain.GlAccountRole", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("GlAccountRoles")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACCT_RL_GLA");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("GlAccountRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACCT_RL_PTRLE");

                    b.Navigation("GlAccount");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.GlAccountType", b =>
                {
                    b.HasOne("Domain.GlAccountType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACTTY_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.GlAccountTypeDefault", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("GlAccountTypeDefaults")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLACCT_TPDF_GLA");

                    b.HasOne("Domain.GlAccountType", "GlAccountType")
                        .WithMany("GlAccountTypeDefaults")
                        .HasForeignKey("GlAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACCT_TPDF_GLAT");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("GlAccountTypeDefaults")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GLACCT_TPDF_OPTY");

                    b.Navigation("GlAccount");

                    b.Navigation("GlAccountType");

                    b.Navigation("OrganizationParty");
                });

            modelBuilder.Entity("Domain.GlBudgetXref", b =>
                {
                    b.HasOne("Domain.BudgetItemType", "BudgetItemType")
                        .WithMany("GlBudgetXrefs")
                        .HasForeignKey("BudgetItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GL_BDGT_XRF_BIT");

                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("GlBudgetXrefs")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GL_BDGT_XRF_GLA");

                    b.Navigation("BudgetItemType");

                    b.Navigation("GlAccount");
                });

            modelBuilder.Entity("Domain.GlJournal", b =>
                {
                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("GlJournals")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLJOURN_PARTY");

                    b.Navigation("OrganizationParty");
                });

            modelBuilder.Entity("Domain.GlReconciliation", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("GlReconciliations")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLREC_GLACCT");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("GlReconciliations")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLREC_GLPARTY");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("GlReconciliations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GLREC_STI");

                    b.Navigation("GlAccount");

                    b.Navigation("OrganizationParty");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.GlReconciliationEntry", b =>
                {
                    b.HasOne("Domain.GlReconciliation", "GlReconciliation")
                        .WithMany("GlReconciliationEntries")
                        .HasForeignKey("GlReconciliationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GL_RECENT_GLREC");

                    b.HasOne("Domain.AcctgTransEntry", "AcctgTrans")
                        .WithMany("GlReconciliationEntries")
                        .HasForeignKey("AcctgTransId", "AcctgTransEntrySeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GL_RECENT_ACTTXE");

                    b.Navigation("AcctgTrans");

                    b.Navigation("GlReconciliation");
                });

            modelBuilder.Entity("Domain.GlXbrlClass", b =>
                {
                    b.HasOne("Domain.GlXbrlClass", "ParentGlXbrlClass")
                        .WithMany("InverseParentGlXbrlClass")
                        .HasForeignKey("ParentGlXbrlClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GL_XBRL_CLSPAR");

                    b.Navigation("ParentGlXbrlClass");
                });

            modelBuilder.Entity("Domain.GoodIdentification", b =>
                {
                    b.HasOne("Domain.GoodIdentificationType", "GoodIdentificationType")
                        .WithMany("GoodIdentifications")
                        .HasForeignKey("GoodIdentificationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GOOD_ID_TYPE");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("GoodIdentifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("GOOD_ID_PRODICT");

                    b.Navigation("GoodIdentificationType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.GoodIdentificationType", b =>
                {
                    b.HasOne("Domain.GoodIdentificationType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GOOD_ID_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ImageDataResource", b =>
                {
                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithOne("ImageDataResource")
                        .HasForeignKey("Domain.ImageDataResource", "DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_REC_IMAGE");

                    b.Navigation("DataResource");
                });

            modelBuilder.Entity("Domain.InventoryItem", b =>
                {
                    b.HasOne("Domain.Container", "Container")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_CONTAINER");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("InventoryItemCurrencyUoms")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_CUOM");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("InventoryItems")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_FACILITY");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("InventoryItems")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("IYIM_FAST");

                    b.HasOne("Domain.InventoryItemType", "InventoryItemType")
                        .WithMany("InventoryItems")
                        .HasForeignKey("InventoryItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_TYPE");

                    b.HasOne("Domain.Lot", "Lot")
                        .WithMany("InventoryItems")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_LOT");

                    b.HasOne("Domain.Party", "OwnerParty")
                        .WithMany("InventoryItemOwnerParties")
                        .HasForeignKey("OwnerPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_OWNPARTY");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("InventoryItemParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_PARTY");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_PRODUCT");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("InventoryItems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_STTSITM");

                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("InventoryItemUoms")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_UOM");

                    b.Navigation("Container");

                    b.Navigation("CurrencyUom");

                    b.Navigation("Facility");

                    b.Navigation("FixedAsset");

                    b.Navigation("InventoryItemType");

                    b.Navigation("Lot");

                    b.Navigation("OwnerParty");

                    b.Navigation("Party");

                    b.Navigation("Product");

                    b.Navigation("Status");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Domain.InventoryItemAttribute", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("InventoryItemAttributes")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITEM_ATTR");

                    b.Navigation("InventoryItem");
                });

            modelBuilder.Entity("Domain.InventoryItemDetail", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("InventoryItemDetails")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITDTL_INVIT");

                    b.HasOne("Domain.ItemIssuance", "ItemIssuance")
                        .WithMany("InventoryItemDetails")
                        .HasForeignKey("ItemIssuanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITDTL_ITMIS");

                    b.HasOne("Domain.PhysicalInventory", "PhysicalInventory")
                        .WithMany("InventoryItemDetails")
                        .HasForeignKey("PhysicalInventoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITDTL_PHINV");

                    b.HasOne("Domain.Enumeration", "ReasonEnum")
                        .WithMany("InventoryItemDetails")
                        .HasForeignKey("ReasonEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITDTL_REAS");

                    b.HasOne("Domain.ShipmentReceipt", "Receipt")
                        .WithMany("InventoryItemDetails")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITDTL_SHRCT");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("InventoryItemDetails")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITDTL_WEFF");

                    b.HasOne("Domain.FixedAssetMaint", "FixedAssetMaint")
                        .WithMany("InventoryItemDetails")
                        .HasForeignKey("FixedAssetId", "MaintHistSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITDTL_FAMNT");

                    b.Navigation("FixedAssetMaint");

                    b.Navigation("InventoryItem");

                    b.Navigation("ItemIssuance");

                    b.Navigation("PhysicalInventory");

                    b.Navigation("ReasonEnum");

                    b.Navigation("Receipt");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.InventoryItemLabel", b =>
                {
                    b.HasOne("Domain.InventoryItemLabelType", "InventoryItemLabelType")
                        .WithMany("InventoryItemLabels")
                        .HasForeignKey("InventoryItemLabelTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITLA_TYPE");

                    b.Navigation("InventoryItemLabelType");
                });

            modelBuilder.Entity("Domain.InventoryItemLabelAppl", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("InventoryItemLabelAppls")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITLAP_ITEM");

                    b.HasOne("Domain.InventoryItemLabel", "InventoryItemLabel")
                        .WithMany("InventoryItemLabelAppls")
                        .HasForeignKey("InventoryItemLabelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITLAP_LAB");

                    b.HasOne("Domain.InventoryItemLabelType", "InventoryItemLabelType")
                        .WithMany("InventoryItemLabelAppls")
                        .HasForeignKey("InventoryItemLabelTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITLAP_TYPE");

                    b.Navigation("InventoryItem");

                    b.Navigation("InventoryItemLabel");

                    b.Navigation("InventoryItemLabelType");
                });

            modelBuilder.Entity("Domain.InventoryItemLabelType", b =>
                {
                    b.HasOne("Domain.InventoryItemLabelType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITLT_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.InventoryItemStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("InventoryItemStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_STTS_USER");

                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("InventoryItemStatuses")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITEM_STTS_II");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("InventoryItemStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITEM_STTS_SI");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("InventoryItem");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.InventoryItemTempRe", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("InventoryItemTempRes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITEM_TR_PROD");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("InventoryItemTempRes")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITEM_TR_PRDS");

                    b.Navigation("Product");

                    b.Navigation("ProductStore");
                });

            modelBuilder.Entity("Domain.InventoryItemType", b =>
                {
                    b.HasOne("Domain.InventoryItemType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.InventoryItemTypeAttr", b =>
                {
                    b.HasOne("Domain.InventoryItemType", "InventoryItemType")
                        .WithMany("InventoryItemTypeAttrs")
                        .HasForeignKey("InventoryItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITEM_TYP_ATTR");

                    b.Navigation("InventoryItemType");
                });

            modelBuilder.Entity("Domain.InventoryItemVariance", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("InventoryItemVariances")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITEM_VAR_ITEM");

                    b.HasOne("Domain.PhysicalInventory", "PhysicalInventory")
                        .WithMany("InventoryItemVariances")
                        .HasForeignKey("PhysicalInventoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_ITEM_VAR_PINV");

                    b.HasOne("Domain.VarianceReason", "VarianceReason")
                        .WithMany("InventoryItemVariances")
                        .HasForeignKey("VarianceReasonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_ITEM_VAR_RSN");

                    b.Navigation("InventoryItem");

                    b.Navigation("PhysicalInventory");

                    b.Navigation("VarianceReason");
                });

            modelBuilder.Entity("Domain.InventoryTransfer", b =>
                {
                    b.HasOne("Domain.Container", "Container")
                        .WithMany("InventoryTransferContainers")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_XFER_CONT");

                    b.HasOne("Domain.Container", "ContainerIdToNavigation")
                        .WithMany("InventoryTransferContainerIdToNavigations")
                        .HasForeignKey("ContainerIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_XFER_TCNT");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("InventoryTransferFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_XFER_FAC");

                    b.HasOne("Domain.Facility", "FacilityIdToNavigation")
                        .WithMany("InventoryTransferFacilityIdToNavigations")
                        .HasForeignKey("FacilityIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_XFER_TFAC");

                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("InventoryTransfers")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_XFER_ITEM");

                    b.HasOne("Domain.ItemIssuance", "ItemIssuance")
                        .WithMany("InventoryTransfers")
                        .HasForeignKey("ItemIssuanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_XFER_ISSU");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("InventoryTransfers")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_XFER_STTS");

                    b.Navigation("Container");

                    b.Navigation("ContainerIdToNavigation");

                    b.Navigation("Facility");

                    b.Navigation("FacilityIdToNavigation");

                    b.Navigation("InventoryItem");

                    b.Navigation("ItemIssuance");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.HasOne("Domain.BillingAccount", "BillingAccount")
                        .WithMany("Invoices")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_BILLACCT");

                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("Invoices")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_CMECH");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("Invoices")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_CUOM");

                    b.HasOne("Domain.InvoiceType", "InvoiceType")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_INVTYP");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("InvoiceParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_PARTY");

                    b.HasOne("Domain.Party", "PartyIdFromNavigation")
                        .WithMany("InvoicePartyIdFromNavigations")
                        .HasForeignKey("PartyIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_PARTY_FRM");

                    b.HasOne("Domain.RecurrenceInfo", "RecurrenceInfo")
                        .WithMany("Invoices")
                        .HasForeignKey("RecurrenceInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_RECINFO");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("Invoices")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_ROLETYP");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("Invoices")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_STTSITM");

                    b.Navigation("BillingAccount");

                    b.Navigation("ContactMech");

                    b.Navigation("CurrencyUom");

                    b.Navigation("InvoiceType");

                    b.Navigation("Party");

                    b.Navigation("PartyIdFromNavigation");

                    b.Navigation("RecurrenceInfo");

                    b.Navigation("RoleType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.InvoiceAttribute", b =>
                {
                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("InvoiceAttributes")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_ATTR");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.InvoiceContactMech", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("InvoiceContactMeches")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_CMECH_CM");

                    b.HasOne("Domain.ContactMechPurposeType", "ContactMechPurposeType")
                        .WithMany("InvoiceContactMeches")
                        .HasForeignKey("ContactMechPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_CMECH_CMPT");

                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("InvoiceContactMeches")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_CMECH_HDR");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechPurposeType");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.InvoiceContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("InvoiceContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_CNT_CNT");

                    b.HasOne("Domain.InvoiceContentType", "InvoiceContentType")
                        .WithMany("InvoiceContents")
                        .HasForeignKey("InvoiceContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_CNT_TYPE");

                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("InvoiceContents")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INV_CNT_PROD");

                    b.Navigation("Content");

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceContentType");
                });

            modelBuilder.Entity("Domain.InvoiceContentType", b =>
                {
                    b.HasOne("Domain.InvoiceContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCT_TYP_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.InvoiceItem", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_ITM_INVITM");

                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVCE_ITM_INVCE");

                    b.HasOne("Domain.InvoiceItemType", "InvoiceItemType")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_ITMITYP");

                    b.HasOne("Domain.GlAccount", "OverrideGlAccount")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("OverrideGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_ITM_ORGLA");

                    b.HasOne("Domain.Party", "OverrideOrgParty")
                        .WithMany("InvoiceItemOverrideOrgParties")
                        .HasForeignKey("OverrideOrgPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_ITM_OVRPTY");

                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_ITM_PRDFT");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_ITM_PROD");

                    b.HasOne("Domain.SalesOpportunity", "SalesOpportunity")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("SalesOpportunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_ITM_SLSOPP");

                    b.HasOne("Domain.Geo", "TaxAuthGeo")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("TaxAuthGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_ITM_TAXGEO");

                    b.HasOne("Domain.Party", "TaxAuthParty")
                        .WithMany("InvoiceItemTaxAuthParties")
                        .HasForeignKey("TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_ITM_TAXPTY");

                    b.HasOne("Domain.TaxAuthorityRateProduct", "TaxAuthorityRateSeq")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("TaxAuthorityRateSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_ITM_TARP");

                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_ITM_UOM");

                    b.HasOne("Domain.InvoiceItem", "ParentInvoiceI")
                        .WithMany("InverseParentInvoiceI")
                        .HasForeignKey("ParentInvoiceId", "ParentInvoiceItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_ITM_PINVIT");

                    b.Navigation("InventoryItem");

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceItemType");

                    b.Navigation("OverrideGlAccount");

                    b.Navigation("OverrideOrgParty");

                    b.Navigation("ParentInvoiceI");

                    b.Navigation("Product");

                    b.Navigation("ProductFeature");

                    b.Navigation("SalesOpportunity");

                    b.Navigation("TaxAuthGeo");

                    b.Navigation("TaxAuthParty");

                    b.Navigation("TaxAuthorityRateSeq");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Domain.InvoiceItemAssoc", b =>
                {
                    b.HasOne("Domain.InvoiceItemAssocType", "InvoiceItemAssocType")
                        .WithMany("InvoiceItemAssocs")
                        .HasForeignKey("InvoiceItemAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INITMASCTYP_IIASC");

                    b.HasOne("Domain.InvoiceItem", "InvoiceI")
                        .WithMany("InvoiceItemAssocInvoiceIs")
                        .HasForeignKey("InvoiceIdFrom", "InvoiceItemSeqIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INITMASC_FIITM");

                    b.HasOne("Domain.InvoiceItem", "InvoiceINavigation")
                        .WithMany("InvoiceItemAssocInvoiceINavigations")
                        .HasForeignKey("InvoiceIdTo", "InvoiceItemSeqIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INITMASC_TIITM");

                    b.Navigation("InvoiceI");

                    b.Navigation("InvoiceINavigation");

                    b.Navigation("InvoiceItemAssocType");
                });

            modelBuilder.Entity("Domain.InvoiceItemAssocType", b =>
                {
                    b.HasOne("Domain.InvoiceItemAssocType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INITMASCTYP_PRNT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.InvoiceItemAttribute", b =>
                {
                    b.HasOne("Domain.InvoiceItem", "InvoiceI")
                        .WithMany("InvoiceItemAttributes")
                        .HasForeignKey("InvoiceId", "InvoiceItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_IMAT_ITM");

                    b.Navigation("InvoiceI");
                });

            modelBuilder.Entity("Domain.InvoiceItemType", b =>
                {
                    b.HasOne("Domain.GlAccount", "DefaultGlAccount")
                        .WithMany("InvoiceItemTypes")
                        .HasForeignKey("DefaultGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_ITM_DGLAC");

                    b.HasOne("Domain.InvoiceItemType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_ITEM_TPAR");

                    b.Navigation("DefaultGlAccount");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.InvoiceItemTypeAttr", b =>
                {
                    b.HasOne("Domain.InvoiceItemType", "InvoiceItemType")
                        .WithMany("InvoiceItemTypeAttrs")
                        .HasForeignKey("InvoiceItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_ITEM_TATR");

                    b.Navigation("InvoiceItemType");
                });

            modelBuilder.Entity("Domain.InvoiceItemTypeGlAccount", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("InvoiceItemTypeGlAccounts")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_ITGA_GLAC");

                    b.HasOne("Domain.InvoiceItemType", "InvoiceItemType")
                        .WithMany("InvoiceItemTypeGlAccounts")
                        .HasForeignKey("InvoiceItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_ITGA_IIT");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("InvoiceItemTypeGlAccounts")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_ITGA_OPTY");

                    b.Navigation("GlAccount");

                    b.Navigation("InvoiceItemType");

                    b.Navigation("OrganizationParty");
                });

            modelBuilder.Entity("Domain.InvoiceItemTypeMap", b =>
                {
                    b.HasOne("Domain.InvoiceItemType", "InvoiceItemType")
                        .WithMany("InvoiceItemTypeMaps")
                        .HasForeignKey("InvoiceItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_ITEM_MAP");

                    b.HasOne("Domain.InvoiceType", "InvoiceType")
                        .WithMany("InvoiceItemTypeMaps")
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVITMMAP_INVTYP");

                    b.Navigation("InvoiceItemType");

                    b.Navigation("InvoiceType");
                });

            modelBuilder.Entity("Domain.InvoiceNote", b =>
                {
                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("InvoiceNotes")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_NOTE_INV");

                    b.HasOne("Domain.NoteDatum", "Note")
                        .WithMany("InvoiceNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_NOTE_NOTE");

                    b.Navigation("Invoice");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Domain.InvoiceRole", b =>
                {
                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("InvoiceRoles")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVCE_RLE_INVCE");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("InvoiceRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVCE_RLE_PARTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("InvoiceRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVCE_RLE_PTRL");

                    b.Navigation("Invoice");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.InvoiceStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("InvoiceStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INV_STTS_USRLGN");

                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("InvoiceStatuses")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVCE_STS_INVCE");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("InvoiceStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVCE_STS_STSITM");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("Invoice");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.InvoiceTerm", b =>
                {
                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("InvoiceTerms")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_TRM_INVCE");

                    b.HasOne("Domain.TermType", "TermType")
                        .WithMany("InvoiceTerms")
                        .HasForeignKey("TermTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVCE_TRM_TRM");

                    b.Navigation("Invoice");

                    b.Navigation("TermType");
                });

            modelBuilder.Entity("Domain.InvoiceTermAttribute", b =>
                {
                    b.HasOne("Domain.InvoiceTerm", "InvoiceTerm")
                        .WithMany("InvoiceTermAttributes")
                        .HasForeignKey("InvoiceTermId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_TRM_ATTR");

                    b.Navigation("InvoiceTerm");
                });

            modelBuilder.Entity("Domain.InvoiceType", b =>
                {
                    b.HasOne("Domain.InvoiceType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("INVOICE_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.InvoiceTypeAttr", b =>
                {
                    b.HasOne("Domain.InvoiceType", "InvoiceType")
                        .WithMany("InvoiceTypeAttrs")
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("INVOICE_TPAT_TYP");

                    b.Navigation("InvoiceType");
                });

            modelBuilder.Entity("Domain.ItemIssuance", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("ItemIssuances")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ITEM_ISS_INVITM");

                    b.HasOne("Domain.UserLogin", "IssuedByUserLogin")
                        .WithMany("ItemIssuances")
                        .HasForeignKey("IssuedByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ITEM_ISS_IBUL");

                    b.HasOne("Domain.FixedAssetMaint", "FixedAssetMaint")
                        .WithMany("ItemIssuances")
                        .HasForeignKey("FixedAssetId", "MaintHistSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ITEM_ISS_FAMNT");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("ItemIssuances")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ITEM_ISS_ORITM");

                    b.HasOne("Domain.ShipmentItem", "ShipmentI")
                        .WithMany("ItemIssuances")
                        .HasForeignKey("ShipmentId", "ShipmentItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ITEM_ISS_SHITM");

                    b.Navigation("FixedAssetMaint");

                    b.Navigation("InventoryItem");

                    b.Navigation("IssuedByUserLogin");

                    b.Navigation("OrderI");

                    b.Navigation("ShipmentI");
                });

            modelBuilder.Entity("Domain.ItemIssuanceRole", b =>
                {
                    b.HasOne("Domain.ItemIssuance", "ItemIssuance")
                        .WithMany("ItemIssuanceRoles")
                        .HasForeignKey("ItemIssuanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ITEM_ISSRL_ITMIS");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("ItemIssuanceRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ITEM_ISSRL_PTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("ItemIssuanceRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ITEM_ISSRL_PTRL");

                    b.Navigation("ItemIssuance");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.JobInterview", b =>
                {
                    b.HasOne("Domain.Enumeration", "GradeSecuredEnum")
                        .WithMany("JobInterviews")
                        .HasForeignKey("GradeSecuredEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_INTW_ENUM");

                    b.HasOne("Domain.JobInterviewType", "JobInterviewType")
                        .WithMany("JobInterviews")
                        .HasForeignKey("JobInterviewTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_INTW_INTYP");

                    b.HasOne("Domain.Party", "JobIntervieweeParty")
                        .WithMany("JobInterviewJobIntervieweeParties")
                        .HasForeignKey("JobIntervieweePartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_INTW_IEPR");

                    b.HasOne("Domain.Party", "JobInterviewerParty")
                        .WithMany("JobInterviewJobInterviewerParties")
                        .HasForeignKey("JobInterviewerPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_INTW_IRPR");

                    b.HasOne("Domain.JobRequisition", "JobRequisition")
                        .WithMany("JobInterviews")
                        .HasForeignKey("JobRequisitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_INTW_JBREQ");

                    b.Navigation("GradeSecuredEnum");

                    b.Navigation("JobInterviewType");

                    b.Navigation("JobIntervieweeParty");

                    b.Navigation("JobInterviewerParty");

                    b.Navigation("JobRequisition");
                });

            modelBuilder.Entity("Domain.JobManagerLock", b =>
                {
                    b.HasOne("Domain.Enumeration", "ReasonEnum")
                        .WithMany("JobManagerLocks")
                        .HasForeignKey("ReasonEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOBLK_ENUM_REAS");

                    b.Navigation("ReasonEnum");
                });

            modelBuilder.Entity("Domain.JobRequisition", b =>
                {
                    b.HasOne("Domain.Enumeration", "ExamTypeEnum")
                        .WithMany("JobRequisitionExamTypeEnums")
                        .HasForeignKey("ExamTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_REQ_ENUMEXM");

                    b.HasOne("Domain.Enumeration", "JobPostingTypeEnum")
                        .WithMany("JobRequisitionJobPostingTypeEnums")
                        .HasForeignKey("JobPostingTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_REQ_ENUMJBP");

                    b.HasOne("Domain.SkillType", "SkillType")
                        .WithMany("JobRequisitions")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_REQ_SKTYP");

                    b.Navigation("ExamTypeEnum");

                    b.Navigation("JobPostingTypeEnum");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("Domain.JobSandbox", b =>
                {
                    b.HasOne("Domain.UserLogin", "AuthUserLogin")
                        .WithMany("JobSandboxAuthUserLogins")
                        .HasForeignKey("AuthUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_SNDBX_AUSRLGN");

                    b.HasOne("Domain.RecurrenceInfo", "RecurrenceInfo")
                        .WithMany("JobSandboxes")
                        .HasForeignKey("RecurrenceInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_SNDBX_RECINFO");

                    b.HasOne("Domain.UserLogin", "RunAsUserNavigation")
                        .WithMany("JobSandboxRunAsUserNavigations")
                        .HasForeignKey("RunAsUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_SNDBX_USRLGN");

                    b.HasOne("Domain.RuntimeDatum", "RuntimeData")
                        .WithMany("JobSandboxes")
                        .HasForeignKey("RuntimeDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_SNDBX_RNTMDTA");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("JobSandboxes")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_SNDBX_STTS");

                    b.HasOne("Domain.TemporalExpression", "TempExpr")
                        .WithMany("JobSandboxes")
                        .HasForeignKey("TempExprId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("JOB_SNDBX_TEMPEXPR");

                    b.Navigation("AuthUserLogin");

                    b.Navigation("RecurrenceInfo");

                    b.Navigation("RunAsUserNavigation");

                    b.Navigation("RuntimeData");

                    b.Navigation("Status");

                    b.Navigation("TempExpr");
                });

            modelBuilder.Entity("Domain.KeywordThesauru", b =>
                {
                    b.HasOne("Domain.Enumeration", "RelationshipEnum")
                        .WithMany("KeywordThesaurus")
                        .HasForeignKey("RelationshipEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("KW_THRS_RLENM");

                    b.Navigation("RelationshipEnum");
                });

            modelBuilder.Entity("Domain.MarketInterest", b =>
                {
                    b.HasOne("Domain.PartyClassificationGroup", "PartyClassificationGroup")
                        .WithMany("MarketInterests")
                        .HasForeignKey("PartyClassificationGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MARKET_INT_PCGRP");

                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("MarketInterests")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MARKET_INT_PCAT");

                    b.Navigation("PartyClassificationGroup");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.MarketingCampaign", b =>
                {
                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("MarketingCampaigns")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("MKTGCPN_CUOM");

                    b.HasOne("Domain.MarketingCampaign", "ParentCampaign")
                        .WithMany("InverseParentCampaign")
                        .HasForeignKey("ParentCampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("MKTGCPN_PRNT");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("MarketingCampaigns")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("MKTGCPN_STS");

                    b.Navigation("CurrencyUom");

                    b.Navigation("ParentCampaign");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.MarketingCampaignNote", b =>
                {
                    b.HasOne("Domain.MarketingCampaign", "MarketingCampaign")
                        .WithMany("MarketingCampaignNotes")
                        .HasForeignKey("MarketingCampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MKTGCPN_NOTE_CMPN");

                    b.HasOne("Domain.NoteDatum", "Note")
                        .WithMany("MarketingCampaignNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MKTGCPN_NOTE_NOTE");

                    b.Navigation("MarketingCampaign");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Domain.MarketingCampaignPrice", b =>
                {
                    b.HasOne("Domain.MarketingCampaign", "MarketingCampaign")
                        .WithMany("MarketingCampaignPrices")
                        .HasForeignKey("MarketingCampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MKTGCPN_PRICE_MC");

                    b.HasOne("Domain.ProductPriceRule", "ProductPriceRule")
                        .WithMany("MarketingCampaignPrices")
                        .HasForeignKey("ProductPriceRuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MKTGCPN_PRICE_PP");

                    b.Navigation("MarketingCampaign");

                    b.Navigation("ProductPriceRule");
                });

            modelBuilder.Entity("Domain.MarketingCampaignPromo", b =>
                {
                    b.HasOne("Domain.MarketingCampaign", "MarketingCampaign")
                        .WithMany("MarketingCampaignPromos")
                        .HasForeignKey("MarketingCampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MKTGCPN_PROMO_MC");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("MarketingCampaignPromos")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MKTGCPN_PROMO_PP");

                    b.Navigation("MarketingCampaign");

                    b.Navigation("ProductPromo");
                });

            modelBuilder.Entity("Domain.MarketingCampaignRole", b =>
                {
                    b.HasOne("Domain.MarketingCampaign", "MarketingCampaign")
                        .WithMany("MarketingCampaignRoles")
                        .HasForeignKey("MarketingCampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MKTGCPN_ROLE_MC");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("MarketingCampaignRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MKTGCPN_ROLE_PR");

                    b.Navigation("MarketingCampaign");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.MimeTypeHtmlTemplate", b =>
                {
                    b.HasOne("Domain.MimeType", "MimeType")
                        .WithOne("MimeTypeHtmlTemplate")
                        .HasForeignKey("Domain.MimeTypeHtmlTemplate", "MimeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MIMETYPE_TPL_MT");

                    b.Navigation("MimeType");
                });

            modelBuilder.Entity("Domain.MrpEvent", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("MrpEvents")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("MRPEV_FAC");

                    b.HasOne("Domain.MrpEventType", "MrpEventType")
                        .WithMany("MrpEvents")
                        .HasForeignKey("MrpEventTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MRPEV_TYP");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("MrpEvents")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("MRPEV_PROD");

                    b.Navigation("Facility");

                    b.Navigation("MrpEventType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.NoteDatum", b =>
                {
                    b.HasOne("Domain.Party", "NotePartyNavigation")
                        .WithMany("NoteData")
                        .HasForeignKey("NoteParty")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("NOTE_DATA_PTY");

                    b.Navigation("NotePartyNavigation");
                });

            modelBuilder.Entity("Domain.OrderAdjustment", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("OrderAdjustments")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ADJ_USERL");

                    b.HasOne("Domain.OrderAdjustmentType", "OrderAdjustmentType")
                        .WithMany("OrderAdjustments")
                        .HasForeignKey("OrderAdjustmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ADJ_TYPE");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderAdjustments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ADJ_OHEAD");

                    b.HasOne("Domain.GlAccount", "OverrideGlAccount")
                        .WithMany("OrderAdjustments")
                        .HasForeignKey("OverrideGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ADJ_OGLA");

                    b.HasOne("Domain.Geo", "PrimaryGeo")
                        .WithMany("OrderAdjustmentPrimaryGeos")
                        .HasForeignKey("PrimaryGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ADJ_PRGEO");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("OrderAdjustments")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ADJ_PROMO");

                    b.HasOne("Domain.Geo", "SecondaryGeo")
                        .WithMany("OrderAdjustmentSecondaryGeos")
                        .HasForeignKey("SecondaryGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ADJ_SCGEO");

                    b.HasOne("Domain.TaxAuthorityRateProduct", "TaxAuthorityRateSeq")
                        .WithMany("OrderAdjustments")
                        .HasForeignKey("TaxAuthorityRateSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ADJ_TARP");

                    b.HasOne("Domain.TaxAuthority", "TaxAuth")
                        .WithMany("OrderAdjustments")
                        .HasForeignKey("TaxAuthGeoId", "TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ADJ_TXA");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("Order");

                    b.Navigation("OrderAdjustmentType");

                    b.Navigation("OverrideGlAccount");

                    b.Navigation("PrimaryGeo");

                    b.Navigation("ProductPromo");

                    b.Navigation("SecondaryGeo");

                    b.Navigation("TaxAuth");

                    b.Navigation("TaxAuthorityRateSeq");
                });

            modelBuilder.Entity("Domain.OrderAdjustmentAttribute", b =>
                {
                    b.HasOne("Domain.OrderAdjustment", "OrderAdjustment")
                        .WithMany("OrderAdjustmentAttributes")
                        .HasForeignKey("OrderAdjustmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ADJ_ATTR");

                    b.Navigation("OrderAdjustment");
                });

            modelBuilder.Entity("Domain.OrderAdjustmentBilling", b =>
                {
                    b.HasOne("Domain.OrderAdjustment", "OrderAdjustment")
                        .WithMany("OrderAdjustmentBillings")
                        .HasForeignKey("OrderAdjustmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ADJBLNG_OA");

                    b.HasOne("Domain.InvoiceItem", "InvoiceI")
                        .WithMany("OrderAdjustmentBillings")
                        .HasForeignKey("InvoiceId", "InvoiceItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ADJBLNG_IITM");

                    b.Navigation("InvoiceI");

                    b.Navigation("OrderAdjustment");
                });

            modelBuilder.Entity("Domain.OrderAdjustmentType", b =>
                {
                    b.HasOne("Domain.OrderAdjustmentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ADJ_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.OrderAdjustmentTypeAttr", b =>
                {
                    b.HasOne("Domain.OrderAdjustmentType", "OrderAdjustmentType")
                        .WithMany("OrderAdjustmentTypeAttrs")
                        .HasForeignKey("OrderAdjustmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ADJ_TYPATTR");

                    b.Navigation("OrderAdjustmentType");
                });

            modelBuilder.Entity("Domain.OrderAttribute", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderAttributes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ATTR_HDR");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.OrderBlacklist", b =>
                {
                    b.HasOne("Domain.OrderBlacklistType", "OrderBlacklistType")
                        .WithMany("OrderBlacklists")
                        .HasForeignKey("OrderBlacklistTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_BKL_TYPE");

                    b.Navigation("OrderBlacklistType");
                });

            modelBuilder.Entity("Domain.OrderContactMech", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("OrderContactMeches")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_CMECH_CM");

                    b.HasOne("Domain.ContactMechPurposeType", "ContactMechPurposeType")
                        .WithMany("OrderContactMeches")
                        .HasForeignKey("ContactMechPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_CMECH_CMPT");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderContactMeches")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_CMECH_HDR");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechPurposeType");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.OrderContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("OrderContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORD_CNT_CNT");

                    b.HasOne("Domain.OrderContentType", "OrderContentType")
                        .WithMany("OrderContents")
                        .HasForeignKey("OrderContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORD_CNT_TYPE");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderContents")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORD_CNT_PROD");

                    b.Navigation("Content");

                    b.Navigation("Order");

                    b.Navigation("OrderContentType");
                });

            modelBuilder.Entity("Domain.OrderContentType", b =>
                {
                    b.HasOne("Domain.OrderContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDCT_TYP_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.OrderDeliverySchedule", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderDeliverySchedules")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_DELSCH_OHDR");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("OrderDeliverySchedules")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_DELSCH_STTS");

                    b.HasOne("Domain.Uom", "TotalCubicUom")
                        .WithMany("OrderDeliveryScheduleTotalCubicUoms")
                        .HasForeignKey("TotalCubicUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_DELSCH_TCUOM");

                    b.HasOne("Domain.Uom", "TotalWeightUom")
                        .WithMany("OrderDeliveryScheduleTotalWeightUoms")
                        .HasForeignKey("TotalWeightUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_DELSCH_TWUOM");

                    b.Navigation("Order");

                    b.Navigation("Status");

                    b.Navigation("TotalCubicUom");

                    b.Navigation("TotalWeightUom");
                });

            modelBuilder.Entity("Domain.OrderDenylist", b =>
                {
                    b.HasOne("Domain.OrderDenylistType", "OrderDenylistType")
                        .WithMany("OrderDenylists")
                        .HasForeignKey("OrderDenylistTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_DNY_TYPE");

                    b.Navigation("OrderDenylistType");
                });

            modelBuilder.Entity("Domain.OrderHeader", b =>
                {
                    b.HasOne("Domain.ShoppingList", "AutoOrderShoppingList")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("AutoOrderShoppingListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_AOSHLST");

                    b.HasOne("Domain.BillingAccount", "BillingAccount")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_BACCT");

                    b.HasOne("Domain.UserLogin", "CreatedByNavigation")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_CBUL");

                    b.HasOne("Domain.Uom", "CurrencyUomNavigation")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("CurrencyUom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_CUOM");

                    b.HasOne("Domain.OrderType", "OrderType")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_TYPE");

                    b.HasOne("Domain.Facility", "OriginFacility")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("OriginFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_OFAC");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_PDSTR");

                    b.HasOne("Domain.Enumeration", "SalesChannelEnum")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("SalesChannelEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_SCENUM");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("OrderHeaderStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_STTS");

                    b.HasOne("Domain.StatusItem", "SyncStatus")
                        .WithMany("OrderHeaderSyncStatuses")
                        .HasForeignKey("SyncStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_SYST");

                    b.HasOne("Domain.Vehicle", "Vehicle")
                        .WithMany("Orders")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_VEHICLE");

                    b.HasOne("Domain.WebSite", "WebSite")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_HDR_WS");

                    b.Navigation("AutoOrderShoppingList");

                    b.Navigation("BillingAccount");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("CurrencyUomNavigation");

                    b.Navigation("OrderType");

                    b.Navigation("OriginFacility");

                    b.Navigation("ProductStore");

                    b.Navigation("SalesChannelEnum");

                    b.Navigation("Status");

                    b.Navigation("SyncStatus");

                    b.Navigation("Vehicle");

                    b.Navigation("WebSite");
                });

            modelBuilder.Entity("Domain.OrderHeaderNote", b =>
                {
                    b.HasOne("Domain.NoteDatum", "Note")
                        .WithMany("OrderHeaderNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_HDRNT_NOTE");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderHeaderNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_HDRNT_HDR");

                    b.Navigation("Note");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.OrderHeaderWorkEffort", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderHeaderWorkEfforts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDERHDWE_OH");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("OrderHeaderWorkEfforts")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDERHDWE_WEFF");

                    b.Navigation("Order");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.OrderItem", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("OrderItemChangeByUserLogins")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_USRLGN");

                    b.HasOne("Domain.UserLogin", "DontCancelSetUserLoginNavigation")
                        .WithMany("OrderItemDontCancelSetUserLoginNavigations")
                        .HasForeignKey("DontCancelSetUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_DCUL");

                    b.HasOne("Domain.InventoryItem", "FromInventoryItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("FromInventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_FMINV");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITEM_HDR");

                    b.HasOne("Domain.OrderItemType", "OrderItemType")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_ORTYP");

                    b.HasOne("Domain.GlAccount", "OverrideGlAccount")
                        .WithMany("OrderItems")
                        .HasForeignKey("OverrideGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_OGLA");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_PRODUCT");

                    b.HasOne("Domain.Uom", "RecurringFreqUom")
                        .WithMany("OrderItems")
                        .HasForeignKey("RecurringFreqUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_RFUOM");

                    b.HasOne("Domain.SalesOpportunity", "SalesOpportunity")
                        .WithMany("OrderItems")
                        .HasForeignKey("SalesOpportunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_SLSOPP");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("OrderItemStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_STTS");

                    b.HasOne("Domain.StatusItem", "SyncStatus")
                        .WithMany("OrderItemSyncStatuses")
                        .HasForeignKey("SyncStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_SYST");

                    b.HasOne("Domain.OrderItemGroup", "OrderI")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId", "OrderItemGroupSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_ITGRP");

                    b.HasOne("Domain.QuoteItem", "QuoteI")
                        .WithMany("OrderItems")
                        .HasForeignKey("QuoteId", "QuoteItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_QUIT");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("DontCancelSetUserLoginNavigation");

                    b.Navigation("FromInventoryItem");

                    b.Navigation("Order");

                    b.Navigation("OrderI");

                    b.Navigation("OrderItemType");

                    b.Navigation("OverrideGlAccount");

                    b.Navigation("Product");

                    b.Navigation("QuoteI");

                    b.Navigation("RecurringFreqUom");

                    b.Navigation("SalesOpportunity");

                    b.Navigation("Status");

                    b.Navigation("SyncStatus");
                });

            modelBuilder.Entity("Domain.OrderItemAssoc", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderItemAssocOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITASS_FRHD");

                    b.HasOne("Domain.OrderItemAssocType", "OrderItemAssocType")
                        .WithMany("OrderItemAssocs")
                        .HasForeignKey("OrderItemAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITASS_TYPE");

                    b.HasOne("Domain.OrderHeader", "ToOrder")
                        .WithMany("OrderItemAssocToOrders")
                        .HasForeignKey("ToOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITASS_TOHD");

                    b.Navigation("Order");

                    b.Navigation("OrderItemAssocType");

                    b.Navigation("ToOrder");
                });

            modelBuilder.Entity("Domain.OrderItemAssocType", b =>
                {
                    b.HasOne("Domain.OrderItemAssocType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITAS_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.OrderItemAttribute", b =>
                {
                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("OrderItemAttributes")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITEM_ATTR");

                    b.Navigation("OrderI");
                });

            modelBuilder.Entity("Domain.OrderItemBilling", b =>
                {
                    b.HasOne("Domain.ItemIssuance", "ItemIssuance")
                        .WithMany("OrderItemBillings")
                        .HasForeignKey("ItemIssuanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITBLNG_IISS");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderItemBillings")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITBLNG_OHDR");

                    b.HasOne("Domain.ShipmentReceipt", "ShipmentReceipt")
                        .WithMany("OrderItemBillings")
                        .HasForeignKey("ShipmentReceiptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITBL_SHIPRCP");

                    b.HasOne("Domain.InvoiceItem", "InvoiceI")
                        .WithMany("OrderItemBillings")
                        .HasForeignKey("InvoiceId", "InvoiceItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITBLNG_IITM");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("OrderItemBillings")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITBLNG_OITM");

                    b.Navigation("InvoiceI");

                    b.Navigation("ItemIssuance");

                    b.Navigation("Order");

                    b.Navigation("OrderI");

                    b.Navigation("ShipmentReceipt");
                });

            modelBuilder.Entity("Domain.OrderItemChange", b =>
                {
                    b.HasOne("Domain.Enumeration", "ChangeTypeEnum")
                        .WithMany("OrderItemChangeChangeTypeEnums")
                        .HasForeignKey("ChangeTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITCH_TYPE");

                    b.HasOne("Domain.UserLogin", "ChangeUserLoginNavigation")
                        .WithMany("OrderItemChanges")
                        .HasForeignKey("ChangeUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITCH_USER");

                    b.HasOne("Domain.Enumeration", "ReasonEnum")
                        .WithMany("OrderItemChangeReasonEnums")
                        .HasForeignKey("ReasonEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITCH_REAS");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("OrderItemChanges")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITCH_OITM");

                    b.Navigation("ChangeTypeEnum");

                    b.Navigation("ChangeUserLoginNavigation");

                    b.Navigation("OrderI");

                    b.Navigation("ReasonEnum");
                });

            modelBuilder.Entity("Domain.OrderItemContactMech", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("OrderItemContactMeches")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITCM_CMECH");

                    b.HasOne("Domain.ContactMechPurposeType", "ContactMechPurposeType")
                        .WithMany("OrderItemContactMeches")
                        .HasForeignKey("ContactMechPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITCM_CMPT");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("OrderItemContactMeches")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITCM_OITM");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechPurposeType");

                    b.Navigation("OrderI");
                });

            modelBuilder.Entity("Domain.OrderItemGroup", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderItemGroups")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDERITMGRP_HDR");

                    b.HasOne("Domain.OrderItemGroup", "OrderItemGroupNavigation")
                        .WithMany("InverseOrderItemGroupNavigation")
                        .HasForeignKey("OrderId", "ParentGroupSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDERITMGRP_PGRP");

                    b.Navigation("Order");

                    b.Navigation("OrderItemGroupNavigation");
                });

            modelBuilder.Entity("Domain.OrderItemGroupOrder", b =>
                {
                    b.HasOne("Domain.ProductGroupOrder", "GroupOrder")
                        .WithMany("OrderItemGroupOrders")
                        .HasForeignKey("GroupOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("OIGO_GROUP_ORDER");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("OrderItemGroupOrders")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("OIGO_ORDER_ITEM");

                    b.Navigation("GroupOrder");

                    b.Navigation("OrderI");
                });

            modelBuilder.Entity("Domain.OrderItemPriceInfo", b =>
                {
                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("OrderItemPriceInfos")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_OIPI_OITM");

                    b.HasOne("Domain.ProductPriceAction", "ProductPrice")
                        .WithMany("OrderItemPriceInfos")
                        .HasForeignKey("ProductPriceRuleId", "ProductPriceActionSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_OIPI_PRAI");

                    b.Navigation("OrderI");

                    b.Navigation("ProductPrice");
                });

            modelBuilder.Entity("Domain.OrderItemRole", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderItemRoles")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITRL_OHDR");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("OrderItemRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITRL_PARTY");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("OrderItemRoles")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITRL_OITM");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("OrderItemRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITRL_PTRLE");

                    b.Navigation("Order");

                    b.Navigation("OrderI");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.OrderItemShipGroup", b =>
                {
                    b.HasOne("Domain.Party", "CarrierParty")
                        .WithMany("OrderItemShipGroupCarrierParties")
                        .HasForeignKey("CarrierPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_CPRTY");

                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("OrderItemShipGroupContactMeches")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_CNTM");

                    b.HasOne("Domain.PostalAddress", "ContactMechNavigation")
                        .WithMany("OrderItemShipGroups")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_PADR");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("OrderItemShipGroups")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_FAC");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderItemShipGroups")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITSG_ORDH");

                    b.HasOne("Domain.ShipmentMethodType", "ShipmentMethodType")
                        .WithMany("OrderItemShipGroups")
                        .HasForeignKey("ShipmentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_SHMTP");

                    b.HasOne("Domain.Agreement", "SupplierAgreement")
                        .WithMany("OrderItemShipGroups")
                        .HasForeignKey("SupplierAgreementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_SAGR");

                    b.HasOne("Domain.Party", "SupplierParty")
                        .WithMany("OrderItemShipGroupSupplierParties")
                        .HasForeignKey("SupplierPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_SPRTY");

                    b.HasOne("Domain.ContactMech", "TelecomContactMech")
                        .WithMany("OrderItemShipGroupTelecomContactMeches")
                        .HasForeignKey("TelecomContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_TCNT");

                    b.HasOne("Domain.TelecomNumber", "TelecomContactMechNavigation")
                        .WithMany("OrderItemShipGroups")
                        .HasForeignKey("TelecomContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_TCNB");

                    b.HasOne("Domain.Party", "VendorParty")
                        .WithMany("OrderItemShipGroupVendorParties")
                        .HasForeignKey("VendorPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_VPRTY");

                    b.HasOne("Domain.PartyRole", "Carrier")
                        .WithMany("OrderItemShipGroups")
                        .HasForeignKey("CarrierPartyId", "CarrierRoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_CPRLE");

                    b.HasOne("Domain.CarrierShipmentMethod", "CarrierShipmentMethod")
                        .WithMany("OrderItemShipGroups")
                        .HasForeignKey("ShipmentMethodTypeId", "CarrierPartyId", "CarrierRoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITSG_CSHM");

                    b.Navigation("Carrier");

                    b.Navigation("CarrierParty");

                    b.Navigation("CarrierShipmentMethod");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechNavigation");

                    b.Navigation("Facility");

                    b.Navigation("Order");

                    b.Navigation("ShipmentMethodType");

                    b.Navigation("SupplierAgreement");

                    b.Navigation("SupplierParty");

                    b.Navigation("TelecomContactMech");

                    b.Navigation("TelecomContactMechNavigation");

                    b.Navigation("VendorParty");
                });

            modelBuilder.Entity("Domain.OrderItemShipGroupAssoc", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderItemShipGroupAssocs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ISGA_ORDH");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("OrderItemShipGroupAssocs")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ISGA_ORDI");

                    b.HasOne("Domain.OrderItemShipGroup", "OrderItemShipGroup")
                        .WithMany("OrderItemShipGroupAssocs")
                        .HasForeignKey("OrderId", "ShipGroupSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ISGA_OISG");

                    b.Navigation("Order");

                    b.Navigation("OrderI");

                    b.Navigation("OrderItemShipGroup");
                });

            modelBuilder.Entity("Domain.OrderItemShipGrpInvRes", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("OrderItemShipGrpInvRes")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITIR_INVITM");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("OrderItemShipGrpInvRes")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITIR_OITM");

                    b.Navigation("InventoryItem");

                    b.Navigation("OrderI");
                });

            modelBuilder.Entity("Domain.OrderItemType", b =>
                {
                    b.HasOne("Domain.OrderItemType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_ITEM_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.OrderItemTypeAttr", b =>
                {
                    b.HasOne("Domain.OrderItemType", "OrderItemType")
                        .WithMany("OrderItemTypeAttrs")
                        .HasForeignKey("OrderItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ITEM_TYPATR");

                    b.Navigation("OrderItemType");
                });

            modelBuilder.Entity("Domain.OrderNotification", b =>
                {
                    b.HasOne("Domain.Enumeration", "EmailTypeNavigation")
                        .WithMany("OrderNotifications")
                        .HasForeignKey("EmailType")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORD_NOTIFY_ENUM");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderNotifications")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORD_NOTIFY_ORDHDR");

                    b.Navigation("EmailTypeNavigation");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.OrderPaymentPreference", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("OrderPaymentPreferences")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_PMPRF_USRL");

                    b.HasOne("Domain.FinAccount", "FinAccount")
                        .WithMany("OrderPaymentPreferences")
                        .HasForeignKey("FinAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_PMPRF_FINACT");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderPaymentPreferences")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_PMPRF_OHDR");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithMany("OrderPaymentPreferences")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_PMPRF_PMETH");

                    b.HasOne("Domain.PaymentMethodType", "PaymentMethodType")
                        .WithMany("OrderPaymentPreferences")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_PMPRF_PMTP");

                    b.HasOne("Domain.ProductPricePurpose", "ProductPricePurpose")
                        .WithMany("OrderPaymentPreferences")
                        .HasForeignKey("ProductPricePurposeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_PMPRF_PPRP");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("OrderPaymentPreferences")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_PMPRF_STTS");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("FinAccount");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentMethodType");

                    b.Navigation("ProductPricePurpose");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.OrderProductPromoCode", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderProductPromoCodes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_PPCD_ORD");

                    b.HasOne("Domain.ProductPromoCode", "ProductPromoCode")
                        .WithMany("OrderProductPromoCodes")
                        .HasForeignKey("ProductPromoCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_PPCD_PPC");

                    b.Navigation("Order");

                    b.Navigation("ProductPromoCode");
                });

            modelBuilder.Entity("Domain.OrderRequirementCommitment", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderRequirementCommitments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDREQ_CMT_ORD");

                    b.HasOne("Domain.Requirement", "Requirement")
                        .WithMany("OrderRequirementCommitments")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDREQ_CMT_REQ");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("OrderRequirementCommitments")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDREQ_CMT_OITM");

                    b.Navigation("Order");

                    b.Navigation("OrderI");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Domain.OrderRole", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderRoles")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ROLE_OHDR");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("OrderRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ROLE_PARTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("OrderRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_ROLE_PROLE");

                    b.Navigation("Order");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.OrderShipment", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderShipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_SHPMT_OHDR");

                    b.HasOne("Domain.Shipment", "Shipment")
                        .WithMany("OrderShipments")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_SHPMT_SHPMT");

                    b.Navigation("Order");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Domain.OrderStatus", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_STTS_OHDR");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_STTS_STTS");

                    b.HasOne("Domain.UserLogin", "StatusUserLoginNavigation")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("StatusUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_STTS_USER");

                    b.Navigation("Order");

                    b.Navigation("Status");

                    b.Navigation("StatusUserLoginNavigation");
                });

            modelBuilder.Entity("Domain.OrderSummaryEntry", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("OrderSummaryEntries")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_SMENT_FAC");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("OrderSummaryEntries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_SMENT_PROD");

                    b.Navigation("Facility");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.OrderTerm", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("OrderTerms")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_TERM_OHDR");

                    b.HasOne("Domain.TermType", "TermType")
                        .WithMany("OrderTerms")
                        .HasForeignKey("TermTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_TERM_TTYPE");

                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("OrderTerms")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_TERM_UOM");

                    b.Navigation("Order");

                    b.Navigation("TermType");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Domain.OrderTermAttribute", b =>
                {
                    b.HasOne("Domain.OrderTerm", "OrderTerm")
                        .WithMany("OrderTermAttributes")
                        .HasForeignKey("TermTypeId", "OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_TATTR_OTRM");

                    b.Navigation("OrderTerm");
                });

            modelBuilder.Entity("Domain.OrderType", b =>
                {
                    b.HasOne("Domain.OrderType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ORDER_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.OrderTypeAttr", b =>
                {
                    b.HasOne("Domain.OrderType", "OrderType")
                        .WithMany("OrderTypeAttrs")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ORDER_TPAT_ORTYP");

                    b.Navigation("OrderType");
                });

            modelBuilder.Entity("Domain.OtherDataResource", b =>
                {
                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithOne("OtherDataResource")
                        .HasForeignKey("Domain.OtherDataResource", "DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_REC_OTHER");

                    b.Navigation("DataResource");
                });

            modelBuilder.Entity("Domain.Party", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("PartyCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_CUL");

                    b.HasOne("Domain.DataSource", "DataSource")
                        .WithMany("Parties")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_DATSRC");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("PartyLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_LMCUL");

                    b.HasOne("Domain.PartyType", "PartyType")
                        .WithMany("Parties")
                        .HasForeignKey("PartyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_PTY_TYP");

                    b.HasOne("Domain.Uom", "PreferredCurrencyUom")
                        .WithMany("Parties")
                        .HasForeignKey("PreferredCurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_PREF_CRNCY");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("Parties")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_STATUSITM");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("DataSource");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("PartyType");

                    b.Navigation("PreferredCurrencyUom");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.PartyAcctgPreference", b =>
                {
                    b.HasOne("Domain.Uom", "BaseCurrencyUom")
                        .WithMany("PartyAcctgPreferences")
                        .HasForeignKey("BaseCurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACCTGPREF_CURNCY");

                    b.HasOne("Domain.Enumeration", "CogsMethod")
                        .WithMany("PartyAcctgPreferenceCogsMethods")
                        .HasForeignKey("CogsMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACTGPREF_COGS");

                    b.HasOne("Domain.GlJournal", "ErrorGlJournal")
                        .WithMany("PartyAcctgPreferences")
                        .HasForeignKey("ErrorGlJournalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACTGPREF_GLJRNL");

                    b.HasOne("Domain.CustomMethod", "InvoiceSeqCustMeth")
                        .WithMany("PartyAcctgPreferenceInvoiceSeqCustMeths")
                        .HasForeignKey("InvoiceSeqCustMethId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACTGPREF_INVCM");

                    b.HasOne("Domain.Enumeration", "InvoiceSequenceEnum")
                        .WithMany("PartyAcctgPreferenceInvoiceSequenceEnums")
                        .HasForeignKey("InvoiceSequenceEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACTGPREF_INVSQ");

                    b.HasOne("Domain.CustomMethod", "OrderSeqCustMeth")
                        .WithMany("PartyAcctgPreferenceOrderSeqCustMeths")
                        .HasForeignKey("OrderSeqCustMethId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACTGPREF_ODRCM");

                    b.HasOne("Domain.Enumeration", "OrderSequenceEnum")
                        .WithMany("PartyAcctgPreferenceOrderSequenceEnums")
                        .HasForeignKey("OrderSequenceEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACTGPREF_ODRSQ");

                    b.HasOne("Domain.Party", "Party")
                        .WithOne("PartyAcctgPreference")
                        .HasForeignKey("Domain.PartyAcctgPreference", "PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ACTG_PREF_PTY");

                    b.HasOne("Domain.CustomMethod", "QuoteSeqCustMeth")
                        .WithMany("PartyAcctgPreferenceQuoteSeqCustMeths")
                        .HasForeignKey("QuoteSeqCustMethId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACTGPREF_QTECM");

                    b.HasOne("Domain.Enumeration", "QuoteSequenceEnum")
                        .WithMany("PartyAcctgPreferenceQuoteSequenceEnums")
                        .HasForeignKey("QuoteSequenceEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACTGPREF_QTESQ");

                    b.HasOne("Domain.PaymentMethod", "RefundPaymentMethod")
                        .WithMany("PartyAcctgPreferences")
                        .HasForeignKey("RefundPaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACTGPREF_PAYMTH");

                    b.HasOne("Domain.Enumeration", "TaxForm")
                        .WithMany("PartyAcctgPreferenceTaxForms")
                        .HasForeignKey("TaxFormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ACTGPREF_TAXFORM");

                    b.Navigation("BaseCurrencyUom");

                    b.Navigation("CogsMethod");

                    b.Navigation("ErrorGlJournal");

                    b.Navigation("InvoiceSeqCustMeth");

                    b.Navigation("InvoiceSequenceEnum");

                    b.Navigation("OrderSeqCustMeth");

                    b.Navigation("OrderSequenceEnum");

                    b.Navigation("Party");

                    b.Navigation("QuoteSeqCustMeth");

                    b.Navigation("QuoteSequenceEnum");

                    b.Navigation("RefundPaymentMethod");

                    b.Navigation("TaxForm");
                });

            modelBuilder.Entity("Domain.PartyAttribute", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyAttributes")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_ATTR");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.PartyBenefit", b =>
                {
                    b.HasOne("Domain.BenefitType", "BenefitType")
                        .WithMany("PartyBenefits")
                        .HasForeignKey("BenefitTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTY_BNFT_BNFTTP");

                    b.HasOne("Domain.Party", "PartyIdFromNavigation")
                        .WithMany("PartyBenefitPartyIdFromNavigations")
                        .HasForeignKey("PartyIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTY_BNFT_FPTY");

                    b.HasOne("Domain.Party", "PartyIdToNavigation")
                        .WithMany("PartyBenefitPartyIdToNavigations")
                        .HasForeignKey("PartyIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTY_BNFT_TPTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("PartyBenefitPartyRoles")
                        .HasForeignKey("PartyIdFrom", "RoleTypeIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTY_BNFT_FPTRL");

                    b.HasOne("Domain.PartyRole", "PartyRoleNavigation")
                        .WithMany("PartyBenefitPartyRoleNavigations")
                        .HasForeignKey("PartyIdTo", "RoleTypeIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTY_BNFT_TPTRL");

                    b.Navigation("BenefitType");

                    b.Navigation("PartyIdFromNavigation");

                    b.Navigation("PartyIdToNavigation");

                    b.Navigation("PartyRole");

                    b.Navigation("PartyRoleNavigation");
                });

            modelBuilder.Entity("Domain.PartyCarrierAccount", b =>
                {
                    b.HasOne("Domain.Party", "CarrierParty")
                        .WithMany("PartyCarrierAccountCarrierParties")
                        .HasForeignKey("CarrierPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CRRACT_CPT");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyCarrierAccountParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CRRACT_PTY");

                    b.Navigation("CarrierParty");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.PartyClassification", b =>
                {
                    b.HasOne("Domain.PartyClassificationGroup", "PartyClassificationGroup")
                        .WithMany("PartyClassifications")
                        .HasForeignKey("PartyClassificationGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CLASS_GRP");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyClassifications")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CLASS_PARTY");

                    b.Navigation("Party");

                    b.Navigation("PartyClassificationGroup");
                });

            modelBuilder.Entity("Domain.PartyClassificationGroup", b =>
                {
                    b.HasOne("Domain.PartyClassificationGroup", "ParentGroup")
                        .WithMany("InverseParentGroup")
                        .HasForeignKey("ParentGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_CLASS_GRPPAR");

                    b.HasOne("Domain.PartyClassificationType", "PartyClassificationType")
                        .WithMany("PartyClassificationGroups")
                        .HasForeignKey("PartyClassificationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_CLSGRP_TYPE");

                    b.Navigation("ParentGroup");

                    b.Navigation("PartyClassificationType");
                });

            modelBuilder.Entity("Domain.PartyClassificationType", b =>
                {
                    b.HasOne("Domain.PartyClassificationType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_CLASS_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PartyContactMech", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("PartyContactMeches")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CMECH_CMECH");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyContactMeches")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CMECH_PARTY");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("PartyContactMeches")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_CMECH_ROLE");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("PartyContactMeches")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_CMECH_PROLE");

                    b.Navigation("ContactMech");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("Domain.PartyContactMechPurpose", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("PartyContactMechPurposes")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CMPRP_CMECH");

                    b.HasOne("Domain.ContactMechPurposeType", "ContactMechPurposeType")
                        .WithMany("PartyContactMechPurposes")
                        .HasForeignKey("ContactMechPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CMPRP_TYPE");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyContactMechPurposes")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CMPRP_PARTY");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechPurposeType");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.PartyContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("PartyContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CNT_CNT");

                    b.HasOne("Domain.PartyContentType", "PartyContentType")
                        .WithMany("PartyContents")
                        .HasForeignKey("PartyContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CNT_TYPE");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyContents")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_CNT_PARTY");

                    b.Navigation("Content");

                    b.Navigation("Party");

                    b.Navigation("PartyContentType");
                });

            modelBuilder.Entity("Domain.PartyContentType", b =>
                {
                    b.HasOne("Domain.PartyContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTYCNT_TP_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PartyDataSource", b =>
                {
                    b.HasOne("Domain.DataSource", "DataSource")
                        .WithMany("PartyDataSources")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_DATSRC_DSC");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyDataSources")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_DATSRC_PTY");

                    b.Navigation("DataSource");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.PartyFixedAssetAssignment", b =>
                {
                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("PartyFixedAssetAssignments")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTY_FASTAS_FA");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("PartyFixedAssetAssignments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PTY_FASTAS_SI");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("PartyFixedAssetAssignments")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTY_FASTAS_PTRL");

                    b.Navigation("FixedAsset");

                    b.Navigation("PartyRole");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.PartyGeoPoint", b =>
                {
                    b.HasOne("Domain.GeoPoint", "GeoPoint")
                        .WithMany("PartyGeoPoints")
                        .HasForeignKey("GeoPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTYGEOPT_GEOPT");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyGeoPoints")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTYGEOPT_PARTY");

                    b.Navigation("GeoPoint");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.PartyGlAccount", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("PartyGlAccounts")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRTYGLACCT_GLACCT");

                    b.HasOne("Domain.GlAccountType", "GlAccountType")
                        .WithMany("PartyGlAccounts")
                        .HasForeignKey("GlAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRTYGLACCT_GLAT");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("PartyGlAccountOrganizationParties")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRTYGLACCT_ORGPRTY");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyGlAccountParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRTYGLACCT_PRTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("PartyGlAccounts")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRTYGLACCT_PTRL");

                    b.Navigation("GlAccount");

                    b.Navigation("GlAccountType");

                    b.Navigation("OrganizationParty");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.PartyGroup", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithOne("PartyGroup")
                        .HasForeignKey("Domain.PartyGroup", "PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_GRP_PARTY");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.PartyIcsAvsOverride", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithOne("PartyIcsAvsOverride")
                        .HasForeignKey("Domain.PartyIcsAvsOverride", "PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_ICSAVS_PARTY");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.PartyIdentification", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyIdentifications")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_ID_PRODUCT");

                    b.HasOne("Domain.PartyIdentificationType", "PartyIdentificationType")
                        .WithMany("PartyIdentifications")
                        .HasForeignKey("PartyIdentificationTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_ID_TYPE");

                    b.Navigation("Party");

                    b.Navigation("PartyIdentificationType");
                });

            modelBuilder.Entity("Domain.PartyIdentificationType", b =>
                {
                    b.HasOne("Domain.PartyIdentificationType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_ID_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PartyInvitation", b =>
                {
                    b.HasOne("Domain.Party", "PartyIdFromNavigation")
                        .WithMany("PartyInvitations")
                        .HasForeignKey("PartyIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PTYINV_PTY");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("PartyInvitations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PTYINV_STTS");

                    b.Navigation("PartyIdFromNavigation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.PartyInvitationGroupAssoc", b =>
                {
                    b.HasOne("Domain.Party", "PartyIdToNavigation")
                        .WithMany("PartyInvitationGroupAssocs")
                        .HasForeignKey("PartyIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTYINVGA_PTYTO");

                    b.HasOne("Domain.PartyGroup", "PartyIdTo1")
                        .WithMany("PartyInvitationGroupAssocs")
                        .HasForeignKey("PartyIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTYINVGA_PTYGRP");

                    b.HasOne("Domain.PartyInvitation", "PartyInvitation")
                        .WithMany("PartyInvitationGroupAssocs")
                        .HasForeignKey("PartyInvitationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTYINVGA_PTYINV");

                    b.Navigation("PartyIdTo1");

                    b.Navigation("PartyIdToNavigation");

                    b.Navigation("PartyInvitation");
                });

            modelBuilder.Entity("Domain.PartyInvitationRoleAssoc", b =>
                {
                    b.HasOne("Domain.PartyInvitation", "PartyInvitation")
                        .WithMany("PartyInvitationRoleAssocs")
                        .HasForeignKey("PartyInvitationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTYINVROLE_PTYINV");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("PartyInvitationRoleAssocs")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTYINVROLE_ROLET");

                    b.Navigation("PartyInvitation");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("Domain.PartyNameHistory", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyNameHistories")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTY_NMHIS_PARTY");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.PartyNeed", b =>
                {
                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("PartyNeeds")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_NEED_CMEV");

                    b.HasOne("Domain.NeedType", "NeedType")
                        .WithMany("PartyNeeds")
                        .HasForeignKey("NeedTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_NEED_NDTP");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyNeeds")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_NEED_PTY");

                    b.HasOne("Domain.PartyType", "PartyType")
                        .WithMany("PartyNeeds")
                        .HasForeignKey("PartyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_NEED_PTTP");

                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("PartyNeeds")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_NEED_PCAT");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("PartyNeeds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_NEED_PROD");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("PartyNeeds")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_NEED_RTYP");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("NeedType");

                    b.Navigation("Party");

                    b.Navigation("PartyType");

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("Domain.PartyNote", b =>
                {
                    b.HasOne("Domain.NoteDatum", "Note")
                        .WithMany("PartyNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_NOTE_NOTE");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyNotes")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_NOTE_PARTY");

                    b.Navigation("Note");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.PartyPrefDocTypeTpl", b =>
                {
                    b.HasOne("Domain.InvoiceType", "InvoiceType")
                        .WithMany("PartyPrefDocTypeTpls")
                        .HasForeignKey("InvoiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAPDTT_TO_INVT");

                    b.HasOne("Domain.OrderType", "OrderType")
                        .WithMany("PartyPrefDocTypeTpls")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAPDTT_TO_ORDT");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyPrefDocTypeTpls")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAPDTT_TO_PTY");

                    b.HasOne("Domain.PartyAcctgPreference", "PartyNavigation")
                        .WithMany("PartyPrefDocTypeTpls")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAPDTT_TO_PAP");

                    b.HasOne("Domain.QuoteType", "QuoteType")
                        .WithMany("PartyPrefDocTypeTpls")
                        .HasForeignKey("QuoteTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAPDTT_TO_QUOT");

                    b.Navigation("InvoiceType");

                    b.Navigation("OrderType");

                    b.Navigation("Party");

                    b.Navigation("PartyNavigation");

                    b.Navigation("QuoteType");
                });

            modelBuilder.Entity("Domain.PartyProfileDefault", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyProfileDefaults")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_PROF_PARTY");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("PartyProfileDefaults")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_PROF_PSTORE");

                    b.Navigation("Party");

                    b.Navigation("ProductStore");
                });

            modelBuilder.Entity("Domain.PartyQual", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyQuals")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_QUAL_PRTY");

                    b.HasOne("Domain.PartyQualType", "PartyQualType")
                        .WithMany("PartyQuals")
                        .HasForeignKey("PartyQualTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_QUAL_PQTYP");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("PartyQualStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_QUAL_STATUS");

                    b.HasOne("Domain.StatusItem", "VerifStatus")
                        .WithMany("PartyQualVerifStatuses")
                        .HasForeignKey("VerifStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_QUAL_VERIF");

                    b.Navigation("Party");

                    b.Navigation("PartyQualType");

                    b.Navigation("Status");

                    b.Navigation("VerifStatus");
                });

            modelBuilder.Entity("Domain.PartyQualType", b =>
                {
                    b.HasOne("Domain.PartyQualType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_QUAL_TPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PartyRateNew", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyRateNews")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRTY_RATE_PRTY");

                    b.HasOne("Domain.RateType", "RateType")
                        .WithMany("PartyRateNews")
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRTY_RATE_RTTP");

                    b.Navigation("Party");

                    b.Navigation("RateType");
                });

            modelBuilder.Entity("Domain.PartyRelationship", b =>
                {
                    b.HasOne("Domain.PartyRelationshipType", "PartyRelationshipType")
                        .WithMany("PartyRelationships")
                        .HasForeignKey("PartyRelationshipTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_REL_TYPE");

                    b.HasOne("Domain.PriorityType", "PriorityType")
                        .WithMany("PartyRelationships")
                        .HasForeignKey("PriorityTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_REL_PRTYP");

                    b.HasOne("Domain.SecurityGroup", "SecurityGroup")
                        .WithMany("PartyRelationships")
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_REL_SECGRP");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("PartyRelationships")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_REL_STTS");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("PartyRelationshipPartyRoles")
                        .HasForeignKey("PartyIdFrom", "RoleTypeIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_REL_FPROLE");

                    b.HasOne("Domain.PartyRole", "PartyRoleNavigation")
                        .WithMany("PartyRelationshipPartyRoleNavigations")
                        .HasForeignKey("PartyIdTo", "RoleTypeIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_REL_TPROLE");

                    b.Navigation("PartyRelationshipType");

                    b.Navigation("PartyRole");

                    b.Navigation("PartyRoleNavigation");

                    b.Navigation("PriorityType");

                    b.Navigation("SecurityGroup");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.PartyRelationshipType", b =>
                {
                    b.HasOne("Domain.PartyRelationshipType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_RELTYP_PAR");

                    b.HasOne("Domain.RoleType", "RoleTypeIdValidFromNavigation")
                        .WithMany("PartyRelationshipTypeRoleTypeIdValidFromNavigations")
                        .HasForeignKey("RoleTypeIdValidFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_RELTYP_VFRT");

                    b.HasOne("Domain.RoleType", "RoleTypeIdValidToNavigation")
                        .WithMany("PartyRelationshipTypeRoleTypeIdValidToNavigations")
                        .HasForeignKey("RoleTypeIdValidTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_RELTYP_VTRT");

                    b.Navigation("ParentType");

                    b.Navigation("RoleTypeIdValidFromNavigation");

                    b.Navigation("RoleTypeIdValidToNavigation");
                });

            modelBuilder.Entity("Domain.PartyResume", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyResumes")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_RSME_PRTY");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.PartyRole", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_RLE_PARTY");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("PartyRoles")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_RLE_ROLE");

                    b.Navigation("Party");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("Domain.PartySkill", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartySkills")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_SKLL_PRTY");

                    b.HasOne("Domain.SkillType", "SkillType")
                        .WithMany("PartySkills")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_SKLL_SKTP");

                    b.Navigation("Party");

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("Domain.PartyStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("PartyStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_STTS_USRLGN");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyStatuses")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_STS_PARTY");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("PartyStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_STS_STSITM");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("Party");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.PartyTaxAuthInfo", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PartyTaxAuthInfos")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_TXAI_PTY");

                    b.HasOne("Domain.TaxAuthority", "TaxAuth")
                        .WithMany("PartyTaxAuthInfos")
                        .HasForeignKey("TaxAuthGeoId", "TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_TXAI_TXA");

                    b.Navigation("Party");

                    b.Navigation("TaxAuth");
                });

            modelBuilder.Entity("Domain.PartyType", b =>
                {
                    b.HasOne("Domain.PartyType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARTY_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PartyTypeAttr", b =>
                {
                    b.HasOne("Domain.PartyType", "PartyType")
                        .WithMany("PartyTypeAttrs")
                        .HasForeignKey("PartyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PARTY_TYP_ATTR");

                    b.Navigation("PartyType");
                });

            modelBuilder.Entity("Domain.PayHistory", b =>
                {
                    b.HasOne("Domain.PayGrade", "PayGrade")
                        .WithMany("PayHistories")
                        .HasForeignKey("PayGradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAY_HIST_PGRD");

                    b.HasOne("Domain.PeriodType", "PeriodType")
                        .WithMany("PayHistories")
                        .HasForeignKey("PeriodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAY_HIST_PDTP");

                    b.HasOne("Domain.Employment", "Employment")
                        .WithMany("PayHistories")
                        .HasForeignKey("RoleTypeIdFrom", "RoleTypeIdTo", "PartyIdFrom", "PartyIdTo", "EmplFromDate")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAY_HIST_EMPLMNT");

                    b.Navigation("Employment");

                    b.Navigation("PayGrade");

                    b.Navigation("PeriodType");
                });

            modelBuilder.Entity("Domain.PayPalPaymentMethod", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("PayPalPaymentMethods")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYPAL_CMECH");

                    b.HasOne("Domain.PostalAddress", "ContactMechNavigation")
                        .WithMany("PayPalPaymentMethods")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYPAL_PADDR");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithOne("PayPalPaymentMethod")
                        .HasForeignKey("Domain.PayPalPaymentMethod", "PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYPAL_PMNTMETH");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechNavigation");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Payment", b =>
                {
                    b.HasOne("Domain.Uom", "ActualCurrencyUom")
                        .WithMany("PaymentActualCurrencyUoms")
                        .HasForeignKey("ActualCurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_ACUOM");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("PaymentCurrencyUoms")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_CUOM");

                    b.HasOne("Domain.FinAccountTran", "FinAccountTransNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("FinAccountTransId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_FACTX");

                    b.HasOne("Domain.GlAccount", "OverrideGlAccount")
                        .WithMany("Payments")
                        .HasForeignKey("OverrideGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_ORGLA");

                    b.HasOne("Domain.Party", "PartyIdFromNavigation")
                        .WithMany("PaymentPartyIdFromNavigations")
                        .HasForeignKey("PartyIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_FPTY");

                    b.HasOne("Domain.Party", "PartyIdToNavigation")
                        .WithMany("PaymentPartyIdToNavigations")
                        .HasForeignKey("PartyIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_TPTY");

                    b.HasOne("Domain.PaymentGatewayResponse", "PaymentGatewayResponse")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentGatewayResponseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_PAYGATR");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_PMETH");

                    b.HasOne("Domain.PaymentMethodType", "PaymentMethodType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_PMETH_TP");

                    b.HasOne("Domain.OrderPaymentPreference", "PaymentPreference")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentPreferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_ORDPMPRF");

                    b.HasOne("Domain.PaymentType", "PaymentType")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_PMTYP");

                    b.HasOne("Domain.RoleType", "RoleTypeIdToNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("RoleTypeIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_TRTP");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("Payments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_STTSITM");

                    b.Navigation("ActualCurrencyUom");

                    b.Navigation("CurrencyUom");

                    b.Navigation("FinAccountTransNavigation");

                    b.Navigation("OverrideGlAccount");

                    b.Navigation("PartyIdFromNavigation");

                    b.Navigation("PartyIdToNavigation");

                    b.Navigation("PaymentGatewayResponse");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentMethodType");

                    b.Navigation("PaymentPreference");

                    b.Navigation("PaymentType");

                    b.Navigation("RoleTypeIdToNavigation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.PaymentApplication", b =>
                {
                    b.HasOne("Domain.BillingAccount", "BillingAccount")
                        .WithMany("PaymentApplications")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_APP_BACT");

                    b.HasOne("Domain.Invoice", "Invoice")
                        .WithMany("PaymentApplications")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_APP_INV");

                    b.HasOne("Domain.GlAccount", "OverrideGlAccount")
                        .WithMany("PaymentApplications")
                        .HasForeignKey("OverrideGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_APP_ORGLA");

                    b.HasOne("Domain.Payment", "Payment")
                        .WithMany("PaymentApplicationPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_APP_PMT");

                    b.HasOne("Domain.Geo", "TaxAuthGeo")
                        .WithMany("PaymentApplications")
                        .HasForeignKey("TaxAuthGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_APP_GEO");

                    b.HasOne("Domain.Payment", "ToPayment")
                        .WithMany("PaymentApplicationToPayments")
                        .HasForeignKey("ToPaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_APP_TPMT");

                    b.Navigation("BillingAccount");

                    b.Navigation("Invoice");

                    b.Navigation("OverrideGlAccount");

                    b.Navigation("Payment");

                    b.Navigation("TaxAuthGeo");

                    b.Navigation("ToPayment");
                });

            modelBuilder.Entity("Domain.PaymentAttribute", b =>
                {
                    b.HasOne("Domain.Payment", "Payment")
                        .WithMany("PaymentAttributes")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYMENT_ATTR");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.PaymentBudgetAllocation", b =>
                {
                    b.HasOne("Domain.Budget", "Budget")
                        .WithMany("PaymentBudgetAllocations")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYMENT_BA_BDGT");

                    b.HasOne("Domain.Payment", "Payment")
                        .WithMany("PaymentBudgetAllocations")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYMENT_BA_PMT");

                    b.Navigation("Budget");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.PaymentContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("PaymentContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYMENT_CNT_CNT");

                    b.HasOne("Domain.PaymentContentType", "PaymentContentType")
                        .WithMany("PaymentContents")
                        .HasForeignKey("PaymentContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYMENT_CNT_TYPE");

                    b.HasOne("Domain.Payment", "Payment")
                        .WithMany("PaymentContents")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYMENT_CNT_PROD");

                    b.Navigation("Content");

                    b.Navigation("Payment");

                    b.Navigation("PaymentContentType");
                });

            modelBuilder.Entity("Domain.PaymentContentType", b =>
                {
                    b.HasOne("Domain.PaymentContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYCT_TYP_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PaymentGatewayAuthorizeNet", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithOne("PaymentGatewayAuthorizeNet")
                        .HasForeignKey("Domain.PaymentGatewayAuthorizeNet", "PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PGAN_PGC");

                    b.Navigation("PaymentGatewayConfig");
                });

            modelBuilder.Entity("Domain.PaymentGatewayClearCommerce", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithOne("PaymentGatewayClearCommerce")
                        .HasForeignKey("Domain.PaymentGatewayClearCommerce", "PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PGCC_PGC");

                    b.Navigation("PaymentGatewayConfig");
                });

            modelBuilder.Entity("Domain.PaymentGatewayConfig", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfigType", "PaymentGatewayConfigType")
                        .WithMany("PaymentGatewayConfigs")
                        .HasForeignKey("PaymentGatewayConfigTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PGC_PGCT");

                    b.Navigation("PaymentGatewayConfigType");
                });

            modelBuilder.Entity("Domain.PaymentGatewayConfigType", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfigType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PGCT_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PaymentGatewayCyberSource", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithOne("PaymentGatewayCyberSource")
                        .HasForeignKey("Domain.PaymentGatewayCyberSource", "PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PGCS_PGC");

                    b.Navigation("PaymentGatewayConfig");
                });

            modelBuilder.Entity("Domain.PaymentGatewayEway", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithOne("PaymentGatewayEway")
                        .HasForeignKey("Domain.PaymentGatewayEway", "PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PGEW_PGC");

                    b.Navigation("PaymentGatewayConfig");
                });

            modelBuilder.Entity("Domain.PaymentGatewayOrbital", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithOne("PaymentGatewayOrbital")
                        .HasForeignKey("Domain.PaymentGatewayOrbital", "PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PGORB_PGC");

                    b.Navigation("PaymentGatewayConfig");
                });

            modelBuilder.Entity("Domain.PaymentGatewayPayPal", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithOne("PaymentGatewayPayPal")
                        .HasForeignKey("Domain.PaymentGatewayPayPal", "PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PGPP_PGC");

                    b.Navigation("PaymentGatewayConfig");
                });

            modelBuilder.Entity("Domain.PaymentGatewayPayflowPro", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithOne("PaymentGatewayPayflowPro")
                        .HasForeignKey("Domain.PaymentGatewayPayflowPro", "PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PGPF_PGC");

                    b.Navigation("PaymentGatewayConfig");
                });

            modelBuilder.Entity("Domain.PaymentGatewayRespMsg", b =>
                {
                    b.HasOne("Domain.PaymentGatewayResponse", "PaymentGatewayResponse")
                        .WithMany("PaymentGatewayRespMsgs")
                        .HasForeignKey("PaymentGatewayResponseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYGATRM_PAYGR");

                    b.Navigation("PaymentGatewayResponse");
                });

            modelBuilder.Entity("Domain.PaymentGatewayResponse", b =>
                {
                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("PaymentGatewayResponses")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYGATR_CUOM");

                    b.HasOne("Domain.OrderPaymentPreference", "OrderPaymentPreference")
                        .WithMany("PaymentGatewayResponses")
                        .HasForeignKey("OrderPaymentPreferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYGATR_ORDPMPRF");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentGatewayResponses")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYGATR_PMETH");

                    b.HasOne("Domain.PaymentMethodType", "PaymentMethodType")
                        .WithMany("PaymentGatewayResponses")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYGATR_PMTP");

                    b.HasOne("Domain.Enumeration", "PaymentServiceTypeEnum")
                        .WithMany("PaymentGatewayResponsePaymentServiceTypeEnums")
                        .HasForeignKey("PaymentServiceTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYGATR_PSTENUM");

                    b.HasOne("Domain.Enumeration", "TransCodeEnum")
                        .WithMany("PaymentGatewayResponseTransCodeEnums")
                        .HasForeignKey("TransCodeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYGATR_TXCODE");

                    b.Navigation("CurrencyUom");

                    b.Navigation("OrderPaymentPreference");

                    b.Navigation("PaymentMethod");

                    b.Navigation("PaymentMethodType");

                    b.Navigation("PaymentServiceTypeEnum");

                    b.Navigation("TransCodeEnum");
                });

            modelBuilder.Entity("Domain.PaymentGatewaySagePay", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithOne("PaymentGatewaySagePay")
                        .HasForeignKey("Domain.PaymentGatewaySagePay", "PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PGSP_PGC");

                    b.Navigation("PaymentGatewayConfig");
                });

            modelBuilder.Entity("Domain.PaymentGatewaySecurePay", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithOne("PaymentGatewaySecurePay")
                        .HasForeignKey("Domain.PaymentGatewaySecurePay", "PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PGSCP_PGC");

                    b.Navigation("PaymentGatewayConfig");
                });

            modelBuilder.Entity("Domain.PaymentGatewayWorldPay", b =>
                {
                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithOne("PaymentGatewayWorldPay")
                        .HasForeignKey("Domain.PaymentGatewayWorldPay", "PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PGWP_PGC");

                    b.Navigation("PaymentGatewayConfig");
                });

            modelBuilder.Entity("Domain.PaymentGlAccountTypeMap", b =>
                {
                    b.HasOne("Domain.GlAccountType", "GlAccountType")
                        .WithMany("PaymentGlAccountTypeMaps")
                        .HasForeignKey("GlAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PMTGLACCT_GLACCT");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("PaymentGlAccountTypeMaps")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PMTGLACCT_PARTY");

                    b.HasOne("Domain.PaymentType", "PaymentType")
                        .WithMany("PaymentGlAccountTypeMaps")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PMTGLACCT_PMTTYPE");

                    b.Navigation("GlAccountType");

                    b.Navigation("OrganizationParty");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Domain.PaymentGroup", b =>
                {
                    b.HasOne("Domain.PaymentGroupType", "PaymentGroupType")
                        .WithMany("PaymentGroups")
                        .HasForeignKey("PaymentGroupTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMNTGP_PGTYPE");

                    b.Navigation("PaymentGroupType");
                });

            modelBuilder.Entity("Domain.PaymentGroupMember", b =>
                {
                    b.HasOne("Domain.PaymentGroup", "PaymentGroup")
                        .WithMany("PaymentGroupMembers")
                        .HasForeignKey("PaymentGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYGRPMMBR_PG");

                    b.HasOne("Domain.Payment", "Payment")
                        .WithMany("PaymentGroupMembers")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYGRPMMBR_PAYMNT");

                    b.Navigation("Payment");

                    b.Navigation("PaymentGroup");
                });

            modelBuilder.Entity("Domain.PaymentGroupType", b =>
                {
                    b.HasOne("Domain.PaymentGroupType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMNTGP_TYP_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PaymentMethod", b =>
                {
                    b.HasOne("Domain.FinAccount", "FinAccount")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("FinAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMETH_FINACCT");

                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMETH_GLACCT");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMETH_PARTY");

                    b.HasOne("Domain.PaymentMethodType", "PaymentMethodType")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMETH_TYPE");

                    b.Navigation("FinAccount");

                    b.Navigation("GlAccount");

                    b.Navigation("Party");

                    b.Navigation("PaymentMethodType");
                });

            modelBuilder.Entity("Domain.PaymentMethodType", b =>
                {
                    b.HasOne("Domain.GlAccount", "DefaultGlAccount")
                        .WithMany("PaymentMethodTypes")
                        .HasForeignKey("DefaultGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_MTP_DGLAC");

                    b.Navigation("DefaultGlAccount");
                });

            modelBuilder.Entity("Domain.PaymentMethodTypeGlAccount", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("PaymentMethodTypeGlAccounts")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_MTGA_GLAC");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("PaymentMethodTypeGlAccounts")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYMENT_MTGA_OPTY");

                    b.HasOne("Domain.PaymentMethodType", "PaymentMethodType")
                        .WithMany("PaymentMethodTypeGlAccounts")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYMENT_MTGA_PMT");

                    b.Navigation("GlAccount");

                    b.Navigation("OrganizationParty");

                    b.Navigation("PaymentMethodType");
                });

            modelBuilder.Entity("Domain.PaymentType", b =>
                {
                    b.HasOne("Domain.PaymentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PAYMENT_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PaymentTypeAttr", b =>
                {
                    b.HasOne("Domain.PaymentType", "PaymentType")
                        .WithMany("PaymentTypeAttrs")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PAYMETH_TYPE_ATTR");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Domain.PayrollPreference", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PayrollPreferences")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRL_PREF_PRTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("PayrollPreferences")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRL_PREF_PTRL");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.PerfRatingType", b =>
                {
                    b.HasOne("Domain.PerfRatingType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PERF_RATNG_TYP");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PerfReview", b =>
                {
                    b.HasOne("Domain.Party", "EmployeeParty")
                        .WithMany("PerfReviewEmployeeParties")
                        .HasForeignKey("EmployeePartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PERF_REV_EPTY");

                    b.HasOne("Domain.Party", "ManagerParty")
                        .WithMany("PerfReviewManagerParties")
                        .HasForeignKey("ManagerPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PERF_REV_MPTY");

                    b.HasOne("Domain.Payment", "Payment")
                        .WithMany("PerfReviews")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PERF_REV_PMNT");

                    b.HasOne("Domain.PartyRole", "Employee")
                        .WithMany("PerfReviews")
                        .HasForeignKey("EmployeePartyId", "EmployeeRoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PERF_REV_EPTRL");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeParty");

                    b.Navigation("ManagerParty");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Domain.PerfReviewItem", b =>
                {
                    b.HasOne("Domain.Party", "EmployeeParty")
                        .WithMany("PerfReviewItems")
                        .HasForeignKey("EmployeePartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PERF_RVITM_EPTY");

                    b.HasOne("Domain.PartyRole", "Employee")
                        .WithMany("PerfReviewItems")
                        .HasForeignKey("EmployeePartyId", "EmployeeRoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PERF_RVITM_EPTRL");

                    b.HasOne("Domain.PerfReview", "PerfReview")
                        .WithMany("PerfReviewItems")
                        .HasForeignKey("EmployeePartyId", "EmployeeRoleTypeId", "PerfReviewId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PERF_RVITM_PFRV");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeParty");

                    b.Navigation("PerfReview");
                });

            modelBuilder.Entity("Domain.PerfReviewItemType", b =>
                {
                    b.HasOne("Domain.PerfReviewItemType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PERF_REV_ITM_TYP");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.PerformanceNote", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PerformanceNotes")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PERF_NOTE_PRTY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("PerformanceNotes")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PERF_NOTE_PRLE");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");
                });

            modelBuilder.Entity("Domain.PeriodType", b =>
                {
                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("PeriodTypes")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PER_TYPE_UOM");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.HasOne("Domain.Enumeration", "EmploymentStatusEnum")
                        .WithMany("PersonEmploymentStatusEnums")
                        .HasForeignKey("EmploymentStatusEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PERSON_EMPS_ENUM");

                    b.HasOne("Domain.Enumeration", "MaritalStatusEnum")
                        .WithMany("PersonMaritalStatusEnums")
                        .HasForeignKey("MaritalStatusEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PERSON_MARITAL");

                    b.HasOne("Domain.Party", "Party")
                        .WithOne("Person")
                        .HasForeignKey("Domain.Person", "PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PERSON_PARTY");

                    b.HasOne("Domain.Enumeration", "ResidenceStatusEnum")
                        .WithMany("PersonResidenceStatusEnums")
                        .HasForeignKey("ResidenceStatusEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PERSON_RESS_ENUM");

                    b.Navigation("EmploymentStatusEnum");

                    b.Navigation("MaritalStatusEnum");

                    b.Navigation("Party");

                    b.Navigation("ResidenceStatusEnum");
                });

            modelBuilder.Entity("Domain.PersonTraining", b =>
                {
                    b.HasOne("Domain.Person", "Approver")
                        .WithMany("PersonTrainings")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PERS_TRNG_APPR");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("PersonTrainings")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PERS_TRNG_PRTY");

                    b.HasOne("Domain.TrainingClassType", "TrainingClassType")
                        .WithMany("PersonTrainings")
                        .HasForeignKey("TrainingClassTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PERS_TRNG_TCTP");

                    b.HasOne("Domain.TrainingRequest", "TrainingRequest")
                        .WithMany("PersonTrainings")
                        .HasForeignKey("TrainingRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PERS_TRNG_TRNRQ");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("PersonTrainings")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PERS_TRNG_WREF");

                    b.Navigation("Approver");

                    b.Navigation("Party");

                    b.Navigation("TrainingClassType");

                    b.Navigation("TrainingRequest");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.Photo", b =>
                {
                    b.HasOne("Domain.AppUserLogin", null)
                        .WithMany("Photos")
                        .HasForeignKey("AppUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Domain.Picklist", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("Picklists")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PICKLST_FLTY");

                    b.HasOne("Domain.ShipmentMethodType", "ShipmentMethodType")
                        .WithMany("Picklists")
                        .HasForeignKey("ShipmentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PICKLST_SMTP");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("Picklists")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PICKLST_STTS");

                    b.Navigation("Facility");

                    b.Navigation("ShipmentMethodType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.PicklistBin", b =>
                {
                    b.HasOne("Domain.Picklist", "Picklist")
                        .WithMany("PicklistBins")
                        .HasForeignKey("PicklistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_BIN_PKLT");

                    b.HasOne("Domain.OrderItemShipGroup", "Primary")
                        .WithMany("PicklistBins")
                        .HasForeignKey("PrimaryOrderId", "PrimaryShipGroupSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_BIN_OISG");

                    b.Navigation("Picklist");

                    b.Navigation("Primary");
                });

            modelBuilder.Entity("Domain.PicklistItem", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("PicklistItems")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCKLST_ITM_INV");

                    b.HasOne("Domain.StatusItem", "ItemStatus")
                        .WithMany("PicklistItems")
                        .HasForeignKey("ItemStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PICKLST_ITM_STTS");

                    b.HasOne("Domain.PicklistBin", "PicklistBin")
                        .WithMany("PicklistItems")
                        .HasForeignKey("PicklistBinId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCKLST_ITM_BIN");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("PicklistItems")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCKLST_ITM_ODIT");

                    b.HasOne("Domain.OrderItemShipGroup", "OrderItemShipGroup")
                        .WithMany("PicklistItems")
                        .HasForeignKey("OrderId", "ShipGroupSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCKLST_ITM_OISG");

                    b.Navigation("InventoryItem");

                    b.Navigation("ItemStatus");

                    b.Navigation("OrderI");

                    b.Navigation("OrderItemShipGroup");

                    b.Navigation("PicklistBin");
                });

            modelBuilder.Entity("Domain.PicklistRole", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("PicklistRoleCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_RLE_CBUL");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("PicklistRoleLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_RLE_LMUL");

                    b.HasOne("Domain.Picklist", "Picklist")
                        .WithMany("PicklistRoles")
                        .HasForeignKey("PicklistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCKLST_RLE_PKLT");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("PicklistRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCKLST_RLE_PRLE");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("PartyRole");

                    b.Navigation("Picklist");
                });

            modelBuilder.Entity("Domain.PicklistStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("PicklistStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_STST_CUL");

                    b.HasOne("Domain.Picklist", "Picklist")
                        .WithMany("PicklistStatuses")
                        .HasForeignKey("PicklistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCKLST_STST_PKLT");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("PicklistStatusStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_STST_FSI");

                    b.HasOne("Domain.StatusItem", "StatusIdToNavigation")
                        .WithMany("PicklistStatusStatusIdToNavigations")
                        .HasForeignKey("StatusIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_STST_TSI");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("Picklist");

                    b.Navigation("Status");

                    b.Navigation("StatusIdToNavigation");
                });

            modelBuilder.Entity("Domain.PicklistStatusHistory", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeUserLogin")
                        .WithMany("PicklistStatusHistories")
                        .HasForeignKey("ChangeUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_STHST_CUL");

                    b.HasOne("Domain.Picklist", "Picklist")
                        .WithMany("PicklistStatusHistories")
                        .HasForeignKey("PicklistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCKLST_STHST_PKLT");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("PicklistStatusHistoryStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_STHST_FSI");

                    b.HasOne("Domain.StatusItem", "StatusIdToNavigation")
                        .WithMany("PicklistStatusHistoryStatusIdToNavigations")
                        .HasForeignKey("StatusIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_STHST_TSI");

                    b.HasOne("Domain.StatusValidChange", "StatusNavigation")
                        .WithMany("PicklistStatusHistories")
                        .HasForeignKey("StatusId", "StatusIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCKLST_STHST_SVC");

                    b.Navigation("ChangeUserLogin");

                    b.Navigation("Picklist");

                    b.Navigation("Status");

                    b.Navigation("StatusIdToNavigation");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("Domain.PortalPage", b =>
                {
                    b.HasOne("Domain.Content", "HelpContent")
                        .WithMany("PortalPages")
                        .HasForeignKey("HelpContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PORTPAL_HELP_CONT");

                    b.HasOne("Domain.PortalPage", "ParentPortalPage")
                        .WithMany("InverseParentPortalPage")
                        .HasForeignKey("ParentPortalPageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PortPage_PARENT");

                    b.HasOne("Domain.SecurityGroup", "SecurityGroup")
                        .WithMany("PortalPages")
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PORTPAGE_SECGRP");

                    b.Navigation("HelpContent");

                    b.Navigation("ParentPortalPage");

                    b.Navigation("SecurityGroup");
                });

            modelBuilder.Entity("Domain.PortalPageColumn", b =>
                {
                    b.HasOne("Domain.PortalPage", "PortalPage")
                        .WithMany("PortalPageColumns")
                        .HasForeignKey("PortalPageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRTL_PGCOL_PAGE");

                    b.Navigation("PortalPage");
                });

            modelBuilder.Entity("Domain.PortalPagePortlet", b =>
                {
                    b.HasOne("Domain.PortalPage", "PortalPage")
                        .WithMany("PortalPagePortlets")
                        .HasForeignKey("PortalPageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRTL_PGPTLT_PAGE");

                    b.HasOne("Domain.PortalPortlet", "PortalPortlet")
                        .WithMany("PortalPagePortlets")
                        .HasForeignKey("PortalPortletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRTL_PGPTLT_PTLT");

                    b.Navigation("PortalPage");

                    b.Navigation("PortalPortlet");
                });

            modelBuilder.Entity("Domain.PortletAttribute", b =>
                {
                    b.HasOne("Domain.PortalPortlet", "PortalPortlet")
                        .WithMany("PortletAttributes")
                        .HasForeignKey("PortalPortletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PTLT_ATTR_PTLT");

                    b.Navigation("PortalPortlet");
                });

            modelBuilder.Entity("Domain.PortletPortletCategory", b =>
                {
                    b.HasOne("Domain.PortalPortlet", "PortalPortlet")
                        .WithMany("PortletPortletCategories")
                        .HasForeignKey("PortalPortletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PPTLTCAT_PTPL");

                    b.HasOne("Domain.PortletCategory", "PortletCategory")
                        .WithMany("PortletPortletCategories")
                        .HasForeignKey("PortletCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PPTLTCAT_PTLTCAT");

                    b.Navigation("PortalPortlet");

                    b.Navigation("PortletCategory");
                });

            modelBuilder.Entity("Domain.PostalAddress", b =>
                {
                    b.HasOne("Domain.Geo", "CityGeo")
                        .WithMany("PostalAddressCityGeos")
                        .HasForeignKey("CityGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("POST_ADDR_CITY");

                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithOne("PostalAddress")
                        .HasForeignKey("Domain.PostalAddress", "ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("POST_ADDR_CMECH");

                    b.HasOne("Domain.Geo", "CountryGeo")
                        .WithMany("PostalAddressCountryGeos")
                        .HasForeignKey("CountryGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("POST_ADDR_CGEO");

                    b.HasOne("Domain.Geo", "CountyGeo")
                        .WithMany("PostalAddressCountyGeos")
                        .HasForeignKey("CountyGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("POST_ADDR_CNTG");

                    b.HasOne("Domain.GeoPoint", "GeoPoint")
                        .WithMany("PostalAddresses")
                        .HasForeignKey("GeoPointId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("POST_ADDR_GEOPT");

                    b.HasOne("Domain.Geo", "MunicipalityGeo")
                        .WithMany("PostalAddressMunicipalityGeos")
                        .HasForeignKey("MunicipalityGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("POST_ADDR_MNCP");

                    b.HasOne("Domain.Geo", "PostalCodeGeo")
                        .WithMany("PostalAddressPostalCodeGeos")
                        .HasForeignKey("PostalCodeGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("POST_ADDR_PCGEO");

                    b.HasOne("Domain.Geo", "StateProvinceGeo")
                        .WithMany("PostalAddressStateProvinceGeos")
                        .HasForeignKey("StateProvinceGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("POST_ADDR_SPGEO");

                    b.Navigation("CityGeo");

                    b.Navigation("ContactMech");

                    b.Navigation("CountryGeo");

                    b.Navigation("CountyGeo");

                    b.Navigation("GeoPoint");

                    b.Navigation("MunicipalityGeo");

                    b.Navigation("PostalCodeGeo");

                    b.Navigation("StateProvinceGeo");
                });

            modelBuilder.Entity("Domain.PostalAddressBoundary", b =>
                {
                    b.HasOne("Domain.PostalAddress", "ContactMech")
                        .WithMany("PostalAddressBoundaries")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("POST_ADDR_BNDRY");

                    b.HasOne("Domain.Geo", "Geo")
                        .WithMany("PostalAddressBoundaries")
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("POST_ADDR_BNDRYGEO");

                    b.Navigation("ContactMech");

                    b.Navigation("Geo");
                });

            modelBuilder.Entity("Domain.ProdCatalogCategory", b =>
                {
                    b.HasOne("Domain.ProdCatalogCategoryType", "ProdCatalogCategoryType")
                        .WithMany("ProdCatalogCategories")
                        .HasForeignKey("ProdCatalogCategoryTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CC_TYPE");

                    b.HasOne("Domain.ProdCatalog", "ProdCatalog")
                        .WithMany("ProdCatalogCategories")
                        .HasForeignKey("ProdCatalogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CC_CATALOG");

                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProdCatalogCategories")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CC_CATEGORY");

                    b.Navigation("ProdCatalog");

                    b.Navigation("ProdCatalogCategoryType");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.ProdCatalogCategoryType", b =>
                {
                    b.HasOne("Domain.ProdCatalogCategoryType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PCCT_TYPEPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProdCatalogInvFacility", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("ProdCatalogInvFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CIF_FACILITY");

                    b.HasOne("Domain.ProdCatalog", "ProdCatalog")
                        .WithMany("ProdCatalogInvFacilities")
                        .HasForeignKey("ProdCatalogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CIF_CATALOG");

                    b.Navigation("Facility");

                    b.Navigation("ProdCatalog");
                });

            modelBuilder.Entity("Domain.ProdCatalogRole", b =>
                {
                    b.HasOne("Domain.ProdCatalog", "ProdCatalog")
                        .WithMany("ProdCatalogRoles")
                        .HasForeignKey("ProdCatalogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCATRLE_CATALOG");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("ProdCatalogRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCATRLE_PTYRLE");

                    b.Navigation("PartyRole");

                    b.Navigation("ProdCatalog");
                });

            modelBuilder.Entity("Domain.ProdConfItemContent", b =>
                {
                    b.HasOne("Domain.ProdConfItemContentType", "ConfItemContentType")
                        .WithMany("ProdConfItemContents")
                        .HasForeignKey("ConfItemContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CIMT_CNT_TYPE");

                    b.HasOne("Domain.ProductConfigItem", "ConfigItem")
                        .WithMany("ProdConfItemContents")
                        .HasForeignKey("ConfigItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CIMT_CNT_PCIT");

                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ProdConfItemContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CIMT_CNT_CNT");

                    b.Navigation("ConfItemContentType");

                    b.Navigation("ConfigItem");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.ProdConfItemContentType", b =>
                {
                    b.HasOne("Domain.ProdConfItemContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCICT_TYP_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProdPromoCodeContactMech", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("ProdPromoCodeContactMeches")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRCDE_CM");

                    b.HasOne("Domain.ProductPromoCode", "ProductPromoCode")
                        .WithMany("ProdPromoCodeContactMeches")
                        .HasForeignKey("ProductPromoCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRCDE_PCD");

                    b.Navigation("ContactMech");

                    b.Navigation("ProductPromoCode");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.HasOne("Domain.UomType", "AmountUomType")
                        .WithMany("Products")
                        .HasForeignKey("AmountUomTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_AMOUNT_UOMT");

                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("ProductCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_CB_USERLOGIN");

                    b.HasOne("Domain.ShipmentBoxType", "DefaultShipmentBoxType")
                        .WithMany("Products")
                        .HasForeignKey("DefaultShipmentBoxTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_SHBX_TYPE");

                    b.HasOne("Domain.Uom", "DepthUom")
                        .WithMany("ProductDepthUoms")
                        .HasForeignKey("DepthUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_DEPTH_UOM");

                    b.HasOne("Domain.Uom", "DiameterUom")
                        .WithMany("ProductDiameterUoms")
                        .HasForeignKey("DiameterUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_DIAMTR_UOM");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("Products")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FACILITY");

                    b.HasOne("Domain.Uom", "HeightUom")
                        .WithMany("ProductHeightUoms")
                        .HasForeignKey("HeightUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_HEIGHT_UOM");

                    b.HasOne("Domain.InventoryItemType", "InventoryItemType")
                        .WithMany("Products")
                        .HasForeignKey("InventoryItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_INV_ITEM_TYPE");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("ProductLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_LMB_USERLOGIN");

                    b.HasOne("Domain.Geo", "OriginGeo")
                        .WithMany("Products")
                        .HasForeignKey("OriginGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_ORG_GEO");

                    b.HasOne("Domain.ProductCategory", "PrimaryProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("PrimaryProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRIMARY_CAT");

                    b.HasOne("Domain.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_TYPE");

                    b.HasOne("Domain.Uom", "QuantityUom")
                        .WithMany("ProductQuantityUoms")
                        .HasForeignKey("QuantityUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_QUANT_UOM");

                    b.HasOne("Domain.Enumeration", "RatingTypeEnumNavigation")
                        .WithMany("ProductRatingTypeEnumNavigations")
                        .HasForeignKey("RatingTypeEnum")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_RATE_ENUM");

                    b.HasOne("Domain.Enumeration", "RequirementMethodEnum")
                        .WithMany("ProductRequirementMethodEnums")
                        .HasForeignKey("RequirementMethodEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_RQMT_ENUM");

                    b.HasOne("Domain.Enumeration", "VirtualVariantMethodEnumNavigation")
                        .WithMany("ProductVirtualVariantMethodEnumNavigations")
                        .HasForeignKey("VirtualVariantMethodEnum")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_VVMETHOD_ENUM");

                    b.HasOne("Domain.Uom", "WeightUom")
                        .WithMany("ProductWeightUoms")
                        .HasForeignKey("WeightUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_WEIGHT_UOM");

                    b.HasOne("Domain.Uom", "WidthUom")
                        .WithMany("ProductWidthUoms")
                        .HasForeignKey("WidthUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_WIDTH_UOM");

                    b.Navigation("AmountUomType");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("DefaultShipmentBoxType");

                    b.Navigation("DepthUom");

                    b.Navigation("DiameterUom");

                    b.Navigation("Facility");

                    b.Navigation("HeightUom");

                    b.Navigation("InventoryItemType");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("OriginGeo");

                    b.Navigation("PrimaryProductCategory");

                    b.Navigation("ProductType");

                    b.Navigation("QuantityUom");

                    b.Navigation("RatingTypeEnumNavigation");

                    b.Navigation("RequirementMethodEnum");

                    b.Navigation("VirtualVariantMethodEnumNavigation");

                    b.Navigation("WeightUom");

                    b.Navigation("WidthUom");
                });

            modelBuilder.Entity("Domain.ProductAssoc", b =>
                {
                    b.HasOne("Domain.CustomMethod", "EstimateCalcMethodNavigation")
                        .WithMany("ProductAssocs")
                        .HasForeignKey("EstimateCalcMethod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_ASSOC_CUSM");

                    b.HasOne("Domain.ProductAssocType", "ProductAssocType")
                        .WithMany("ProductAssocs")
                        .HasForeignKey("ProductAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_ASSOC_TYPE");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductAssocProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_ASSOC_MPROD");

                    b.HasOne("Domain.Product", "ProductIdToNavigation")
                        .WithMany("ProductAssocProductIdToNavigations")
                        .HasForeignKey("ProductIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_ASSOC_APROD");

                    b.HasOne("Domain.RecurrenceInfo", "RecurrenceInfo")
                        .WithMany("ProductAssocs")
                        .HasForeignKey("RecurrenceInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_ASSOC_RECINFO");

                    b.HasOne("Domain.WorkEffort", "RoutingWorkEffort")
                        .WithMany("ProductAssocs")
                        .HasForeignKey("RoutingWorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_ASSOC_RTWE");

                    b.Navigation("EstimateCalcMethodNavigation");

                    b.Navigation("Product");

                    b.Navigation("ProductAssocType");

                    b.Navigation("ProductIdToNavigation");

                    b.Navigation("RecurrenceInfo");

                    b.Navigation("RoutingWorkEffort");
                });

            modelBuilder.Entity("Domain.ProductAssocType", b =>
                {
                    b.HasOne("Domain.ProductAssocType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_ASSOC_TYPEPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProductAttribute", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_ATTR");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductAverageCost", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("ProductAverageCosts")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AVG_COST_FACI");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("ProductAverageCosts")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AVG_COST_PARTY");

                    b.HasOne("Domain.ProductAverageCostType", "ProductAverageCostType")
                        .WithMany("ProductAverageCosts")
                        .HasForeignKey("ProductAverageCostTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AVG_COST_TYPE");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductAverageCosts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("AVG_COST_PROD");

                    b.Navigation("Facility");

                    b.Navigation("OrganizationParty");

                    b.Navigation("Product");

                    b.Navigation("ProductAverageCostType");
                });

            modelBuilder.Entity("Domain.ProductAverageCostType", b =>
                {
                    b.HasOne("Domain.ProductAverageCostType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("AVGCOST_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProductCalculatedInfo", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithOne("ProductCalculatedInfo")
                        .HasForeignKey("Domain.ProductCalculatedInfo", "ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRODCI_PROD");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductCategory", b =>
                {
                    b.HasOne("Domain.ProductCategory", "PrimaryParentCategory")
                        .WithMany("InversePrimaryParentCategory")
                        .HasForeignKey("PrimaryParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_CTGRY_PARENT");

                    b.HasOne("Domain.ProductCategoryType", "ProductCategoryType")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductCategoryTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_CTGRY_TYPE");

                    b.Navigation("PrimaryParentCategory");

                    b.Navigation("ProductCategoryType");
                });

            modelBuilder.Entity("Domain.ProductCategoryAttribute", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryAttributes")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CTGRY_ATTR");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.ProductCategoryContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ProductCategoryContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDCAT_CNT_CNT");

                    b.HasOne("Domain.ProductCategoryContentType", "ProdCatContentType")
                        .WithMany("ProductCategoryContents")
                        .HasForeignKey("ProdCatContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDCAT_CNT_TYPE");

                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryContents")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDCAT_CNT_PRDCAT");

                    b.Navigation("Content");

                    b.Navigation("ProdCatContentType");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.ProductCategoryContentType", b =>
                {
                    b.HasOne("Domain.ProductCategoryContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDCATCNT_TYP_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProductCategoryGlAccount", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("ProductCategoryGlAccounts")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRD_CT_GLACT_GLACT");

                    b.HasOne("Domain.GlAccountType", "GlAccountType")
                        .WithMany("ProductCategoryGlAccounts")
                        .HasForeignKey("GlAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRD_CT_GLACT_TYPE");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("ProductCategoryGlAccounts")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRD_CT_GLACT_PRTY");

                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryGlAccounts")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRD_CT_GLACT_PCAT");

                    b.Navigation("GlAccount");

                    b.Navigation("GlAccountType");

                    b.Navigation("OrganizationParty");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.ProductCategoryLink", b =>
                {
                    b.HasOne("Domain.Enumeration", "LinkTypeEnum")
                        .WithMany("ProductCategoryLinks")
                        .HasForeignKey("LinkTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_CLNK_LKTPENM");

                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryLinks")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CLNK_CATEGORY");

                    b.Navigation("LinkTypeEnum");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.ProductCategoryMember", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryMembers")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CMBR_CATEGORY");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductCategoryMembers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CMBR_PRODUCT");

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.ProductCategoryRole", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryRoles")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CRLE_CATEGORY");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("ProductCategoryRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CRLE_PTYRLE");

                    b.Navigation("PartyRole");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.ProductCategoryRollup", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ParentProductCategory")
                        .WithMany("ProductCategoryRollupParentProductCategories")
                        .HasForeignKey("ParentProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CRLP_PARENT");

                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryRollupProductCategories")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CRLP_CURRENT");

                    b.Navigation("ParentProductCategory");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Domain.ProductCategoryType", b =>
                {
                    b.HasOne("Domain.ProductCategoryType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_CTGRY_TYPEPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProductCategoryTypeAttr", b =>
                {
                    b.HasOne("Domain.ProductCategoryType", "ProductCategoryType")
                        .WithMany("ProductCategoryTypeAttrs")
                        .HasForeignKey("ProductCategoryTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CTGRY_TATTR");

                    b.Navigation("ProductCategoryType");
                });

            modelBuilder.Entity("Domain.ProductConfig", b =>
                {
                    b.HasOne("Domain.ProductConfigItem", "ConfigItem")
                        .WithMany("ProductConfigs")
                        .HasForeignKey("ConfigItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CONF_ITEM");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductConfigs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CONF_PROD");

                    b.Navigation("ConfigItem");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductConfigConfig", b =>
                {
                    b.HasOne("Domain.ProductConfigItem", "ConfigItem")
                        .WithMany("ProductConfigConfigs")
                        .HasForeignKey("ConfigItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CONFC_ITEM");

                    b.HasOne("Domain.ProductConfigOption", "Config")
                        .WithMany("ProductConfigConfigs")
                        .HasForeignKey("ConfigItemId", "ConfigOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CONFC_OPTN");

                    b.Navigation("Config");

                    b.Navigation("ConfigItem");
                });

            modelBuilder.Entity("Domain.ProductConfigOption", b =>
                {
                    b.HasOne("Domain.ProductConfigItem", "ConfigItem")
                        .WithMany("ProductConfigOptions")
                        .HasForeignKey("ConfigItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OPTN_ITEM");

                    b.Navigation("ConfigItem");
                });

            modelBuilder.Entity("Domain.ProductConfigOptionIactn", b =>
                {
                    b.HasOne("Domain.ProductConfigItem", "ConfigItem")
                        .WithMany("ProductConfigOptionIactnConfigItems")
                        .HasForeignKey("ConfigItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OPTIA_ITEM");

                    b.HasOne("Domain.ProductConfigItem", "ConfigItemIdToNavigation")
                        .WithMany("ProductConfigOptionIactnConfigItemIdToNavigations")
                        .HasForeignKey("ConfigItemIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OPTIA_ITMT");

                    b.HasOne("Domain.ProductConfigOption", "Config")
                        .WithMany("ProductConfigOptionIactnConfigs")
                        .HasForeignKey("ConfigItemId", "ConfigOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OPTIA_OPTN");

                    b.HasOne("Domain.ProductConfigOption", "ConfigNavigation")
                        .WithMany("ProductConfigOptionIactnConfigNavigations")
                        .HasForeignKey("ConfigItemIdTo", "ConfigOptionIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OPTIA_OPTT");

                    b.Navigation("Config");

                    b.Navigation("ConfigItem");

                    b.Navigation("ConfigItemIdToNavigation");

                    b.Navigation("ConfigNavigation");
                });

            modelBuilder.Entity("Domain.ProductConfigProduct", b =>
                {
                    b.HasOne("Domain.ProductConfigItem", "ConfigItem")
                        .WithMany("ProductConfigProducts")
                        .HasForeignKey("ConfigItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CONFP_ITEM");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductConfigProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CONFP_PROD");

                    b.HasOne("Domain.ProductConfigOption", "Config")
                        .WithMany("ProductConfigProducts")
                        .HasForeignKey("ConfigItemId", "ConfigOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CONFP_OPTN");

                    b.Navigation("Config");

                    b.Navigation("ConfigItem");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductConfigStat", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductConfigStats")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CONFS_PROD");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ProductContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CNT_CNT");

                    b.HasOne("Domain.ProductContentType", "ProductContentType")
                        .WithMany("ProductContents")
                        .HasForeignKey("ProductContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CNT_TYPE");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductContents")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_CNT_PROD");

                    b.HasOne("Domain.RoleType", "UseRoleType")
                        .WithMany("ProductContents")
                        .HasForeignKey("UseRoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_CNT_URT");

                    b.HasOne("Domain.Uom", "UseTimeUom")
                        .WithMany("ProductContents")
                        .HasForeignKey("UseTimeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_CNT_UTU");

                    b.Navigation("Content");

                    b.Navigation("Product");

                    b.Navigation("ProductContentType");

                    b.Navigation("UseRoleType");

                    b.Navigation("UseTimeUom");
                });

            modelBuilder.Entity("Domain.ProductContentType", b =>
                {
                    b.HasOne("Domain.ProductContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDCT_TYP_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProductCostComponentCalc", b =>
                {
                    b.HasOne("Domain.CostComponentCalc", "CostComponentCalc")
                        .WithMany("ProductCostComponentCalcs")
                        .HasForeignKey("CostComponentCalcId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PR_COS_CCC");

                    b.HasOne("Domain.CostComponentType", "CostComponentType")
                        .WithMany("ProductCostComponentCalcs")
                        .HasForeignKey("CostComponentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PR_COS_CCT");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductCostComponentCalcs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PR_COS_COMPCALC");

                    b.Navigation("CostComponentCalc");

                    b.Navigation("CostComponentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductFacility", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("ProductFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FAC_FAC");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductFacilities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FAC_PROD");

                    b.HasOne("Domain.Enumeration", "ReplenishMethodEnum")
                        .WithMany("ProductFacilityReplenishMethodEnums")
                        .HasForeignKey("ReplenishMethodEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FAC_REP");

                    b.HasOne("Domain.Enumeration", "RequirementMethodEnum")
                        .WithMany("ProductFacilityRequirementMethodEnums")
                        .HasForeignKey("RequirementMethodEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FAC_REQ");

                    b.Navigation("Facility");

                    b.Navigation("Product");

                    b.Navigation("ReplenishMethodEnum");

                    b.Navigation("RequirementMethodEnum");
                });

            modelBuilder.Entity("Domain.ProductFacilityAssoc", b =>
                {
                    b.HasOne("Domain.FacilityAssocType", "FacilityAssocType")
                        .WithMany("ProductFacilityAssocs")
                        .HasForeignKey("FacilityAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRFACASSOC_TYPE");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("ProductFacilityAssocFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRFACASSOC_FAC");

                    b.HasOne("Domain.Facility", "FacilityIdToNavigation")
                        .WithMany("ProductFacilityAssocFacilityIdToNavigations")
                        .HasForeignKey("FacilityIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRFACASSOC_FACTO");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductFacilityAssocs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRFACASSOC_PRO");

                    b.Navigation("Facility");

                    b.Navigation("FacilityAssocType");

                    b.Navigation("FacilityIdToNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductFacilityLocation", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductFacilityLocations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FCL_PROD");

                    b.HasOne("Domain.FacilityLocation", "FacilityLocation")
                        .WithMany("ProductFacilityLocations")
                        .HasForeignKey("FacilityId", "LocationSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FCL_FCL");

                    b.Navigation("FacilityLocation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductFeature", b =>
                {
                    b.HasOne("Domain.ProductFeatureCategory", "ProductFeatureCategory")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("ProductFeatureCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FEAT_CATEGORY");

                    b.HasOne("Domain.ProductFeatureType", "ProductFeatureType")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("ProductFeatureTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FEAT_TYPE");

                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FEAT_UOM");

                    b.Navigation("ProductFeatureCategory");

                    b.Navigation("ProductFeatureType");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Domain.ProductFeatureAppl", b =>
                {
                    b.HasOne("Domain.ProductFeatureApplType", "ProductFeatureApplType")
                        .WithMany("ProductFeatureAppls")
                        .HasForeignKey("ProductFeatureApplTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FAPPL_TYPE");

                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("ProductFeatureAppls")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FAPPL_FEATURE");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductFeatureAppls")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FAPPL_PRODUCT");

                    b.Navigation("Product");

                    b.Navigation("ProductFeature");

                    b.Navigation("ProductFeatureApplType");
                });

            modelBuilder.Entity("Domain.ProductFeatureApplAttr", b =>
                {
                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("ProductFeatureApplAttrs")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FAPPA_FEATURE");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductFeatureApplAttrs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FAPPA_PRODUCT");

                    b.HasOne("Domain.ProductFeatureAppl", "ProductFeatureAppl")
                        .WithMany("ProductFeatureApplAttrs")
                        .HasForeignKey("ProductId", "ProductFeatureId", "FromDate")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FAPPA_FEATAPP");

                    b.Navigation("Product");

                    b.Navigation("ProductFeature");

                    b.Navigation("ProductFeatureAppl");
                });

            modelBuilder.Entity("Domain.ProductFeatureApplType", b =>
                {
                    b.HasOne("Domain.ProductFeatureApplType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FAPPL_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProductFeatureCatGrpAppl", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductFeatureCatGrpAppls")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FCGAPL_CAT");

                    b.HasOne("Domain.ProductFeatureGroup", "ProductFeatureGroup")
                        .WithMany("ProductFeatureCatGrpAppls")
                        .HasForeignKey("ProductFeatureGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FCGAPL_FGRP");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductFeatureGroup");
                });

            modelBuilder.Entity("Domain.ProductFeatureCategory", b =>
                {
                    b.HasOne("Domain.ProductFeatureCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FEAT_CAT_PAR");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.ProductFeatureCategoryAppl", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductFeatureCategoryAppls")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FCAPPL_CAT");

                    b.HasOne("Domain.ProductFeatureCategory", "ProductFeatureCategory")
                        .WithMany("ProductFeatureCategoryAppls")
                        .HasForeignKey("ProductFeatureCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FCAPPL_FCAT");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductFeatureCategory");
                });

            modelBuilder.Entity("Domain.ProductFeatureDataResource", b =>
                {
                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithMany("ProductFeatureDataResources")
                        .HasForeignKey("DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PFEAT_DR_DATRES");

                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("ProductFeatureDataResources")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PFEAT_DR_FEATURE");

                    b.Navigation("DataResource");

                    b.Navigation("ProductFeature");
                });

            modelBuilder.Entity("Domain.ProductFeatureGroupAppl", b =>
                {
                    b.HasOne("Domain.ProductFeatureGroup", "ProductFeatureGroup")
                        .WithMany("ProductFeatureGroupAppls")
                        .HasForeignKey("ProductFeatureGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FGAPP_PRODUCT");

                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("ProductFeatureGroupAppls")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FGAPP_FEATURE");

                    b.Navigation("ProductFeature");

                    b.Navigation("ProductFeatureGroup");
                });

            modelBuilder.Entity("Domain.ProductFeatureIactn", b =>
                {
                    b.HasOne("Domain.ProductFeatureIactnType", "ProductFeatureIactnType")
                        .WithMany("ProductFeatureIactns")
                        .HasForeignKey("ProductFeatureIactnTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FICTN_TYPE");

                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("ProductFeatureIactnProductFeatures")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FICTN_MFEAT");

                    b.HasOne("Domain.ProductFeature", "ProductFeatureIdToNavigation")
                        .WithMany("ProductFeatureIactnProductFeatureIdToNavigations")
                        .HasForeignKey("ProductFeatureIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_FICTN_AFEAT");

                    b.Navigation("ProductFeature");

                    b.Navigation("ProductFeatureIactnType");

                    b.Navigation("ProductFeatureIdToNavigation");
                });

            modelBuilder.Entity("Domain.ProductFeatureIactnType", b =>
                {
                    b.HasOne("Domain.ProductFeatureIactnType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FICTN_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProductFeaturePrice", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("ProductFeaturePriceCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_F_PRICE_CBUL");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("ProductFeaturePrices")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_F_PRICE_CUOM");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("ProductFeaturePriceLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_F_PRICE_LMBUL");

                    b.HasOne("Domain.ProductPriceType", "ProductPriceType")
                        .WithMany("ProductFeaturePrices")
                        .HasForeignKey("ProductPriceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_F_PRICE_TYPE");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("CurrencyUom");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("ProductPriceType");
                });

            modelBuilder.Entity("Domain.ProductFeatureType", b =>
                {
                    b.HasOne("Domain.ProductFeatureType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_FEAT_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProductGeo", b =>
                {
                    b.HasOne("Domain.Geo", "Geo")
                        .WithMany("ProductGeos")
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDGEO_GEO");

                    b.HasOne("Domain.Enumeration", "ProductGeoEnum")
                        .WithMany("ProductGeos")
                        .HasForeignKey("ProductGeoEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDGEO_ENUM");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductGeos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDGEO_PRODUCT");

                    b.Navigation("Geo");

                    b.Navigation("Product");

                    b.Navigation("ProductGeoEnum");
                });

            modelBuilder.Entity("Domain.ProductGlAccount", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("ProductGlAccounts")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_GLACT_GLACT");

                    b.HasOne("Domain.GlAccountType", "GlAccountType")
                        .WithMany("ProductGlAccounts")
                        .HasForeignKey("GlAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_GLACT_TYPE");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("ProductGlAccounts")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_GLACT_PARTY");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductGlAccounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_GLACT_PROD");

                    b.Navigation("GlAccount");

                    b.Navigation("GlAccountType");

                    b.Navigation("OrganizationParty");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductGroupOrder", b =>
                {
                    b.HasOne("Domain.JobSandbox", "Job")
                        .WithMany("ProductGroupOrders")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GROUP_ORDER_JOB");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductGroupOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_GROUP_ORDER");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("ProductGroupOrders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("GROUP_ORDER_STATUS");

                    b.Navigation("Job");

                    b.Navigation("Product");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ProductKeywordNew", b =>
                {
                    b.HasOne("Domain.Enumeration", "KeywordType")
                        .WithMany("ProductKeywordNews")
                        .HasForeignKey("KeywordTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_KWD_TYPE");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductKeywordNews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_KWD_PROD_NEW");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("ProductKeywordNews")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_KWD_STTS");

                    b.Navigation("KeywordType");

                    b.Navigation("Product");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ProductMaint", b =>
                {
                    b.HasOne("Domain.ProductMeterType", "IntervalMeterType")
                        .WithMany("ProductMaints")
                        .HasForeignKey("IntervalMeterTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODMNT_PDMTTYP");

                    b.HasOne("Domain.Uom", "IntervalUom")
                        .WithMany("ProductMaints")
                        .HasForeignKey("IntervalUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODMNT_INTUOM");

                    b.HasOne("Domain.WorkEffort", "MaintTemplateWorkEffort")
                        .WithMany("ProductMaints")
                        .HasForeignKey("MaintTemplateWorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODMNT_TPLHWE");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductMaints")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRODMNT_PROD");

                    b.HasOne("Domain.ProductMaintType", "ProductMaintType")
                        .WithMany("ProductMaints")
                        .HasForeignKey("ProductMaintTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODMNT_MNTTYP");

                    b.Navigation("IntervalMeterType");

                    b.Navigation("IntervalUom");

                    b.Navigation("MaintTemplateWorkEffort");

                    b.Navigation("Product");

                    b.Navigation("ProductMaintType");
                });

            modelBuilder.Entity("Domain.ProductMaintType", b =>
                {
                    b.HasOne("Domain.ProductMaintType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODMNT_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProductManufacturingRule", b =>
                {
                    b.HasOne("Domain.ProductFeature", "ProductFeatureNavigation")
                        .WithMany("ProductManufacturingRules")
                        .HasForeignKey("ProductFeature")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODUCT_FEAT");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductManufacturingRuleProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODUCT_PARENT");

                    b.HasOne("Domain.Product", "ProductIdForNavigation")
                        .WithMany("ProductManufacturingRuleProductIdForNavigations")
                        .HasForeignKey("ProductIdFor")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODUCT_FOR");

                    b.HasOne("Domain.Product", "ProductIdInNavigation")
                        .WithMany("ProductManufacturingRuleProductIdInNavigations")
                        .HasForeignKey("ProductIdIn")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODUCT_IN");

                    b.HasOne("Domain.Product", "ProductIdInSubstNavigation")
                        .WithMany("ProductManufacturingRuleProductIdInSubstNavigations")
                        .HasForeignKey("ProductIdInSubst")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODUCT_SUBST");

                    b.Navigation("Product");

                    b.Navigation("ProductFeatureNavigation");

                    b.Navigation("ProductIdForNavigation");

                    b.Navigation("ProductIdInNavigation");

                    b.Navigation("ProductIdInSubstNavigation");
                });

            modelBuilder.Entity("Domain.ProductMeter", b =>
                {
                    b.HasOne("Domain.Uom", "MeterUom")
                        .WithMany("ProductMeters")
                        .HasForeignKey("MeterUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODMTR_MTRUOM");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductMeters")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRODMTR_PROD");

                    b.HasOne("Domain.ProductMeterType", "ProductMeterType")
                        .WithMany("ProductMeters")
                        .HasForeignKey("ProductMeterTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRODMTR_MTRTYP");

                    b.Navigation("MeterUom");

                    b.Navigation("Product");

                    b.Navigation("ProductMeterType");
                });

            modelBuilder.Entity("Domain.ProductMeterType", b =>
                {
                    b.HasOne("Domain.Uom", "DefaultUom")
                        .WithMany("ProductMeterTypes")
                        .HasForeignKey("DefaultUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRODMTRTP_DUOM");

                    b.Navigation("DefaultUom");
                });

            modelBuilder.Entity("Domain.ProductOrderItem", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Engagement")
                        .WithMany("ProductOrderItemEngagements")
                        .HasForeignKey("EngagementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OITEM_ENOHDR");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("ProductOrderItemOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OITEM_OHDR");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_OITEM_PROD");

                    b.HasOne("Domain.OrderItem", "EngagementI")
                        .WithMany("ProductOrderItemEngagementIs")
                        .HasForeignKey("EngagementId", "EngagementItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OITEM_ENOITM");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("ProductOrderItemOrderIs")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_OITEM_OITEM");

                    b.Navigation("Engagement");

                    b.Navigation("EngagementI");

                    b.Navigation("Order");

                    b.Navigation("OrderI");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductPaymentMethodType", b =>
                {
                    b.HasOne("Domain.PaymentMethodType", "PaymentMethodType")
                        .WithMany("ProductPaymentMethodTypes")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PMT_PMT");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductPaymentMethodTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PMT_PROD");

                    b.HasOne("Domain.ProductPricePurpose", "ProductPricePurpose")
                        .WithMany("ProductPaymentMethodTypes")
                        .HasForeignKey("ProductPricePurposeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PMT_PPRP");

                    b.Navigation("PaymentMethodType");

                    b.Navigation("Product");

                    b.Navigation("ProductPricePurpose");
                });

            modelBuilder.Entity("Domain.ProductPrice", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("ProductPriceCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRICE_CBUL");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("ProductPriceCurrencyUoms")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRICE_CUOM");

                    b.HasOne("Domain.CustomMethod", "CustomPriceCalcServiceNavigation")
                        .WithMany("ProductPrices")
                        .HasForeignKey("CustomPriceCalcService")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRICE_CMET");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("ProductPriceLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRICE_LMBUL");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRICE_PROD");

                    b.HasOne("Domain.ProductPricePurpose", "ProductPricePurpose")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductPricePurposeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRICE_PURP");

                    b.HasOne("Domain.ProductPriceType", "ProductPriceType")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductPriceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRICE_TYPE");

                    b.HasOne("Domain.ProductStoreGroup", "ProductStoreGroup")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductStoreGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRICE_PSTG");

                    b.HasOne("Domain.Geo", "TaxAuthGeo")
                        .WithMany("ProductPrices")
                        .HasForeignKey("TaxAuthGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRC_TAXGEO");

                    b.HasOne("Domain.Party", "TaxAuthParty")
                        .WithMany("ProductPrices")
                        .HasForeignKey("TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRC_TAXPTY");

                    b.HasOne("Domain.Uom", "TermUom")
                        .WithMany("ProductPriceTermUoms")
                        .HasForeignKey("TermUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRICE_TUOM");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("CurrencyUom");

                    b.Navigation("CustomPriceCalcServiceNavigation");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("Product");

                    b.Navigation("ProductPricePurpose");

                    b.Navigation("ProductPriceType");

                    b.Navigation("ProductStoreGroup");

                    b.Navigation("TaxAuthGeo");

                    b.Navigation("TaxAuthParty");

                    b.Navigation("TermUom");
                });

            modelBuilder.Entity("Domain.ProductPriceAction", b =>
                {
                    b.HasOne("Domain.ProductPriceActionType", "ProductPriceActionType")
                        .WithMany("ProductPriceActions")
                        .HasForeignKey("ProductPriceActionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PCACT_TYPE");

                    b.HasOne("Domain.ProductPriceRule", "ProductPriceRule")
                        .WithMany("ProductPriceActions")
                        .HasForeignKey("ProductPriceRuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PCACT_RL");

                    b.Navigation("ProductPriceActionType");

                    b.Navigation("ProductPriceRule");
                });

            modelBuilder.Entity("Domain.ProductPriceChange", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangedByUserLoginNavigation")
                        .WithMany("ProductPriceChanges")
                        .HasForeignKey("ChangedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRCHNG_CHUL");

                    b.Navigation("ChangedByUserLoginNavigation");
                });

            modelBuilder.Entity("Domain.ProductPriceCond", b =>
                {
                    b.HasOne("Domain.Enumeration", "InputParamEnum")
                        .WithMany("ProductPriceCondInputParamEnums")
                        .HasForeignKey("InputParamEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PCCOND_INENUM");

                    b.HasOne("Domain.Enumeration", "OperatorEnum")
                        .WithMany("ProductPriceCondOperatorEnums")
                        .HasForeignKey("OperatorEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PCCOND_OPENUM");

                    b.HasOne("Domain.ProductPriceRule", "ProductPriceRule")
                        .WithMany("ProductPriceConds")
                        .HasForeignKey("ProductPriceRuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PCCOND_RULE");

                    b.Navigation("InputParamEnum");

                    b.Navigation("OperatorEnum");

                    b.Navigation("ProductPriceRule");
                });

            modelBuilder.Entity("Domain.ProductPromo", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("ProductPromoCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRMO_CUL");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("ProductPromoLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRMO_LMCUL");

                    b.HasOne("Domain.Party", "OverrideOrgParty")
                        .WithMany("ProductPromos")
                        .HasForeignKey("OverrideOrgPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRMO_OPA");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("OverrideOrgParty");
                });

            modelBuilder.Entity("Domain.ProductPromoAction", b =>
                {
                    b.HasOne("Domain.CustomMethod", "CustomMethod")
                        .WithMany("ProductPromoActions")
                        .HasForeignKey("CustomMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRACT_CMET");

                    b.HasOne("Domain.OrderAdjustmentType", "OrderAdjustmentType")
                        .WithMany("ProductPromoActions")
                        .HasForeignKey("OrderAdjustmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRACT_OATYPE");

                    b.HasOne("Domain.Enumeration", "ProductPromoActionEnum")
                        .WithMany("ProductPromoActions")
                        .HasForeignKey("ProductPromoActionEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRACT_ENUM");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("ProductPromoActions")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRACT_PR");

                    b.HasOne("Domain.ProductPromoRule", "ProductPromoNavigation")
                        .WithMany("ProductPromoActions")
                        .HasForeignKey("ProductPromoId", "ProductPromoRuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRACT_RL");

                    b.Navigation("CustomMethod");

                    b.Navigation("OrderAdjustmentType");

                    b.Navigation("ProductPromo");

                    b.Navigation("ProductPromoActionEnum");

                    b.Navigation("ProductPromoNavigation");
                });

            modelBuilder.Entity("Domain.ProductPromoCategory", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("ProductPromoCategories")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRCAT_PRCAT");

                    b.HasOne("Domain.Enumeration", "ProductPromoApplEnum")
                        .WithMany("ProductPromoCategories")
                        .HasForeignKey("ProductPromoApplEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRCAT_ENUM");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("ProductPromoCategories")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRCAT_PROMO");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductPromo");

                    b.Navigation("ProductPromoApplEnum");
                });

            modelBuilder.Entity("Domain.ProductPromoCode", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("ProductPromoCodeCreatedByUserLoginNavigations")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRCOD_CUL");

                    b.HasOne("Domain.UserLogin", "LastModifiedByUserLoginNavigation")
                        .WithMany("ProductPromoCodeLastModifiedByUserLoginNavigations")
                        .HasForeignKey("LastModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRCOD_LMCUL");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("ProductPromoCodes")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRCOD_PROMO");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("LastModifiedByUserLoginNavigation");

                    b.Navigation("ProductPromo");
                });

            modelBuilder.Entity("Domain.ProductPromoCodeEmail", b =>
                {
                    b.HasOne("Domain.ProductPromoCode", "ProductPromoCode")
                        .WithMany("ProductPromoCodeEmails")
                        .HasForeignKey("ProductPromoCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRCDE_OPCD");

                    b.Navigation("ProductPromoCode");
                });

            modelBuilder.Entity("Domain.ProductPromoCodeParty", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("ProductPromoCodeParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRCDP_PRTY");

                    b.HasOne("Domain.ProductPromoCode", "ProductPromoCode")
                        .WithMany("ProductPromoCodeParties")
                        .HasForeignKey("ProductPromoCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRCDP_PCD");

                    b.Navigation("Party");

                    b.Navigation("ProductPromoCode");
                });

            modelBuilder.Entity("Domain.ProductPromoCond", b =>
                {
                    b.HasOne("Domain.CustomMethod", "CustomMethod")
                        .WithMany("ProductPromoConds")
                        .HasForeignKey("CustomMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRCOND_CMETH");

                    b.HasOne("Domain.Enumeration", "InputParamEnum")
                        .WithMany("ProductPromoCondInputParamEnums")
                        .HasForeignKey("InputParamEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRCOND_INENUM");

                    b.HasOne("Domain.Enumeration", "OperatorEnum")
                        .WithMany("ProductPromoCondOperatorEnums")
                        .HasForeignKey("OperatorEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRCOND_OPENUM");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("ProductPromoConds")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRCOND_PROMO");

                    b.HasOne("Domain.ProductPromoRule", "ProductPromoNavigation")
                        .WithMany("ProductPromoConds")
                        .HasForeignKey("ProductPromoId", "ProductPromoRuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRCOND_RULE");

                    b.Navigation("CustomMethod");

                    b.Navigation("InputParamEnum");

                    b.Navigation("OperatorEnum");

                    b.Navigation("ProductPromo");

                    b.Navigation("ProductPromoNavigation");
                });

            modelBuilder.Entity("Domain.ProductPromoContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("ProductPromoContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRODPR_CNT_CNT");

                    b.HasOne("Domain.ProductContentType", "ProductPromoContentType")
                        .WithMany("ProductPromoContents")
                        .HasForeignKey("ProductPromoContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRODPR_CNT_TYPE");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("ProductPromoContents")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRODPR_CNT_PROD_PR");

                    b.Navigation("Content");

                    b.Navigation("ProductPromo");

                    b.Navigation("ProductPromoContentType");
                });

            modelBuilder.Entity("Domain.ProductPromoProduct", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductPromoProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRPRD_PROD");

                    b.HasOne("Domain.Enumeration", "ProductPromoApplEnum")
                        .WithMany("ProductPromoProducts")
                        .HasForeignKey("ProductPromoApplEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRPRD_ENUM");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("ProductPromoProducts")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRPRD_PROMO");

                    b.Navigation("Product");

                    b.Navigation("ProductPromo");

                    b.Navigation("ProductPromoApplEnum");
                });

            modelBuilder.Entity("Domain.ProductPromoRule", b =>
                {
                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("ProductPromoRules")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRRLE_PROMO");

                    b.Navigation("ProductPromo");
                });

            modelBuilder.Entity("Domain.ProductPromoUse", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("ProductPromoUses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_PRUSE_ORDR");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("ProductPromoUses")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRUSE_PTY");

                    b.HasOne("Domain.ProductPromoCode", "ProductPromoCode")
                        .WithMany("ProductPromoUses")
                        .HasForeignKey("ProductPromoCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRUSE_CODE");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("ProductPromoUses")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_PRUSE_PROMO");

                    b.Navigation("Order");

                    b.Navigation("Party");

                    b.Navigation("ProductPromo");

                    b.Navigation("ProductPromoCode");
                });

            modelBuilder.Entity("Domain.ProductReview", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_REVIEW_PROD");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_REVIEW_PRDSTR");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("ProductReviews")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_REVIEW_STTS");

                    b.HasOne("Domain.UserLogin", "UserLogin")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_REVIEW_ULH");

                    b.Navigation("Product");

                    b.Navigation("ProductStore");

                    b.Navigation("Status");

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("Domain.ProductRole", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductRoles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_RLE_PRODUCT");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("ProductRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_RLE_PTYRLE");

                    b.Navigation("PartyRole");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ProductSearchConstraint", b =>
                {
                    b.HasOne("Domain.ProductSearchResult", "ProductSearchResult")
                        .WithMany("ProductSearchConstraints")
                        .HasForeignKey("ProductSearchResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_SCHRSI_RES");

                    b.Navigation("ProductSearchResult");
                });

            modelBuilder.Entity("Domain.ProductStore", b =>
                {
                    b.HasOne("Domain.Uom", "DefaultCurrencyUom")
                        .WithMany("ProductStores")
                        .HasForeignKey("DefaultCurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_CURUOM");

                    b.HasOne("Domain.Enumeration", "DefaultSalesChannelEnum")
                        .WithMany("ProductStoreDefaultSalesChannelEnums")
                        .HasForeignKey("DefaultSalesChannelEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_SALECHN");

                    b.HasOne("Domain.StatusItem", "DigitalItemApprovedStatusNavigation")
                        .WithMany("ProductStoreDigitalItemApprovedStatusNavigations")
                        .HasForeignKey("DigitalItemApprovedStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_DIAPSTS");

                    b.HasOne("Domain.StatusItem", "HeaderApprovedStatusNavigation")
                        .WithMany("ProductStoreHeaderApprovedStatusNavigations")
                        .HasForeignKey("HeaderApprovedStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_HAPSTS");

                    b.HasOne("Domain.StatusItem", "HeaderCancelStatusNavigation")
                        .WithMany("ProductStoreHeaderCancelStatusNavigations")
                        .HasForeignKey("HeaderCancelStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_HCNSTS");

                    b.HasOne("Domain.StatusItem", "HeaderDeclinedStatusNavigation")
                        .WithMany("ProductStoreHeaderDeclinedStatusNavigations")
                        .HasForeignKey("HeaderDeclinedStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_HDCSTS");

                    b.HasOne("Domain.Facility", "InventoryFacility")
                        .WithMany("ProductStores")
                        .HasForeignKey("InventoryFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_FACILITY");

                    b.HasOne("Domain.StatusItem", "ItemApprovedStatusNavigation")
                        .WithMany("ProductStoreItemApprovedStatusNavigations")
                        .HasForeignKey("ItemApprovedStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_IAPSTS");

                    b.HasOne("Domain.StatusItem", "ItemCancelStatusNavigation")
                        .WithMany("ProductStoreItemCancelStatusNavigations")
                        .HasForeignKey("ItemCancelStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_ICNSTS");

                    b.HasOne("Domain.StatusItem", "ItemDeclinedStatusNavigation")
                        .WithMany("ProductStoreItemDeclinedStatusNavigations")
                        .HasForeignKey("ItemDeclinedStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_IDCSTS");

                    b.HasOne("Domain.Party", "PayToParty")
                        .WithMany("ProductStores")
                        .HasForeignKey("PayToPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_PAYTOPTY");

                    b.HasOne("Domain.ProductStoreGroup", "PrimaryStoreGroup")
                        .WithMany("ProductStores")
                        .HasForeignKey("PrimaryStoreGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_PRSTRGP");

                    b.HasOne("Domain.Enumeration", "RequirementMethodEnum")
                        .WithMany("ProductStoreRequirementMethodEnums")
                        .HasForeignKey("RequirementMethodEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_RQMTENUM");

                    b.HasOne("Domain.Enumeration", "ReserveOrderEnum")
                        .WithMany("ProductStoreReserveOrderEnums")
                        .HasForeignKey("ReserveOrderEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_RORDENUM");

                    b.HasOne("Domain.Enumeration", "StoreCreditAccountEnum")
                        .WithMany("ProductStoreStoreCreditAccountEnums")
                        .HasForeignKey("StoreCreditAccountEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_STRCRDACT");

                    b.HasOne("Domain.TaxAuthority", "VatTaxAuth")
                        .WithMany("ProductStores")
                        .HasForeignKey("VatTaxAuthGeoId", "VatTaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_STR_VATTXA");

                    b.Navigation("DefaultCurrencyUom");

                    b.Navigation("DefaultSalesChannelEnum");

                    b.Navigation("DigitalItemApprovedStatusNavigation");

                    b.Navigation("HeaderApprovedStatusNavigation");

                    b.Navigation("HeaderCancelStatusNavigation");

                    b.Navigation("HeaderDeclinedStatusNavigation");

                    b.Navigation("InventoryFacility");

                    b.Navigation("ItemApprovedStatusNavigation");

                    b.Navigation("ItemCancelStatusNavigation");

                    b.Navigation("ItemDeclinedStatusNavigation");

                    b.Navigation("PayToParty");

                    b.Navigation("PrimaryStoreGroup");

                    b.Navigation("RequirementMethodEnum");

                    b.Navigation("ReserveOrderEnum");

                    b.Navigation("StoreCreditAccountEnum");

                    b.Navigation("VatTaxAuth");
                });

            modelBuilder.Entity("Domain.ProductStoreCatalog", b =>
                {
                    b.HasOne("Domain.ProdCatalog", "ProdCatalog")
                        .WithMany("ProductStoreCatalogs")
                        .HasForeignKey("ProdCatalogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PS_CAT_CATALOG");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreCatalogs")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PS_CAT_PRDSTR");

                    b.Navigation("ProdCatalog");

                    b.Navigation("ProductStore");
                });

            modelBuilder.Entity("Domain.ProductStoreEmailSetting", b =>
                {
                    b.HasOne("Domain.Enumeration", "EmailTypeNavigation")
                        .WithMany("ProductStoreEmailSettings")
                        .HasForeignKey("EmailType")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTREM_ENUM");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreEmailSettings")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTREM_PRDS");

                    b.Navigation("EmailTypeNavigation");

                    b.Navigation("ProductStore");
                });

            modelBuilder.Entity("Domain.ProductStoreFacility", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("ProductStoreFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRFAC_FAC");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreFacilities")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRFAC_PRDS");

                    b.Navigation("Facility");

                    b.Navigation("ProductStore");
                });

            modelBuilder.Entity("Domain.ProductStoreFinActSetting", b =>
                {
                    b.HasOne("Domain.FinAccountType", "FinAccountType")
                        .WithMany("ProductStoreFinActSettings")
                        .HasForeignKey("FinAccountTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRSTFNAC_FNACTP");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreFinActSettings")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRSTFNAC_PRDS");

                    b.HasOne("Domain.Survey", "PurchaseSurvey")
                        .WithMany("ProductStoreFinActSettings")
                        .HasForeignKey("PurchaseSurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRSTFNAC_SRVY");

                    b.HasOne("Domain.Enumeration", "ReplenishMethodEnum")
                        .WithMany("ProductStoreFinActSettings")
                        .HasForeignKey("ReplenishMethodEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRSTFNAC_FARPMTD");

                    b.Navigation("FinAccountType");

                    b.Navigation("ProductStore");

                    b.Navigation("PurchaseSurvey");

                    b.Navigation("ReplenishMethodEnum");
                });

            modelBuilder.Entity("Domain.ProductStoreGroup", b =>
                {
                    b.HasOne("Domain.ProductStoreGroup", "PrimaryParentGroup")
                        .WithMany("InversePrimaryParentGroup")
                        .HasForeignKey("PrimaryParentGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDSTR_GP_PGRP");

                    b.HasOne("Domain.ProductStoreGroupType", "ProductStoreGroupType")
                        .WithMany("ProductStoreGroups")
                        .HasForeignKey("ProductStoreGroupTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDSTR_GP_TYPE");

                    b.Navigation("PrimaryParentGroup");

                    b.Navigation("ProductStoreGroupType");
                });

            modelBuilder.Entity("Domain.ProductStoreGroupMember", b =>
                {
                    b.HasOne("Domain.ProductStoreGroup", "ProductStoreGroup")
                        .WithMany("ProductStoreGroupMembers")
                        .HasForeignKey("ProductStoreGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTR_MEM_PSGRP");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreGroupMembers")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTR_MEM_PRDSTR");

                    b.Navigation("ProductStore");

                    b.Navigation("ProductStoreGroup");
                });

            modelBuilder.Entity("Domain.ProductStoreGroupRole", b =>
                {
                    b.HasOne("Domain.ProductStoreGroup", "ProductStoreGroup")
                        .WithMany("ProductStoreGroupRoles")
                        .HasForeignKey("ProductStoreGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PSGRP_RLE_PSGP");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("ProductStoreGroupRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PSGRP_RLE_PTRLE");

                    b.Navigation("PartyRole");

                    b.Navigation("ProductStoreGroup");
                });

            modelBuilder.Entity("Domain.ProductStoreGroupRollup", b =>
                {
                    b.HasOne("Domain.ProductStoreGroup", "ParentGroup")
                        .WithMany("ProductStoreGroupRollupParentGroups")
                        .HasForeignKey("ParentGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PSGRP_RLP_PARENT");

                    b.HasOne("Domain.ProductStoreGroup", "ProductStoreGroup")
                        .WithMany("ProductStoreGroupRollupProductStoreGroups")
                        .HasForeignKey("ProductStoreGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PSGRP_RLP_CURRENT");

                    b.Navigation("ParentGroup");

                    b.Navigation("ProductStoreGroup");
                });

            modelBuilder.Entity("Domain.ProductStoreKeywordOvrd", b =>
                {
                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreKeywordOvrds")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRKWO_PRDS");

                    b.HasOne("Domain.Enumeration", "TargetTypeEnum")
                        .WithMany("ProductStoreKeywordOvrds")
                        .HasForeignKey("TargetTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDSTRKWO_ENM");

                    b.Navigation("ProductStore");

                    b.Navigation("TargetTypeEnum");
                });

            modelBuilder.Entity("Domain.ProductStorePaymentSetting", b =>
                {
                    b.HasOne("Domain.CustomMethod", "PaymentCustomMethod")
                        .WithMany("ProductStorePaymentSettings")
                        .HasForeignKey("PaymentCustomMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDS_PS_CUS_MET");

                    b.HasOne("Domain.PaymentGatewayConfig", "PaymentGatewayConfig")
                        .WithMany("ProductStorePaymentSettings")
                        .HasForeignKey("PaymentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDS_PS_PGC");

                    b.HasOne("Domain.PaymentMethodType", "PaymentMethodType")
                        .WithMany("ProductStorePaymentSettings")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDS_PS_PMNTTP");

                    b.HasOne("Domain.Enumeration", "PaymentServiceTypeEnum")
                        .WithMany("ProductStorePaymentSettings")
                        .HasForeignKey("PaymentServiceTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDS_PS_ENUM");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStorePaymentSettings")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDS_PS_PRDS");

                    b.Navigation("PaymentCustomMethod");

                    b.Navigation("PaymentGatewayConfig");

                    b.Navigation("PaymentMethodType");

                    b.Navigation("PaymentServiceTypeEnum");

                    b.Navigation("ProductStore");
                });

            modelBuilder.Entity("Domain.ProductStorePromoAppl", b =>
                {
                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("ProductStorePromoAppls")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRPRMO_PRMO");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStorePromoAppls")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRPRMO_PRDS");

                    b.Navigation("ProductPromo");

                    b.Navigation("ProductStore");
                });

            modelBuilder.Entity("Domain.ProductStoreRole", b =>
                {
                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreRoles")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRRLE_PRDS");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("ProductStoreRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRRLE_PRLE");

                    b.Navigation("PartyRole");

                    b.Navigation("ProductStore");
                });

            modelBuilder.Entity("Domain.ProductStoreShipmentMeth", b =>
                {
                    b.HasOne("Domain.CustomMethod", "ShipmentCustomMethod")
                        .WithMany("ProductStoreShipmentMeths")
                        .HasForeignKey("ShipmentCustomMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDS_SM_CUS_MET");

                    b.HasOne("Domain.ShipmentGatewayConfig", "ShipmentGatewayConfig")
                        .WithMany("ProductStoreShipmentMeths")
                        .HasForeignKey("ShipmentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDS_SM_SGC");

                    b.HasOne("Domain.ShipmentMethodType", "ShipmentMethodType")
                        .WithMany("ProductStoreShipmentMeths")
                        .HasForeignKey("ShipmentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHIPMENTMETHODTYPE");

                    b.Navigation("ShipmentCustomMethod");

                    b.Navigation("ShipmentGatewayConfig");

                    b.Navigation("ShipmentMethodType");
                });

            modelBuilder.Entity("Domain.ProductStoreSurveyAppl", b =>
                {
                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreSurveyAppls")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDSTRSVY_PRDS");

                    b.HasOne("Domain.SurveyApplType", "SurveyApplType")
                        .WithMany("ProductStoreSurveyAppls")
                        .HasForeignKey("SurveyApplTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDSTRSVY_SATP");

                    b.HasOne("Domain.Survey", "Survey")
                        .WithMany("ProductStoreSurveyAppls")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDSTRSVY_SRVY");

                    b.Navigation("ProductStore");

                    b.Navigation("Survey");

                    b.Navigation("SurveyApplType");
                });

            modelBuilder.Entity("Domain.ProductStoreTelecomSetting", b =>
                {
                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreTelecomSettings")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDS_TS_PRDS");

                    b.HasOne("Domain.CustomMethod", "TelecomCustomMethod")
                        .WithMany("ProductStoreTelecomSettings")
                        .HasForeignKey("TelecomCustomMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDS_TS_CUS_MET");

                    b.HasOne("Domain.TelecomGatewayConfig", "TelecomGatewayConfig")
                        .WithMany("ProductStoreTelecomSettings")
                        .HasForeignKey("TelecomGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PRDS_TS_PGC");

                    b.HasOne("Domain.TelecomMethodType", "TelecomMethodType")
                        .WithMany("ProductStoreTelecomSettings")
                        .HasForeignKey("TelecomMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDS_TS_TELTP");

                    b.HasOne("Domain.Enumeration", "TelecomMsgTypeEnum")
                        .WithMany("ProductStoreTelecomSettings")
                        .HasForeignKey("TelecomMsgTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDS_TS_ENUM");

                    b.Navigation("ProductStore");

                    b.Navigation("TelecomCustomMethod");

                    b.Navigation("TelecomGatewayConfig");

                    b.Navigation("TelecomMethodType");

                    b.Navigation("TelecomMsgTypeEnum");
                });

            modelBuilder.Entity("Domain.ProductStoreVendorPayment", b =>
                {
                    b.HasOne("Domain.Enumeration", "CreditCardEnum")
                        .WithMany("ProductStoreVendorPayments")
                        .HasForeignKey("CreditCardEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRVPM_CCEN");

                    b.HasOne("Domain.PaymentMethodType", "PaymentMethodType")
                        .WithMany("ProductStoreVendorPayments")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRVPM_PMMT");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreVendorPayments")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRVPM_PRDS");

                    b.HasOne("Domain.Party", "VendorParty")
                        .WithMany("ProductStoreVendorPayments")
                        .HasForeignKey("VendorPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRVPM_VPTY");

                    b.Navigation("CreditCardEnum");

                    b.Navigation("PaymentMethodType");

                    b.Navigation("ProductStore");

                    b.Navigation("VendorParty");
                });

            modelBuilder.Entity("Domain.ProductStoreVendorShipment", b =>
                {
                    b.HasOne("Domain.Party", "CarrierParty")
                        .WithMany("ProductStoreVendorShipmentCarrierParties")
                        .HasForeignKey("CarrierPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRVSH_CPTY");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ProductStoreVendorShipments")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRVSH_PRDS");

                    b.HasOne("Domain.ShipmentMethodType", "ShipmentMethodType")
                        .WithMany("ProductStoreVendorShipments")
                        .HasForeignKey("ShipmentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRVSH_SHMT");

                    b.HasOne("Domain.Party", "VendorParty")
                        .WithMany("ProductStoreVendorShipmentVendorParties")
                        .HasForeignKey("VendorPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PRDSTRVSH_VPTY");

                    b.Navigation("CarrierParty");

                    b.Navigation("ProductStore");

                    b.Navigation("ShipmentMethodType");

                    b.Navigation("VendorParty");
                });

            modelBuilder.Entity("Domain.ProductSubscriptionResource", b =>
                {
                    b.HasOne("Domain.Uom", "AvailableTimeUom")
                        .WithMany("ProductSubscriptionResourceAvailableTimeUoms")
                        .HasForeignKey("AvailableTimeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_SBRS_ATU");

                    b.HasOne("Domain.Uom", "CanclAutmExtTimeUom")
                        .WithMany("ProductSubscriptionResourceCanclAutmExtTimeUoms")
                        .HasForeignKey("CanclAutmExtTimeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_SBRS_CTU");

                    b.HasOne("Domain.Uom", "GracePeriodOnExpiryUom")
                        .WithMany("ProductSubscriptionResourceGracePeriodOnExpiryUoms")
                        .HasForeignKey("GracePeriodOnExpiryUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_SBRS_GTU");

                    b.HasOne("Domain.Uom", "MaxLifeTimeUom")
                        .WithMany("ProductSubscriptionResourceMaxLifeTimeUoms")
                        .HasForeignKey("MaxLifeTimeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_SBRS_MTU");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ProductSubscriptionResources")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_SBRS_PROD");

                    b.HasOne("Domain.SubscriptionResource", "SubscriptionResource")
                        .WithMany("ProductSubscriptionResources")
                        .HasForeignKey("SubscriptionResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_SBRS_SBRS");

                    b.HasOne("Domain.RoleType", "UseRoleType")
                        .WithMany("ProductSubscriptionResources")
                        .HasForeignKey("UseRoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_SBRS_URT");

                    b.HasOne("Domain.Uom", "UseTimeUom")
                        .WithMany("ProductSubscriptionResourceUseTimeUoms")
                        .HasForeignKey("UseTimeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_SBRS_UTU");

                    b.Navigation("AvailableTimeUom");

                    b.Navigation("CanclAutmExtTimeUom");

                    b.Navigation("GracePeriodOnExpiryUom");

                    b.Navigation("MaxLifeTimeUom");

                    b.Navigation("Product");

                    b.Navigation("SubscriptionResource");

                    b.Navigation("UseRoleType");

                    b.Navigation("UseTimeUom");
                });

            modelBuilder.Entity("Domain.ProductType", b =>
                {
                    b.HasOne("Domain.ProductType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PROD_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ProductTypeAttr", b =>
                {
                    b.HasOne("Domain.ProductType", "ProductType")
                        .WithMany("ProductTypeAttrs")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PROD_TYPE_ATTR");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Domain.ProtectedView", b =>
                {
                    b.HasOne("Domain.SecurityGroup", "Group")
                        .WithMany("ProtectedViews")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VIEW_SECGRP_GRP");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Domain.QuantityBreak", b =>
                {
                    b.HasOne("Domain.QuantityBreakType", "QuantityBreakType")
                        .WithMany("QuantityBreaks")
                        .HasForeignKey("QuantityBreakTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUANT_BRK_TYPE");

                    b.Navigation("QuantityBreakType");
                });

            modelBuilder.Entity("Domain.Quote", b =>
                {
                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("Quotes")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_CUOM");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("Quotes")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_PRTY");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("Quotes")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_PRDS");

                    b.HasOne("Domain.QuoteType", "QuoteType")
                        .WithMany("Quotes")
                        .HasForeignKey("QuoteTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_QTTYP");

                    b.HasOne("Domain.Enumeration", "SalesChannelEnum")
                        .WithMany("Quotes")
                        .HasForeignKey("SalesChannelEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_CHANNEL");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("Quotes")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_STATUS");

                    b.HasOne("Domain.Vehicle", "Vehicle")
                        .WithMany("Quotes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_VEHICLE");

                    b.Navigation("CurrencyUom");

                    b.Navigation("Party");

                    b.Navigation("ProductStore");

                    b.Navigation("QuoteType");

                    b.Navigation("SalesChannelEnum");

                    b.Navigation("Status");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.QuoteAdjustment", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("QuoteAdjustments")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ADJ_USERL");

                    b.HasOne("Domain.GlAccount", "OverrideGlAccount")
                        .WithMany("QuoteAdjustments")
                        .HasForeignKey("OverrideGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ADJ_OGLA");

                    b.HasOne("Domain.Geo", "PrimaryGeo")
                        .WithMany("QuoteAdjustmentPrimaryGeos")
                        .HasForeignKey("PrimaryGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ADJ_PRGEO");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("QuoteAdjustments")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ADJ_PROMO");

                    b.HasOne("Domain.OrderAdjustmentType", "QuoteAdjustmentType")
                        .WithMany("QuoteAdjustments")
                        .HasForeignKey("QuoteAdjustmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ADJ_TYPE");

                    b.HasOne("Domain.Quote", "Quote")
                        .WithMany("QuoteAdjustments")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ADJ_OHEAD");

                    b.HasOne("Domain.Geo", "SecondaryGeo")
                        .WithMany("QuoteAdjustmentSecondaryGeos")
                        .HasForeignKey("SecondaryGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ADJ_SCGEO");

                    b.HasOne("Domain.TaxAuthority", "TaxAuth")
                        .WithMany("QuoteAdjustments")
                        .HasForeignKey("TaxAuthGeoId", "TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ADJ_TXA");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("OverrideGlAccount");

                    b.Navigation("PrimaryGeo");

                    b.Navigation("ProductPromo");

                    b.Navigation("Quote");

                    b.Navigation("QuoteAdjustmentType");

                    b.Navigation("SecondaryGeo");

                    b.Navigation("TaxAuth");
                });

            modelBuilder.Entity("Domain.QuoteAttribute", b =>
                {
                    b.HasOne("Domain.Quote", "Quote")
                        .WithMany("QuoteAttributes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_ATTR");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.QuoteCoefficient", b =>
                {
                    b.HasOne("Domain.Quote", "Quote")
                        .WithMany("QuoteCoefficients")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_COEFF");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.QuoteItem", b =>
                {
                    b.HasOne("Domain.CustRequest", "CustRequest")
                        .WithMany("QuoteItems")
                        .HasForeignKey("CustRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ITM_CSRQ");

                    b.HasOne("Domain.DeliverableType", "DeliverableType")
                        .WithMany("QuoteItems")
                        .HasForeignKey("DeliverableTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ITM_DELT");

                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("QuoteItems")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ITM_PFEAT");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("QuoteItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ITM_PROD");

                    b.HasOne("Domain.Quote", "Quote")
                        .WithMany("QuoteItems")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_ITM_QTE");

                    b.HasOne("Domain.SkillType", "SkillType")
                        .WithMany("QuoteItems")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ITM_SKLT");

                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("QuoteItems")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ITM_UOM");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("QuoteItems")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ITM_WKEFF");

                    b.HasOne("Domain.CustRequestItem", "CustRequestI")
                        .WithMany("QuoteItems")
                        .HasForeignKey("CustRequestId", "CustRequestItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_ITM_CSRITM");

                    b.Navigation("CustRequest");

                    b.Navigation("CustRequestI");

                    b.Navigation("DeliverableType");

                    b.Navigation("Product");

                    b.Navigation("ProductFeature");

                    b.Navigation("Quote");

                    b.Navigation("SkillType");

                    b.Navigation("Uom");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.QuoteNote", b =>
                {
                    b.HasOne("Domain.NoteDatum", "Note")
                        .WithMany("QuoteNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_NT_NOTE");

                    b.HasOne("Domain.Quote", "Quote")
                        .WithMany("QuoteNotes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_NT_QTE");

                    b.Navigation("Note");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.QuoteRole", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("QuoteRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_RL_PARTY");

                    b.HasOne("Domain.Quote", "Quote")
                        .WithMany("QuoteRoles")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_RL_QUOTE");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("QuoteRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_RL_PROLE");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.QuoteTerm", b =>
                {
                    b.HasOne("Domain.Quote", "Quote")
                        .WithMany("QuoteTerms")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_TERM_QTE");

                    b.HasOne("Domain.TermType", "TermType")
                        .WithMany("QuoteTerms")
                        .HasForeignKey("TermTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_TERM_TTYPE");

                    b.Navigation("Quote");

                    b.Navigation("TermType");
                });

            modelBuilder.Entity("Domain.QuoteTermAttribute", b =>
                {
                    b.HasOne("Domain.QuoteTerm", "QuoteTerm")
                        .WithMany("QuoteTermAttributes")
                        .HasForeignKey("TermTypeId", "QuoteId", "QuoteItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_TERM_ATTR");

                    b.Navigation("QuoteTerm");
                });

            modelBuilder.Entity("Domain.QuoteType", b =>
                {
                    b.HasOne("Domain.QuoteType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("QUOTE_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.QuoteTypeAttr", b =>
                {
                    b.HasOne("Domain.QuoteType", "QuoteType")
                        .WithMany("QuoteTypeAttrs")
                        .HasForeignKey("QuoteTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_TPAT_QTYP");

                    b.Navigation("QuoteType");
                });

            modelBuilder.Entity("Domain.QuoteWorkEffort", b =>
                {
                    b.HasOne("Domain.Quote", "Quote")
                        .WithMany("QuoteWorkEfforts")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_WE_QUOTE");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("QuoteWorkEfforts")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("QUOTE_WE_WEFF");

                    b.Navigation("Quote");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.RateAmount", b =>
                {
                    b.HasOne("Domain.EmplPositionType", "EmplPositionType")
                        .WithMany("RateAmounts")
                        .HasForeignKey("EmplPositionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RATE_AMOUNT_EPT");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("RateAmounts")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RATE_AMOUNT_PTY");

                    b.HasOne("Domain.PeriodType", "PeriodType")
                        .WithMany("RateAmounts")
                        .HasForeignKey("PeriodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RATE_AMOUNT_PT");

                    b.HasOne("Domain.Uom", "RateCurrencyUom")
                        .WithMany("RateAmounts")
                        .HasForeignKey("RateCurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RATE_AMOUNT_RCT");

                    b.HasOne("Domain.RateType", "RateType")
                        .WithMany("RateAmounts")
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RATE_AMOUNT_RT");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("RateAmounts")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RATE_AMOUNT_WE");

                    b.Navigation("EmplPositionType");

                    b.Navigation("Party");

                    b.Navigation("PeriodType");

                    b.Navigation("RateCurrencyUom");

                    b.Navigation("RateType");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.RecurrenceInfo", b =>
                {
                    b.HasOne("Domain.RecurrenceRule", "ExceptionRule")
                        .WithMany("RecurrenceInfoExceptionRules")
                        .HasForeignKey("ExceptionRuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REC_INFO_EX_RCRLE");

                    b.HasOne("Domain.RecurrenceRule", "RecurrenceRule")
                        .WithMany("RecurrenceInfoRecurrenceRules")
                        .HasForeignKey("RecurrenceRuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REC_INFO_RCRLE");

                    b.Navigation("ExceptionRule");

                    b.Navigation("RecurrenceRule");
                });

            modelBuilder.Entity("Domain.ReorderGuideline", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("ReorderGuidelines")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REORDER_GD_FAC");

                    b.HasOne("Domain.Geo", "Geo")
                        .WithMany("ReorderGuidelines")
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REORDER_GD_GEO");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("ReorderGuidelines")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REORDER_GD_PARTY");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ReorderGuidelines")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REORDER_GD_PROD");

                    b.Navigation("Facility");

                    b.Navigation("Geo");

                    b.Navigation("Party");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Requirement", b =>
                {
                    b.HasOne("Domain.Deliverable", "Deliverable")
                        .WithMany("Requirements")
                        .HasForeignKey("DeliverableId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REQ_DELIVERABLE");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("Requirements")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REQ_FACILITY");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("Requirements")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REQ_FIXED_ASSET");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("Requirements")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REQ_PRODUCT");

                    b.HasOne("Domain.RequirementType", "RequirementType")
                        .WithMany("Requirements")
                        .HasForeignKey("RequirementTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REQ_TYPE");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("Requirements")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REQ_STTS");

                    b.Navigation("Deliverable");

                    b.Navigation("Facility");

                    b.Navigation("FixedAsset");

                    b.Navigation("Product");

                    b.Navigation("RequirementType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.RequirementAttribute", b =>
                {
                    b.HasOne("Domain.Requirement", "Requirement")
                        .WithMany("RequirementAttributes")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_ATTR");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Domain.RequirementBudgetAllocation", b =>
                {
                    b.HasOne("Domain.Requirement", "Requirement")
                        .WithMany("RequirementBudgetAllocations")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_BDGTAL_REQ");

                    b.HasOne("Domain.BudgetItem", "BudgetI")
                        .WithMany("RequirementBudgetAllocations")
                        .HasForeignKey("BudgetId", "BudgetItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_BDGTAL_BITM");

                    b.Navigation("BudgetI");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Domain.RequirementCustRequest", b =>
                {
                    b.HasOne("Domain.Requirement", "Requirement")
                        .WithMany("RequirementCustRequests")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_CSREQ_REQ");

                    b.HasOne("Domain.CustRequestItem", "CustRequestI")
                        .WithMany("RequirementCustRequests")
                        .HasForeignKey("CustRequestId", "CustRequestItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_CSREQ_CRITM");

                    b.Navigation("CustRequestI");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Domain.RequirementRole", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("RequirementRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_ROLE_PRTY");

                    b.HasOne("Domain.Requirement", "Requirement")
                        .WithMany("RequirementRoles")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_ROLE_REQ");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("RequirementRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_ROLE_PROLE");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Domain.RequirementStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("RequirementStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REQ_STTS_USRLGN");

                    b.HasOne("Domain.Requirement", "Requirement")
                        .WithMany("RequirementStatuses")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_STTS_REQ");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("RequirementStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_STTS_STTS");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("Requirement");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.RequirementType", b =>
                {
                    b.HasOne("Domain.RequirementType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("REQ_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.RequirementTypeAttr", b =>
                {
                    b.HasOne("Domain.RequirementType", "RequirementType")
                        .WithMany("RequirementTypeAttrs")
                        .HasForeignKey("RequirementTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("REQ_TYPE_ATTR");

                    b.Navigation("RequirementType");
                });

            modelBuilder.Entity("Domain.RespondingParty", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("RespondingParties")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RESP_PTY_CMECH");

                    b.HasOne("Domain.CustRequest", "CustRequest")
                        .WithMany("RespondingParties")
                        .HasForeignKey("CustRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RESP_PTY_CSREQ");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("RespondingParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RESP_PTY_PARTY");

                    b.Navigation("ContactMech");

                    b.Navigation("CustRequest");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.ResponsibilityType", b =>
                {
                    b.HasOne("Domain.ResponsibilityType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RESPON_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ReturnAdjustment", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("ReturnAdjustments")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_USERL");

                    b.HasOne("Domain.OrderAdjustment", "OrderAdjustment")
                        .WithMany("ReturnAdjustments")
                        .HasForeignKey("OrderAdjustmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_ORDADJ");

                    b.HasOne("Domain.GlAccount", "OverrideGlAccount")
                        .WithMany("ReturnAdjustments")
                        .HasForeignKey("OverrideGlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_OGLA");

                    b.HasOne("Domain.Geo", "PrimaryGeo")
                        .WithMany("ReturnAdjustmentPrimaryGeos")
                        .HasForeignKey("PrimaryGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_PRGEO");

                    b.HasOne("Domain.ProductPromo", "ProductPromo")
                        .WithMany("ReturnAdjustments")
                        .HasForeignKey("ProductPromoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_PROMO");

                    b.HasOne("Domain.ReturnAdjustmentType", "ReturnAdjustmentType")
                        .WithMany("ReturnAdjustments")
                        .HasForeignKey("ReturnAdjustmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_TYPE");

                    b.HasOne("Domain.ReturnHeader", "Return")
                        .WithMany("ReturnAdjustments")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_RHEAD");

                    b.HasOne("Domain.ReturnType", "ReturnType")
                        .WithMany("ReturnAdjustments")
                        .HasForeignKey("ReturnTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RET_ADJ_RTN_TYPE");

                    b.HasOne("Domain.Geo", "SecondaryGeo")
                        .WithMany("ReturnAdjustmentSecondaryGeos")
                        .HasForeignKey("SecondaryGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_SCGEO");

                    b.HasOne("Domain.TaxAuthorityRateProduct", "TaxAuthorityRateSeq")
                        .WithMany("ReturnAdjustments")
                        .HasForeignKey("TaxAuthorityRateSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_TARP");

                    b.HasOne("Domain.TaxAuthority", "TaxAuth")
                        .WithMany("ReturnAdjustments")
                        .HasForeignKey("TaxAuthGeoId", "TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_TXA");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("OrderAdjustment");

                    b.Navigation("OverrideGlAccount");

                    b.Navigation("PrimaryGeo");

                    b.Navigation("ProductPromo");

                    b.Navigation("Return");

                    b.Navigation("ReturnAdjustmentType");

                    b.Navigation("ReturnType");

                    b.Navigation("SecondaryGeo");

                    b.Navigation("TaxAuth");

                    b.Navigation("TaxAuthorityRateSeq");
                });

            modelBuilder.Entity("Domain.ReturnAdjustmentType", b =>
                {
                    b.HasOne("Domain.ReturnAdjustmentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ADJ_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ReturnContactMech", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("ReturnContactMeches")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RETURN_CMECH_CM");

                    b.HasOne("Domain.ContactMechPurposeType", "ContactMechPurposeType")
                        .WithMany("ReturnContactMeches")
                        .HasForeignKey("ContactMechPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RETURN_CMECH_CMPT");

                    b.HasOne("Domain.ReturnHeader", "Return")
                        .WithMany("ReturnContactMeches")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RETURN_CMECH_HDR");

                    b.Navigation("ContactMech");

                    b.Navigation("ContactMechPurposeType");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Domain.ReturnHeader", b =>
                {
                    b.HasOne("Domain.BillingAccount", "BillingAccount")
                        .WithMany("ReturnHeaders")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_TO_BACT");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("ReturnHeaders")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_HDR_CUOM");

                    b.HasOne("Domain.Facility", "DestinationFacility")
                        .WithMany("ReturnHeaders")
                        .HasForeignKey("DestinationFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_TO_FACILITY");

                    b.HasOne("Domain.FinAccount", "FinAccount")
                        .WithMany("ReturnHeaders")
                        .HasForeignKey("FinAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_TO_FACT");

                    b.HasOne("Domain.Party", "FromParty")
                        .WithMany("ReturnHeaderFromParties")
                        .HasForeignKey("FromPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_FROM_PARTY");

                    b.HasOne("Domain.ContactMech", "OriginContactMech")
                        .WithMany("ReturnHeaders")
                        .HasForeignKey("OriginContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_FROM_CTM");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithMany("ReturnHeaders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_TO_PAYMETH");

                    b.HasOne("Domain.ReturnHeaderType", "ReturnHeaderType")
                        .WithMany("ReturnHeaders")
                        .HasForeignKey("ReturnHeaderTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_HEAD_TYPE");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("ReturnHeaders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_STTS_ITEM");

                    b.HasOne("Domain.Party", "ToParty")
                        .WithMany("ReturnHeaderToParties")
                        .HasForeignKey("ToPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_TO_PARTY");

                    b.Navigation("BillingAccount");

                    b.Navigation("CurrencyUom");

                    b.Navigation("DestinationFacility");

                    b.Navigation("FinAccount");

                    b.Navigation("FromParty");

                    b.Navigation("OriginContactMech");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ReturnHeaderType");

                    b.Navigation("Status");

                    b.Navigation("ToParty");
                });

            modelBuilder.Entity("Domain.ReturnHeaderType", b =>
                {
                    b.HasOne("Domain.ReturnHeaderType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTHEAD_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ReturnItem", b =>
                {
                    b.HasOne("Domain.StatusItem", "ExpectedItemStatusNavigation")
                        .WithMany("ReturnItemExpectedItemStatusNavigations")
                        .HasForeignKey("ExpectedItemStatus")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_ITEM_ITSTT");

                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("ReturnItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_ITEM_ODR");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_ITEM_PROD");

                    b.HasOne("Domain.ReturnHeader", "Return")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RTN_ITEM_RTN");

                    b.HasOne("Domain.ReturnItemResponse", "ReturnItemResponse")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnItemResponseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_ITEM_RESP");

                    b.HasOne("Domain.ReturnItemType", "ReturnItemType")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnItemTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_ITEM_TYPE");

                    b.HasOne("Domain.ReturnReason", "ReturnReason")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnReasonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_ITEM_REASON");

                    b.HasOne("Domain.ReturnType", "ReturnType")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_TYPE");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("ReturnItemStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_ITEM_STTSIT");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("ReturnItems")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_ITEM_ODRIT");

                    b.Navigation("ExpectedItemStatusNavigation");

                    b.Navigation("Order");

                    b.Navigation("OrderI");

                    b.Navigation("Product");

                    b.Navigation("Return");

                    b.Navigation("ReturnItemResponse");

                    b.Navigation("ReturnItemType");

                    b.Navigation("ReturnReason");

                    b.Navigation("ReturnType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ReturnItemBilling", b =>
                {
                    b.HasOne("Domain.ReturnHeader", "Return")
                        .WithMany("ReturnItemBillings")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RTN_ITBLNG_RHDR");

                    b.HasOne("Domain.ShipmentReceipt", "ShipmentReceipt")
                        .WithMany("ReturnItemBillings")
                        .HasForeignKey("ShipmentReceiptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RITBL_SHIPRCPT");

                    b.HasOne("Domain.InvoiceItem", "InvoiceI")
                        .WithMany("ReturnItemBillings")
                        .HasForeignKey("InvoiceId", "InvoiceItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RETURN_ITBLNG_IITM");

                    b.HasOne("Domain.ReturnItem", "ReturnI")
                        .WithMany("ReturnItemBillings")
                        .HasForeignKey("ReturnId", "ReturnItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RTN_ITBLNG_RITM");

                    b.Navigation("InvoiceI");

                    b.Navigation("Return");

                    b.Navigation("ReturnI");

                    b.Navigation("ShipmentReceipt");
                });

            modelBuilder.Entity("Domain.ReturnItemResponse", b =>
                {
                    b.HasOne("Domain.BillingAccount", "BillingAccount")
                        .WithMany("ReturnItemResponses")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_PAY_BACT");

                    b.HasOne("Domain.FinAccountTran", "FinAccountTrans")
                        .WithMany("ReturnItemResponses")
                        .HasForeignKey("FinAccountTransId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_PAY_FINACTTX");

                    b.HasOne("Domain.OrderPaymentPreference", "OrderPaymentPreference")
                        .WithMany("ReturnItemResponses")
                        .HasForeignKey("OrderPaymentPreferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_PAY_ORDPAYPF");

                    b.HasOne("Domain.Payment", "Payment")
                        .WithMany("ReturnItemResponses")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_PAY_PAYMENT");

                    b.HasOne("Domain.OrderHeader", "ReplacementOrder")
                        .WithMany("ReturnItemResponses")
                        .HasForeignKey("ReplacementOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_RESP_NEWORD");

                    b.Navigation("BillingAccount");

                    b.Navigation("FinAccountTrans");

                    b.Navigation("OrderPaymentPreference");

                    b.Navigation("Payment");

                    b.Navigation("ReplacementOrder");
                });

            modelBuilder.Entity("Domain.ReturnItemShipment", b =>
                {
                    b.HasOne("Domain.ReturnHeader", "Return")
                        .WithMany("ReturnItemShipments")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RIT_SHPMT_RHDR");

                    b.HasOne("Domain.Shipment", "Shipment")
                        .WithMany("ReturnItemShipments")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RIT_SHPMT_SHPMT");

                    b.HasOne("Domain.ReturnItem", "ReturnI")
                        .WithMany("ReturnItemShipments")
                        .HasForeignKey("ReturnId", "ReturnItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RIT_SHPMT_RITM");

                    b.HasOne("Domain.ShipmentItem", "ShipmentI")
                        .WithMany("ReturnItemShipments")
                        .HasForeignKey("ShipmentId", "ShipmentItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RIT_SHPMT_SHPITM");

                    b.Navigation("Return");

                    b.Navigation("ReturnI");

                    b.Navigation("Shipment");

                    b.Navigation("ShipmentI");
                });

            modelBuilder.Entity("Domain.ReturnItemType", b =>
                {
                    b.HasOne("Domain.ReturnItemType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RETURN_ITEM_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ReturnItemTypeMap", b =>
                {
                    b.HasOne("Domain.ReturnHeaderType", "ReturnHeaderType")
                        .WithMany("ReturnItemTypeMaps")
                        .HasForeignKey("ReturnHeaderTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("RETITMMAP_RETTYP");

                    b.Navigation("ReturnHeaderType");
                });

            modelBuilder.Entity("Domain.ReturnStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("ReturnStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_STTS_USRLGN");

                    b.HasOne("Domain.ReturnHeader", "Return")
                        .WithMany("ReturnStatuses")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_STTS_RTN");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("ReturnStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("RTN_STTS_STTS");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("Return");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.RoleType", b =>
                {
                    b.HasOne("Domain.RoleType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ROLE_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.RoleTypeAttr", b =>
                {
                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("RoleTypeAttrs")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("ROLE_TYPATR_RTYP");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("Domain.SalaryStepNew", b =>
                {
                    b.HasOne("Domain.PayGrade", "PayGrade")
                        .WithMany("SalaryStepNews")
                        .HasForeignKey("PayGradeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SLRY_STP_PGRD_NEW");

                    b.Navigation("PayGrade");
                });

            modelBuilder.Entity("Domain.SalesForecast", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLogin")
                        .WithMany("SalesForecastCreatedByUserLogins")
                        .HasForeignKey("CreatedByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4C_CRT_USER");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("SalesForecasts")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4C_CUR_UOM");

                    b.HasOne("Domain.CustomTimePeriod", "CustomTimePeriod")
                        .WithMany("SalesForecasts")
                        .HasForeignKey("CustomTimePeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4C_TIME_PER");

                    b.HasOne("Domain.Party", "InternalParty")
                        .WithMany("SalesForecastInternalParties")
                        .HasForeignKey("InternalPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4C_INT_PARTY");

                    b.HasOne("Domain.UserLogin", "ModifiedByUserLogin")
                        .WithMany("SalesForecastModifiedByUserLogins")
                        .HasForeignKey("ModifiedByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4C_MOD_USER");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("SalesForecastOrganizationParties")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4C_ORG_PARTY");

                    b.HasOne("Domain.SalesForecast", "ParentSalesForecast")
                        .WithMany("InverseParentSalesForecast")
                        .HasForeignKey("ParentSalesForecastId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4C_PARENT");

                    b.Navigation("CreatedByUserLogin");

                    b.Navigation("CurrencyUom");

                    b.Navigation("CustomTimePeriod");

                    b.Navigation("InternalParty");

                    b.Navigation("ModifiedByUserLogin");

                    b.Navigation("OrganizationParty");

                    b.Navigation("ParentSalesForecast");
                });

            modelBuilder.Entity("Domain.SalesForecastDetail", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("SalesForecastDetails")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4CDTL_PCTGRY");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("SalesForecastDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4CDTL_PROD");

                    b.HasOne("Domain.Uom", "QuantityUom")
                        .WithMany("SalesForecastDetails")
                        .HasForeignKey("QuantityUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4CDTL_QTY_UOM");

                    b.HasOne("Domain.SalesForecast", "SalesForecast")
                        .WithMany("SalesForecastDetails")
                        .HasForeignKey("SalesForecastId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SALES4CDTL_SALES4C");

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");

                    b.Navigation("QuantityUom");

                    b.Navigation("SalesForecast");
                });

            modelBuilder.Entity("Domain.SalesForecastHistory", b =>
                {
                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("SalesForecastHistories")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4CH_CUR_UOM");

                    b.HasOne("Domain.CustomTimePeriod", "CustomTimePeriod")
                        .WithMany("SalesForecastHistories")
                        .HasForeignKey("CustomTimePeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4CH_TIME_PER");

                    b.HasOne("Domain.Party", "InternalParty")
                        .WithMany("SalesForecastHistoryInternalParties")
                        .HasForeignKey("InternalPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4CH_INT_PARTY");

                    b.HasOne("Domain.UserLogin", "ModifiedByUserLogin")
                        .WithMany("SalesForecastHistories")
                        .HasForeignKey("ModifiedByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4CH_MOD_USER");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("SalesForecastHistoryOrganizationParties")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4CH_ORG_PARTY");

                    b.HasOne("Domain.SalesForecast", "SalesForecast")
                        .WithMany("SalesForecastHistories")
                        .HasForeignKey("SalesForecastId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SALES4CH_SALES4C");

                    b.Navigation("CurrencyUom");

                    b.Navigation("CustomTimePeriod");

                    b.Navigation("InternalParty");

                    b.Navigation("ModifiedByUserLogin");

                    b.Navigation("OrganizationParty");

                    b.Navigation("SalesForecast");
                });

            modelBuilder.Entity("Domain.SalesOpportunity", b =>
                {
                    b.HasOne("Domain.UserLogin", "CreatedByUserLoginNavigation")
                        .WithMany("SalesOpportunities")
                        .HasForeignKey("CreatedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SLSOPP_USRLGN");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("SalesOpportunities")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SLSOPP_CRNCY_UOM");

                    b.HasOne("Domain.DataSource", "DataSource")
                        .WithMany("SalesOpportunities")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SLSOPP_DTSRC");

                    b.HasOne("Domain.MarketingCampaign", "MarketingCampaign")
                        .WithMany("SalesOpportunities")
                        .HasForeignKey("MarketingCampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SLSOPP_MKTGCMPG");

                    b.HasOne("Domain.SalesOpportunityStage", "OpportunityStage")
                        .WithMany("SalesOpportunities")
                        .HasForeignKey("OpportunityStageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SLSOPP_STAGE");

                    b.HasOne("Domain.Enumeration", "TypeEnum")
                        .WithMany("SalesOpportunities")
                        .HasForeignKey("TypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SLSOPP_TYP_ENUM");

                    b.Navigation("CreatedByUserLoginNavigation");

                    b.Navigation("CurrencyUom");

                    b.Navigation("DataSource");

                    b.Navigation("MarketingCampaign");

                    b.Navigation("OpportunityStage");

                    b.Navigation("TypeEnum");
                });

            modelBuilder.Entity("Domain.SalesOpportunityCompetitor", b =>
                {
                    b.HasOne("Domain.SalesOpportunity", "SalesOpportunity")
                        .WithMany("SalesOpportunityCompetitors")
                        .HasForeignKey("SalesOpportunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SOPPCOMP_SOPP");

                    b.Navigation("SalesOpportunity");
                });

            modelBuilder.Entity("Domain.SalesOpportunityHistory", b =>
                {
                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("SalesOpportunityHistories")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SLOPHI_CRNCY_UOM");

                    b.HasOne("Domain.UserLogin", "ModifiedByUserLoginNavigation")
                        .WithMany("SalesOpportunityHistories")
                        .HasForeignKey("ModifiedByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SLOPHI_USRLGN");

                    b.HasOne("Domain.SalesOpportunityStage", "OpportunityStage")
                        .WithMany("SalesOpportunityHistories")
                        .HasForeignKey("OpportunityStageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SLOPHI_STAGE");

                    b.HasOne("Domain.SalesOpportunity", "SalesOpportunity")
                        .WithMany("SalesOpportunityHistories")
                        .HasForeignKey("SalesOpportunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SLOPHI_SLSOPP");

                    b.Navigation("CurrencyUom");

                    b.Navigation("ModifiedByUserLoginNavigation");

                    b.Navigation("OpportunityStage");

                    b.Navigation("SalesOpportunity");
                });

            modelBuilder.Entity("Domain.SalesOpportunityQuote", b =>
                {
                    b.HasOne("Domain.Quote", "Quote")
                        .WithMany("SalesOpportunityQuotes")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SOPPQTE_QTE");

                    b.HasOne("Domain.SalesOpportunity", "SalesOpportunity")
                        .WithMany("SalesOpportunityQuotes")
                        .HasForeignKey("SalesOpportunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SOPPQTE_SOPP");

                    b.Navigation("Quote");

                    b.Navigation("SalesOpportunity");
                });

            modelBuilder.Entity("Domain.SalesOpportunityRole", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("SalesOpportunityRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SLSOPPRL_PARTY");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("SalesOpportunityRoles")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SLSOPPRL_ROLETYPE");

                    b.HasOne("Domain.SalesOpportunity", "SalesOpportunity")
                        .WithMany("SalesOpportunityRoles")
                        .HasForeignKey("SalesOpportunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SLSOPPRL_SLSOPP");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("SalesOpportunityRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SLSOPPRL_PTYROLE");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");

                    b.Navigation("RoleType");

                    b.Navigation("SalesOpportunity");
                });

            modelBuilder.Entity("Domain.SalesOpportunityTrckCode", b =>
                {
                    b.HasOne("Domain.SalesOpportunity", "SalesOpportunity")
                        .WithMany("SalesOpportunityTrckCodes")
                        .HasForeignKey("SalesOpportunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SOPPTRKCD_SOPP");

                    b.Navigation("SalesOpportunity");
                });

            modelBuilder.Entity("Domain.SalesOpportunityWorkEffort", b =>
                {
                    b.HasOne("Domain.SalesOpportunity", "SalesOpportunity")
                        .WithMany("SalesOpportunityWorkEfforts")
                        .HasForeignKey("SalesOpportunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SOPPWEFF_SOPP");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("SalesOpportunityWorkEfforts")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SOPPWEFF_WEFF");

                    b.Navigation("SalesOpportunity");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.SecurityGroupPermission", b =>
                {
                    b.HasOne("Domain.SecurityGroup", "Group")
                        .WithMany("SecurityGroupPermissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SEC_GRP_PERM_GRP");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Domain.SegmentGroup", b =>
                {
                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("SegmentGroups")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SGMTGRP_PRST");

                    b.HasOne("Domain.SegmentGroupType", "SegmentGroupType")
                        .WithMany("SegmentGroups")
                        .HasForeignKey("SegmentGroupTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SGMTGRP_TYPE");

                    b.Navigation("ProductStore");

                    b.Navigation("SegmentGroupType");
                });

            modelBuilder.Entity("Domain.SegmentGroupClassification", b =>
                {
                    b.HasOne("Domain.PartyClassificationGroup", "PartyClassificationGroup")
                        .WithMany("SegmentGroupClassifications")
                        .HasForeignKey("PartyClassificationGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SGMTGRPCLS_PCGP");

                    b.HasOne("Domain.SegmentGroup", "SegmentGroup")
                        .WithMany("SegmentGroupClassifications")
                        .HasForeignKey("SegmentGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SGMTGRPCLS_SGGP");

                    b.Navigation("PartyClassificationGroup");

                    b.Navigation("SegmentGroup");
                });

            modelBuilder.Entity("Domain.SegmentGroupGeo", b =>
                {
                    b.HasOne("Domain.Geo", "Geo")
                        .WithMany("SegmentGroupGeos")
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SGMTGRPGEO_GEO");

                    b.HasOne("Domain.SegmentGroup", "SegmentGroup")
                        .WithMany("SegmentGroupGeos")
                        .HasForeignKey("SegmentGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SGMTGRPGEO_SGGP");

                    b.Navigation("Geo");

                    b.Navigation("SegmentGroup");
                });

            modelBuilder.Entity("Domain.SegmentGroupRole", b =>
                {
                    b.HasOne("Domain.SegmentGroup", "SegmentGroup")
                        .WithMany("SegmentGroupRoles")
                        .HasForeignKey("SegmentGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SGMTGRPRL_SGGP");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("SegmentGroupRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SGMTGRPRL_PRLE");

                    b.Navigation("PartyRole");

                    b.Navigation("SegmentGroup");
                });

            modelBuilder.Entity("Domain.ServerHit", b =>
                {
                    b.HasOne("Domain.ServerHitType", "HitType")
                        .WithMany("ServerHits")
                        .HasForeignKey("HitTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SERVER_HIT_SHTYP");

                    b.HasOne("Domain.Visit", "Visit")
                        .WithMany("ServerHits")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SERVER_HIT_VISIT");

                    b.Navigation("HitType");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Domain.ServerHitBin", b =>
                {
                    b.HasOne("Domain.ServerHitType", "HitType")
                        .WithMany("ServerHitBins")
                        .HasForeignKey("HitTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SERVER_HBIN_TYPE");

                    b.Navigation("HitType");
                });

            modelBuilder.Entity("Domain.ServiceRate", b =>
                {
                    b.HasOne("Domain.ProductCategory", "MakeProductCategory")
                        .WithMany("ServiceRatesAsMake")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ProductCategory", "ModelProductCategory")
                        .WithMany("ServiceRatesAsModel")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ServiceRates")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MakeProductCategory");

                    b.Navigation("ModelProductCategory");

                    b.Navigation("ProductStore");
                });

            modelBuilder.Entity("Domain.ServiceSpecification", b =>
                {
                    b.HasOne("Domain.ProductCategory", "Make")
                        .WithMany("ServiceSpecificationsAsMake")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ProductCategory", "Model")
                        .WithMany("ServiceSpecificationsAsModel")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ServiceSpecifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Make");

                    b.Navigation("Model");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Shipment", b =>
                {
                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("Shipments")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CUOM");

                    b.HasOne("Domain.PostalAddress", "DestinationContactMech")
                        .WithMany("ShipmentDestinationContactMeches")
                        .HasForeignKey("DestinationContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_DPAD");

                    b.HasOne("Domain.Facility", "DestinationFacility")
                        .WithMany("ShipmentDestinationFacilities")
                        .HasForeignKey("DestinationFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_DFAC");

                    b.HasOne("Domain.TelecomNumber", "DestinationTelecomNumber")
                        .WithMany("ShipmentDestinationTelecomNumbers")
                        .HasForeignKey("DestinationTelecomNumberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_DTCN");

                    b.HasOne("Domain.WorkEffort", "EstimatedArrivalWorkEff")
                        .WithMany("ShipmentEstimatedArrivalWorkEffs")
                        .HasForeignKey("EstimatedArrivalWorkEffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_EARRWEFF");

                    b.HasOne("Domain.WorkEffort", "EstimatedShipWorkEff")
                        .WithMany("ShipmentEstimatedShipWorkEffs")
                        .HasForeignKey("EstimatedShipWorkEffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_ESHWEFF");

                    b.HasOne("Domain.PostalAddress", "OriginContactMech")
                        .WithMany("ShipmentOriginContactMeches")
                        .HasForeignKey("OriginContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_OPAD");

                    b.HasOne("Domain.Facility", "OriginFacility")
                        .WithMany("ShipmentOriginFacilities")
                        .HasForeignKey("OriginFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_OFAC");

                    b.HasOne("Domain.TelecomNumber", "OriginTelecomNumber")
                        .WithMany("ShipmentOriginTelecomNumbers")
                        .HasForeignKey("OriginTelecomNumberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_OTCN");

                    b.HasOne("Domain.Party", "PartyIdFromNavigation")
                        .WithMany("ShipmentPartyIdFromNavigations")
                        .HasForeignKey("PartyIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_PRTYFM");

                    b.HasOne("Domain.Party", "PartyIdToNavigation")
                        .WithMany("ShipmentPartyIdToNavigations")
                        .HasForeignKey("PartyIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_PRTYTO");

                    b.HasOne("Domain.PicklistBin", "PicklistBin")
                        .WithMany("Shipments")
                        .HasForeignKey("PicklistBinId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_PKLSTBIN");

                    b.HasOne("Domain.OrderHeader", "PrimaryOrder")
                        .WithMany("Shipments")
                        .HasForeignKey("PrimaryOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_PODR");

                    b.HasOne("Domain.ReturnHeader", "PrimaryReturn")
                        .WithMany("Shipments")
                        .HasForeignKey("PrimaryReturnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_PRTNHDR");

                    b.HasOne("Domain.ShipmentType", "ShipmentType")
                        .WithMany("Shipments")
                        .HasForeignKey("ShipmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_TYPE");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("Shipments")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_STTS");

                    b.Navigation("CurrencyUom");

                    b.Navigation("DestinationContactMech");

                    b.Navigation("DestinationFacility");

                    b.Navigation("DestinationTelecomNumber");

                    b.Navigation("EstimatedArrivalWorkEff");

                    b.Navigation("EstimatedShipWorkEff");

                    b.Navigation("OriginContactMech");

                    b.Navigation("OriginFacility");

                    b.Navigation("OriginTelecomNumber");

                    b.Navigation("PartyIdFromNavigation");

                    b.Navigation("PartyIdToNavigation");

                    b.Navigation("PicklistBin");

                    b.Navigation("PrimaryOrder");

                    b.Navigation("PrimaryReturn");

                    b.Navigation("ShipmentType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ShipmentAttribute", b =>
                {
                    b.HasOne("Domain.Shipment", "Shipment")
                        .WithMany("ShipmentAttributes")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMNT_ATTR");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Domain.ShipmentBoxType", b =>
                {
                    b.HasOne("Domain.Uom", "DimensionUom")
                        .WithMany("ShipmentBoxTypeDimensionUoms")
                        .HasForeignKey("DimensionUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHMT_BXTP_DUOM");

                    b.HasOne("Domain.Uom", "WeightUom")
                        .WithMany("ShipmentBoxTypeWeightUoms")
                        .HasForeignKey("WeightUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHMT_BXTP_WUOM");

                    b.Navigation("DimensionUom");

                    b.Navigation("WeightUom");
                });

            modelBuilder.Entity("Domain.ShipmentContactMech", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("ShipmentContactMeches")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_CMECH_CM");

                    b.HasOne("Domain.ShipmentContactMechType", "ShipmentContactMechType")
                        .WithMany("ShipmentContactMeches")
                        .HasForeignKey("ShipmentContactMechTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMT_CMECH_TYPE");

                    b.HasOne("Domain.Shipment", "Shipment")
                        .WithMany("ShipmentContactMeches")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMT_CMECH");

                    b.Navigation("ContactMech");

                    b.Navigation("Shipment");

                    b.Navigation("ShipmentContactMechType");
                });

            modelBuilder.Entity("Domain.ShipmentCostEstimate", b =>
                {
                    b.HasOne("Domain.Geo", "GeoIdFromNavigation")
                        .WithMany("ShipmentCostEstimateGeoIdFromNavigations")
                        .HasForeignKey("GeoIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_FGEO");

                    b.HasOne("Domain.Geo", "GeoIdToNavigation")
                        .WithMany("ShipmentCostEstimateGeoIdToNavigations")
                        .HasForeignKey("GeoIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_TGEO");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("ShipmentCostEstimates")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_PARTY");

                    b.HasOne("Domain.QuantityBreak", "PriceBreak")
                        .WithMany("ShipmentCostEstimatePriceBreaks")
                        .HasForeignKey("PriceBreakId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_PRC_QB");

                    b.HasOne("Domain.Uom", "PriceUom")
                        .WithMany("ShipmentCostEstimatePriceUoms")
                        .HasForeignKey("PriceUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_PUOM");

                    b.HasOne("Domain.ProductStoreShipmentMeth", "ProductStoreShipMeth")
                        .WithMany("ShipmentCostEstimates")
                        .HasForeignKey("ProductStoreShipMethId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_PS_SH_METH");

                    b.HasOne("Domain.QuantityBreak", "QuantityBreak")
                        .WithMany("ShipmentCostEstimateQuantityBreaks")
                        .HasForeignKey("QuantityBreakId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_QNT_QB");

                    b.HasOne("Domain.Uom", "QuantityUom")
                        .WithMany("ShipmentCostEstimateQuantityUoms")
                        .HasForeignKey("QuantityUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_QUOM");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("ShipmentCostEstimates")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_ROLET");

                    b.HasOne("Domain.QuantityBreak", "WeightBreak")
                        .WithMany("ShipmentCostEstimateWeightBreaks")
                        .HasForeignKey("WeightBreakId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_WHT_QB");

                    b.HasOne("Domain.Uom", "WeightUom")
                        .WithMany("ShipmentCostEstimateWeightUoms")
                        .HasForeignKey("WeightUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_WUOM");

                    b.HasOne("Domain.CarrierShipmentMethod", "CarrierShipmentMethod")
                        .WithMany("ShipmentCostEstimates")
                        .HasForeignKey("ShipmentMethodTypeId", "CarrierPartyId", "CarrierRoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_CE_CSHMTH");

                    b.Navigation("CarrierShipmentMethod");

                    b.Navigation("GeoIdFromNavigation");

                    b.Navigation("GeoIdToNavigation");

                    b.Navigation("Party");

                    b.Navigation("PriceBreak");

                    b.Navigation("PriceUom");

                    b.Navigation("ProductStoreShipMeth");

                    b.Navigation("QuantityBreak");

                    b.Navigation("QuantityUom");

                    b.Navigation("RoleType");

                    b.Navigation("WeightBreak");

                    b.Navigation("WeightUom");
                });

            modelBuilder.Entity("Domain.ShipmentGatewayConfig", b =>
                {
                    b.HasOne("Domain.ShipmentGatewayConfigType", "ShipmentGatewayConfType")
                        .WithMany("ShipmentGatewayConfigs")
                        .HasForeignKey("ShipmentGatewayConfTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SGC_SGCT");

                    b.Navigation("ShipmentGatewayConfType");
                });

            modelBuilder.Entity("Domain.ShipmentGatewayConfigType", b =>
                {
                    b.HasOne("Domain.ShipmentGatewayConfigType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SGCT_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ShipmentGatewayDhl", b =>
                {
                    b.HasOne("Domain.ShipmentGatewayConfig", "ShipmentGatewayConfig")
                        .WithOne("ShipmentGatewayDhl")
                        .HasForeignKey("Domain.ShipmentGatewayDhl", "ShipmentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SGDHL_SGC");

                    b.Navigation("ShipmentGatewayConfig");
                });

            modelBuilder.Entity("Domain.ShipmentGatewayFedex", b =>
                {
                    b.HasOne("Domain.ShipmentGatewayConfig", "ShipmentGatewayConfig")
                        .WithOne("ShipmentGatewayFedex")
                        .HasForeignKey("Domain.ShipmentGatewayFedex", "ShipmentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SGFED_SGC");

                    b.Navigation("ShipmentGatewayConfig");
                });

            modelBuilder.Entity("Domain.ShipmentGatewayUp", b =>
                {
                    b.HasOne("Domain.ShipmentGatewayConfig", "ShipmentGatewayConfig")
                        .WithOne("ShipmentGatewayUp")
                        .HasForeignKey("Domain.ShipmentGatewayUp", "ShipmentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SGUPS_SGC");

                    b.Navigation("ShipmentGatewayConfig");
                });

            modelBuilder.Entity("Domain.ShipmentGatewayUsp", b =>
                {
                    b.HasOne("Domain.ShipmentGatewayConfig", "ShipmentGatewayConfig")
                        .WithOne("ShipmentGatewayUsp")
                        .HasForeignKey("Domain.ShipmentGatewayUsp", "ShipmentGatewayConfigId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SGUSPS_SGC");

                    b.Navigation("ShipmentGatewayConfig");
                });

            modelBuilder.Entity("Domain.ShipmentItem", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_ITM_PROD");

                    b.HasOne("Domain.Shipment", "Shipment")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMNT_ITM_SHPMT");

                    b.Navigation("Product");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Domain.ShipmentItemBilling", b =>
                {
                    b.HasOne("Domain.InvoiceItem", "InvoiceI")
                        .WithMany("ShipmentItemBillings")
                        .HasForeignKey("InvoiceId", "InvoiceItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMNT_ITBL_INIM");

                    b.HasOne("Domain.ShipmentItem", "ShipmentI")
                        .WithMany("ShipmentItemBillings")
                        .HasForeignKey("ShipmentId", "ShipmentItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMNT_ITBL_SPIM");

                    b.Navigation("InvoiceI");

                    b.Navigation("ShipmentI");
                });

            modelBuilder.Entity("Domain.ShipmentItemFeature", b =>
                {
                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("ShipmentItemFeatures")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMNT_ITFT_FEAT");

                    b.HasOne("Domain.ShipmentItem", "ShipmentI")
                        .WithMany("ShipmentItemFeatures")
                        .HasForeignKey("ShipmentId", "ShipmentItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMNT_ITFT_SPIM");

                    b.Navigation("ProductFeature");

                    b.Navigation("ShipmentI");
                });

            modelBuilder.Entity("Domain.ShipmentPackage", b =>
                {
                    b.HasOne("Domain.Uom", "DimensionUom")
                        .WithMany("ShipmentPackageDimensionUoms")
                        .HasForeignKey("DimensionUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPKG_DUOM");

                    b.HasOne("Domain.ShipmentBoxType", "ShipmentBoxType")
                        .WithMany("ShipmentPackages")
                        .HasForeignKey("ShipmentBoxTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPKG_BXTYP");

                    b.HasOne("Domain.Shipment", "Shipment")
                        .WithMany("ShipmentPackages")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPKG_SHPMNT");

                    b.HasOne("Domain.Uom", "WeightUom")
                        .WithMany("ShipmentPackageWeightUoms")
                        .HasForeignKey("WeightUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPKG_WUOM");

                    b.Navigation("DimensionUom");

                    b.Navigation("Shipment");

                    b.Navigation("ShipmentBoxType");

                    b.Navigation("WeightUom");
                });

            modelBuilder.Entity("Domain.ShipmentPackageContent", b =>
                {
                    b.HasOne("Domain.Product", "SubProduct")
                        .WithMany("ShipmentPackageContents")
                        .HasForeignKey("SubProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PCK_CNTNT_PROD");

                    b.HasOne("Domain.ShipmentItem", "ShipmentI")
                        .WithMany("ShipmentPackageContents")
                        .HasForeignKey("ShipmentId", "ShipmentItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCK_CNTNT_SHITM");

                    b.HasOne("Domain.ShipmentPackage", "Shipment")
                        .WithMany("ShipmentPackageContents")
                        .HasForeignKey("ShipmentId", "ShipmentPackageSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("PCK_CNTNT_SHPKG");

                    b.Navigation("Shipment");

                    b.Navigation("ShipmentI");

                    b.Navigation("SubProduct");
                });

            modelBuilder.Entity("Domain.ShipmentPackageRouteSeg", b =>
                {
                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("ShipmentPackageRouteSegs")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPKRTSG_CUOM");

                    b.HasOne("Domain.ShipmentPackage", "Shipment")
                        .WithMany("ShipmentPackageRouteSegs")
                        .HasForeignKey("ShipmentId", "ShipmentPackageSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPKRTSG_SHPKG");

                    b.HasOne("Domain.ShipmentRouteSegment", "ShipmentNavigation")
                        .WithMany("ShipmentPackageRouteSegs")
                        .HasForeignKey("ShipmentId", "ShipmentRouteSegmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPKRTSG_RTSG");

                    b.Navigation("CurrencyUom");

                    b.Navigation("Shipment");

                    b.Navigation("ShipmentNavigation");
                });

            modelBuilder.Entity("Domain.ShipmentReceipt", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("ShipmentReceipts")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHP_RCPT_INVITM");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ShipmentReceipts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHP_RCPT_PROD");

                    b.HasOne("Domain.UserLogin", "ReceivedByUserLogin")
                        .WithMany("ShipmentReceipts")
                        .HasForeignKey("ReceivedByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHP_RCPT_USERLGN");

                    b.HasOne("Domain.RejectionReason", "Rejection")
                        .WithMany("ShipmentReceipts")
                        .HasForeignKey("RejectionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHP_RCPT_REJRSN");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("ShipmentReceipts")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHP_RCPT_ORDITM");

                    b.HasOne("Domain.ReturnItem", "ReturnI")
                        .WithMany("ShipmentReceipts")
                        .HasForeignKey("ReturnId", "ReturnItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHP_RCPT_RETINVITM");

                    b.HasOne("Domain.ShipmentPackage", "Shipment")
                        .WithMany("ShipmentReceipts")
                        .HasForeignKey("ShipmentId", "ShipmentPackageSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHP_RCPT_SHPKG");

                    b.Navigation("InventoryItem");

                    b.Navigation("OrderI");

                    b.Navigation("Product");

                    b.Navigation("ReceivedByUserLogin");

                    b.Navigation("Rejection");

                    b.Navigation("ReturnI");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Domain.ShipmentReceiptRole", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("ShipmentReceiptRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHP_RCPTRL_PTY");

                    b.HasOne("Domain.ShipmentReceipt", "Receipt")
                        .WithMany("ShipmentReceiptRoles")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHP_RCPTRL_RCPT");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("ShipmentReceiptRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHP_RCPTRL_PTRL");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("Domain.ShipmentRouteSegment", b =>
                {
                    b.HasOne("Domain.Uom", "BillingWeightUom")
                        .WithMany("ShipmentRouteSegmentBillingWeightUoms")
                        .HasForeignKey("BillingWeightUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPKRTSG_BWUOM");

                    b.HasOne("Domain.Party", "CarrierParty")
                        .WithMany("ShipmentRouteSegments")
                        .HasForeignKey("CarrierPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_RTSEG_CPTY");

                    b.HasOne("Domain.StatusItem", "CarrierServiceStatus")
                        .WithMany("ShipmentRouteSegments")
                        .HasForeignKey("CarrierServiceStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPKRTSG_CSSTS");

                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("ShipmentRouteSegmentCurrencyUoms")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_RTSEG_CUOM");

                    b.HasOne("Domain.Delivery", "Delivery")
                        .WithMany("ShipmentRouteSegments")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_RTSEG_DEL");

                    b.HasOne("Domain.PostalAddress", "DestContactMech")
                        .WithMany("ShipmentRouteSegmentDestContactMeches")
                        .HasForeignKey("DestContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_RTSEG_DPAD");

                    b.HasOne("Domain.Facility", "DestFacility")
                        .WithMany("ShipmentRouteSegmentDestFacilities")
                        .HasForeignKey("DestFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_RTSEG_DFAC");

                    b.HasOne("Domain.TelecomNumber", "DestTelecomNumber")
                        .WithMany("ShipmentRouteSegmentDestTelecomNumbers")
                        .HasForeignKey("DestTelecomNumberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_RTSEG_DTCN");

                    b.HasOne("Domain.PostalAddress", "OriginContactMech")
                        .WithMany("ShipmentRouteSegmentOriginContactMeches")
                        .HasForeignKey("OriginContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_RTSEG_OPAD");

                    b.HasOne("Domain.Facility", "OriginFacility")
                        .WithMany("ShipmentRouteSegmentOriginFacilities")
                        .HasForeignKey("OriginFacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_RTSEG_OFAC");

                    b.HasOne("Domain.TelecomNumber", "OriginTelecomNumber")
                        .WithMany("ShipmentRouteSegmentOriginTelecomNumbers")
                        .HasForeignKey("OriginTelecomNumberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_RTSEG_OTCN");

                    b.HasOne("Domain.Shipment", "Shipment")
                        .WithMany("ShipmentRouteSegments")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMT_RTSEG_SHPMT");

                    b.HasOne("Domain.ShipmentMethodType", "ShipmentMethodType")
                        .WithMany("ShipmentRouteSegments")
                        .HasForeignKey("ShipmentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMT_RTSEG_SHMT");

                    b.Navigation("BillingWeightUom");

                    b.Navigation("CarrierParty");

                    b.Navigation("CarrierServiceStatus");

                    b.Navigation("CurrencyUom");

                    b.Navigation("Delivery");

                    b.Navigation("DestContactMech");

                    b.Navigation("DestFacility");

                    b.Navigation("DestTelecomNumber");

                    b.Navigation("OriginContactMech");

                    b.Navigation("OriginFacility");

                    b.Navigation("OriginTelecomNumber");

                    b.Navigation("Shipment");

                    b.Navigation("ShipmentMethodType");
                });

            modelBuilder.Entity("Domain.ShipmentStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("ShipmentStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_STTS_USRLGN");

                    b.HasOne("Domain.Shipment", "Shipment")
                        .WithMany("ShipmentStatuses")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMNT_STTS_SHMT");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("ShipmentStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMNT_STTS_STTS");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("Shipment");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ShipmentTimeEstimate", b =>
                {
                    b.HasOne("Domain.Geo", "GeoIdFromNavigation")
                        .WithMany("ShipmentTimeEstimateGeoIdFromNavigations")
                        .HasForeignKey("GeoIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHIPT_EST_GEO_FROM");

                    b.HasOne("Domain.Geo", "GeoIdToNavigation")
                        .WithMany("ShipmentTimeEstimateGeoIdToNavigations")
                        .HasForeignKey("GeoIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHIPT_EST_GEO_TO");

                    b.HasOne("Domain.Uom", "LeadTimeUom")
                        .WithMany("ShipmentTimeEstimates")
                        .HasForeignKey("LeadTimeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHIPT_EST_UOM");

                    b.HasOne("Domain.CarrierShipmentMethod", "CarrierShipmentMethod")
                        .WithMany("ShipmentTimeEstimates")
                        .HasForeignKey("ShipmentMethodTypeId", "PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHIPT_EST_METHOD");

                    b.Navigation("CarrierShipmentMethod");

                    b.Navigation("GeoIdFromNavigation");

                    b.Navigation("GeoIdToNavigation");

                    b.Navigation("LeadTimeUom");
                });

            modelBuilder.Entity("Domain.ShipmentType", b =>
                {
                    b.HasOne("Domain.ShipmentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPMNT_TYPPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.ShipmentTypeAttr", b =>
                {
                    b.HasOne("Domain.ShipmentType", "ShipmentType")
                        .WithMany("ShipmentTypeAttrs")
                        .HasForeignKey("ShipmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPMNT_TYPATR");

                    b.Navigation("ShipmentType");
                });

            modelBuilder.Entity("Domain.ShippingDocument", b =>
                {
                    b.HasOne("Domain.Document", "Document")
                        .WithOne("ShippingDocument")
                        .HasForeignKey("Domain.ShippingDocument", "DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHPNG_DOC_DOC");

                    b.HasOne("Domain.ShipmentItem", "ShipmentI")
                        .WithMany("ShippingDocuments")
                        .HasForeignKey("ShipmentId", "ShipmentItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPNG_DOC_SMITM");

                    b.HasOne("Domain.ShipmentPackage", "Shipment")
                        .WithMany("ShippingDocuments")
                        .HasForeignKey("ShipmentId", "ShipmentPackageSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHPNG_DOC_SHPKG");

                    b.Navigation("Document");

                    b.Navigation("Shipment");

                    b.Navigation("ShipmentI");
                });

            modelBuilder.Entity("Domain.ShoppingList", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHLIST_CMECH");

                    b.HasOne("Domain.ShoppingList", "ParentShoppingList")
                        .WithMany("InverseParentShoppingList")
                        .HasForeignKey("ParentShoppingListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHLIST_PARENT");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHLIST_PTY");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHLIST_PYMETH");

                    b.HasOne("Domain.ProductPromoCode", "ProductPromoCode")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("ProductPromoCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHLIST_PRMCD");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHLIST_PRDS");

                    b.HasOne("Domain.RecurrenceInfo", "RecurrenceInfo")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("RecurrenceInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHLIST_RECINFO");

                    b.HasOne("Domain.ShoppingListType", "ShoppingListType")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("ShoppingListTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHLIST_TYPE");

                    b.HasOne("Domain.CarrierShipmentMethod", "CarrierShipmentMethod")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("ShipmentMethodTypeId", "CarrierPartyId", "CarrierRoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHLIST_CSSM");

                    b.Navigation("CarrierShipmentMethod");

                    b.Navigation("ContactMech");

                    b.Navigation("ParentShoppingList");

                    b.Navigation("Party");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ProductPromoCode");

                    b.Navigation("ProductStore");

                    b.Navigation("RecurrenceInfo");

                    b.Navigation("ShoppingListType");
                });

            modelBuilder.Entity("Domain.ShoppingListItem", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SHLIST_ITEM_PROD");

                    b.HasOne("Domain.ShoppingList", "ShoppingList")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHLIST_ITEM_LIST");

                    b.Navigation("Product");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("Domain.ShoppingListItemSurvey", b =>
                {
                    b.HasOne("Domain.ShoppingList", "ShoppingList")
                        .WithMany("ShoppingListItemSurveys")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHLIST_ITSUR_LIST");

                    b.HasOne("Domain.SurveyResponse", "SurveyResponse")
                        .WithMany("ShoppingListItemSurveys")
                        .HasForeignKey("SurveyResponseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHLIST_ITSUR_RESP");

                    b.HasOne("Domain.ShoppingListItem", "ShoppingListI")
                        .WithMany("ShoppingListItemSurveys")
                        .HasForeignKey("ShoppingListId", "ShoppingListItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHLIST_ITSUR_ITEM");

                    b.Navigation("ShoppingList");

                    b.Navigation("ShoppingListI");

                    b.Navigation("SurveyResponse");
                });

            modelBuilder.Entity("Domain.ShoppingListWorkEffort", b =>
                {
                    b.HasOne("Domain.ShoppingList", "ShoppingList")
                        .WithMany("ShoppingListWorkEfforts")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHLISTWE_SHLST");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("ShoppingListWorkEfforts")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SHLISTWE_WEFF");

                    b.Navigation("ShoppingList");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.SkillType", b =>
                {
                    b.HasOne("Domain.SkillType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PARNT_SKILL_TYPE");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.StatusItem", b =>
                {
                    b.HasOne("Domain.StatusType", "StatusType")
                        .WithMany("StatusItems")
                        .HasForeignKey("StatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("STATUS_TO_TYPE");

                    b.Navigation("StatusType");
                });

            modelBuilder.Entity("Domain.StatusType", b =>
                {
                    b.HasOne("Domain.StatusType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("STATUS_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.StatusValidChange", b =>
                {
                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("StatusValidChangeStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("STATUS_CHG_MAIN");

                    b.HasOne("Domain.StatusItem", "StatusIdToNavigation")
                        .WithMany("StatusValidChangeStatusIdToNavigations")
                        .HasForeignKey("StatusIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("STATUS_CHG_TO");

                    b.Navigation("Status");

                    b.Navigation("StatusIdToNavigation");
                });

            modelBuilder.Entity("Domain.Subscription", b =>
                {
                    b.HasOne("Domain.Uom", "AvailableTimeUom")
                        .WithMany("SubscriptionAvailableTimeUoms")
                        .HasForeignKey("AvailableTimeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_ATU");

                    b.HasOne("Domain.Uom", "CanclAutmExtTimeUom")
                        .WithMany("SubscriptionCanclAutmExtTimeUoms")
                        .HasForeignKey("CanclAutmExtTimeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_CTU");

                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_CONT_MECH");

                    b.HasOne("Domain.Uom", "GracePeriodOnExpiryUom")
                        .WithMany("SubscriptionGracePeriodOnExpiryUoms")
                        .HasForeignKey("GracePeriodOnExpiryUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_GTU");

                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("Subscriptions")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_INV_ITM");

                    b.HasOne("Domain.Uom", "MaxLifeTimeUom")
                        .WithMany("SubscriptionMaxLifeTimeUoms")
                        .HasForeignKey("MaxLifeTimeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_MTU");

                    b.HasOne("Domain.NeedType", "NeedType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("NeedTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_NEED_TYPE");

                    b.HasOne("Domain.Party", "OriginatedFromParty")
                        .WithMany("SubscriptionOriginatedFromParties")
                        .HasForeignKey("OriginatedFromPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_OPARTY");

                    b.HasOne("Domain.RoleType", "OriginatedFromRoleType")
                        .WithMany("SubscriptionOriginatedFromRoleTypes")
                        .HasForeignKey("OriginatedFromRoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_OROLE_TYPE");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("SubscriptionParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_PARTY");

                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_PROD_CAT");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_PRODUCT");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("SubscriptionRoleTypes")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_ROLE_TYPE");

                    b.HasOne("Domain.SubscriptionResource", "SubscriptionResource")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_SRESRC");

                    b.HasOne("Domain.SubscriptionType", "SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_TO_TYPE");

                    b.HasOne("Domain.Uom", "UseTimeUom")
                        .WithMany("SubscriptionUseTimeUoms")
                        .HasForeignKey("UseTimeUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_UTU");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("Subscriptions")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_ORDERITM");

                    b.Navigation("AvailableTimeUom");

                    b.Navigation("CanclAutmExtTimeUom");

                    b.Navigation("ContactMech");

                    b.Navigation("GracePeriodOnExpiryUom");

                    b.Navigation("InventoryItem");

                    b.Navigation("MaxLifeTimeUom");

                    b.Navigation("NeedType");

                    b.Navigation("OrderI");

                    b.Navigation("OriginatedFromParty");

                    b.Navigation("OriginatedFromRoleType");

                    b.Navigation("Party");

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");

                    b.Navigation("RoleType");

                    b.Navigation("SubscriptionResource");

                    b.Navigation("SubscriptionType");

                    b.Navigation("UseTimeUom");
                });

            modelBuilder.Entity("Domain.SubscriptionAttribute", b =>
                {
                    b.HasOne("Domain.Subscription", "Subscription")
                        .WithMany("SubscriptionAttributes")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUBSC_ATTR");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Domain.SubscriptionCommEvent", b =>
                {
                    b.HasOne("Domain.CommunicationEvent", "CommunicationEvent")
                        .WithMany("SubscriptionCommEvents")
                        .HasForeignKey("CommunicationEventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUBSC_COM_EVENT");

                    b.HasOne("Domain.Subscription", "Subscription")
                        .WithMany("SubscriptionCommEvents")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUBSC_SUBSC");

                    b.Navigation("CommunicationEvent");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Domain.SubscriptionFulfillmentPiece", b =>
                {
                    b.HasOne("Domain.SubscriptionActivity", "SubscriptionActivity")
                        .WithMany("SubscriptionFulfillmentPieces")
                        .HasForeignKey("SubscriptionActivityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUBSC_FP_ACT");

                    b.HasOne("Domain.Subscription", "Subscription")
                        .WithMany("SubscriptionFulfillmentPieces")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUBSC_FP");

                    b.Navigation("Subscription");

                    b.Navigation("SubscriptionActivity");
                });

            modelBuilder.Entity("Domain.SubscriptionResource", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("SubscriptionResources")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_RES_CNTNT");

                    b.HasOne("Domain.SubscriptionResource", "ParentResource")
                        .WithMany("InverseParentResource")
                        .HasForeignKey("ParentResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_RES_PARENT");

                    b.HasOne("Domain.WebSite", "WebSite")
                        .WithMany("SubscriptionResources")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_RES_WBSITE");

                    b.Navigation("Content");

                    b.Navigation("ParentResource");

                    b.Navigation("WebSite");
                });

            modelBuilder.Entity("Domain.SubscriptionType", b =>
                {
                    b.HasOne("Domain.SubscriptionType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUBSC_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.SubscriptionTypeAttr", b =>
                {
                    b.HasOne("Domain.SubscriptionType", "SubscriptionType")
                        .WithMany("SubscriptionTypeAttrs")
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUBSC_TYPE_ATTR");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("Domain.SupplierProduct", b =>
                {
                    b.HasOne("Domain.Uom", "CurrencyUom")
                        .WithMany("SupplierProductCurrencyUoms")
                        .HasForeignKey("CurrencyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUPPL_PROD_CUOM");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUPPL_PROD_PARTY");

                    b.HasOne("Domain.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUPPL_PROD_PROD");

                    b.HasOne("Domain.Uom", "QuantityUom")
                        .WithMany("SupplierProductQuantityUoms")
                        .HasForeignKey("QuantityUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUPPL_PROD_QUOM");

                    b.HasOne("Domain.SupplierPrefOrder", "SupplierPrefOrder")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierPrefOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUPPL_PROD_SPORD");

                    b.HasOne("Domain.SupplierRatingType", "SupplierRatingType")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierRatingTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUPPL_PROD_SRTPE");

                    b.HasOne("Domain.AgreementItem", "AgreementI")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("AgreementId", "AgreementItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUPPL_PROD_AGRIT");

                    b.Navigation("AgreementI");

                    b.Navigation("CurrencyUom");

                    b.Navigation("Party");

                    b.Navigation("Product");

                    b.Navigation("QuantityUom");

                    b.Navigation("SupplierPrefOrder");

                    b.Navigation("SupplierRatingType");
                });

            modelBuilder.Entity("Domain.SupplierProductFeature", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("SupplierProductFeatures")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUPPL_FEAT_PARTY");

                    b.HasOne("Domain.ProductFeature", "ProductFeature")
                        .WithMany("SupplierProductFeatures")
                        .HasForeignKey("ProductFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SUPPL_FEAT_FEAT");

                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("SupplierProductFeatures")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SUPPL_FEAT_UOM");

                    b.Navigation("Party");

                    b.Navigation("ProductFeature");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Domain.SurveyMultiResp", b =>
                {
                    b.HasOne("Domain.Survey", "Survey")
                        .WithMany("SurveyMultiResps")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SRVYMRSP_SRVY");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.SurveyMultiRespColumn", b =>
                {
                    b.HasOne("Domain.SurveyMultiResp", "Survey")
                        .WithMany("SurveyMultiRespColumns")
                        .HasForeignKey("SurveyId", "SurveyMultiRespId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SRVYMRSPCL_SMRESP");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.SurveyPage", b =>
                {
                    b.HasOne("Domain.Survey", "Survey")
                        .WithMany("SurveyPages")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SRVYPAGE_SRVY");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.SurveyQuestion", b =>
                {
                    b.HasOne("Domain.Geo", "Geo")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("GeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SRVYQST_GEO");

                    b.HasOne("Domain.SurveyQuestionCategory", "SurveyQuestionCategory")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyQuestionCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SRVYQST_SRVYQTCT");

                    b.HasOne("Domain.SurveyQuestionType", "SurveyQuestionType")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyQuestionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SRVYQST_SRVYQTP");

                    b.Navigation("Geo");

                    b.Navigation("SurveyQuestionCategory");

                    b.Navigation("SurveyQuestionType");
                });

            modelBuilder.Entity("Domain.SurveyQuestionAppl", b =>
                {
                    b.HasOne("Domain.Survey", "Survey")
                        .WithMany("SurveyQuestionAppls")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SRVYQSTAPL_SRVY");

                    b.HasOne("Domain.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyQuestionAppls")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SRVYQSTAPL_SRVYQ");

                    b.HasOne("Domain.SurveyQuestionOption", "WithSurvey")
                        .WithMany("SurveyQuestionAppls")
                        .HasForeignKey("WithSurveyQuestionId", "WithSurveyOptionSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SRVYQSTAPL_SVQO");

                    b.Navigation("Survey");

                    b.Navigation("SurveyQuestion");

                    b.Navigation("WithSurvey");
                });

            modelBuilder.Entity("Domain.SurveyQuestionCategory", b =>
                {
                    b.HasOne("Domain.SurveyQuestionCategory", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SRVYQSTCT_PAR");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.SurveyQuestionOption", b =>
                {
                    b.HasOne("Domain.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyQuestionOptions")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SRVYQSTOP_SRVYQ");

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Domain.SurveyResponse", b =>
                {
                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SRVYRSP_STTS");

                    b.HasOne("Domain.Survey", "Survey")
                        .WithMany("SurveyResponses")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SRVYRSP_SRVY");

                    b.Navigation("Status");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Domain.SurveyResponseAnswer", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("SurveyResponseAnswers")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SRVYRSPA_CONT");

                    b.HasOne("Domain.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyResponseAnswers")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SRVYRSPA_SVQU");

                    b.HasOne("Domain.SurveyResponse", "SurveyResponse")
                        .WithMany("SurveyResponseAnswers")
                        .HasForeignKey("SurveyResponseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SRVYRSPA_SVRSP");

                    b.HasOne("Domain.SurveyQuestionOption", "Survey")
                        .WithMany("SurveyResponseAnswers")
                        .HasForeignKey("SurveyQuestionId", "SurveyOptionSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("SRVYRSPA_OPT");

                    b.Navigation("Content");

                    b.Navigation("Survey");

                    b.Navigation("SurveyQuestion");

                    b.Navigation("SurveyResponse");
                });

            modelBuilder.Entity("Domain.SurveyTrigger", b =>
                {
                    b.HasOne("Domain.SurveyApplType", "SurveyApplType")
                        .WithMany("SurveyTriggers")
                        .HasForeignKey("SurveyApplTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SRVYTRG_SRVYAPT");

                    b.HasOne("Domain.Survey", "Survey")
                        .WithMany("SurveyTriggers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("SRVYTRG_SRVY");

                    b.Navigation("Survey");

                    b.Navigation("SurveyApplType");
                });

            modelBuilder.Entity("Domain.TaxAuthority", b =>
                {
                    b.HasOne("Domain.Geo", "TaxAuthGeo")
                        .WithMany("TaxAuthorities")
                        .HasForeignKey("TaxAuthGeoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TAXAUTH_TAGEO");

                    b.HasOne("Domain.Party", "TaxAuthParty")
                        .WithMany("TaxAuthorities")
                        .HasForeignKey("TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TAXAUTH_TAPARTY");

                    b.Navigation("TaxAuthGeo");

                    b.Navigation("TaxAuthParty");
                });

            modelBuilder.Entity("Domain.TaxAuthorityAssoc", b =>
                {
                    b.HasOne("Domain.TaxAuthorityAssocType", "TaxAuthorityAssocType")
                        .WithMany("TaxAuthorityAssocs")
                        .HasForeignKey("TaxAuthorityAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TAXAUTHASC_ASTP");

                    b.HasOne("Domain.TaxAuthority", "TaxAuth")
                        .WithMany("TaxAuthorityAssocTaxAuths")
                        .HasForeignKey("TaxAuthGeoId", "TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TAXAUTHASC_TXA");

                    b.HasOne("Domain.TaxAuthority", "ToTaxAuth")
                        .WithMany("TaxAuthorityAssocToTaxAuths")
                        .HasForeignKey("ToTaxAuthGeoId", "ToTaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TAXAUTHASC_TOTXA");

                    b.Navigation("TaxAuth");

                    b.Navigation("TaxAuthorityAssocType");

                    b.Navigation("ToTaxAuth");
                });

            modelBuilder.Entity("Domain.TaxAuthorityCategory", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("TaxAuthorityCategories")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TAXAUTHCAT_CAT");

                    b.HasOne("Domain.TaxAuthority", "TaxAuth")
                        .WithMany("TaxAuthorityCategories")
                        .HasForeignKey("TaxAuthGeoId", "TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TAXAUTHCAT_TXA");

                    b.Navigation("ProductCategory");

                    b.Navigation("TaxAuth");
                });

            modelBuilder.Entity("Domain.TaxAuthorityGlAccount", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("TaxAuthorityGlAccounts")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TAXAUTHGLA_GLA");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("TaxAuthorityGlAccounts")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TAXAUTHGLA_OPTY");

                    b.HasOne("Domain.TaxAuthority", "TaxAuth")
                        .WithMany("TaxAuthorityGlAccounts")
                        .HasForeignKey("TaxAuthGeoId", "TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TAXAUTHGLA_TXA");

                    b.Navigation("GlAccount");

                    b.Navigation("OrganizationParty");

                    b.Navigation("TaxAuth");
                });

            modelBuilder.Entity("Domain.TaxAuthorityRateProduct", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ProductCategory")
                        .WithMany("TaxAuthorityRateProducts")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TAXAUTHRTEP_PCAT");

                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("TaxAuthorityRateProducts")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TAXAUTHRTEP_PSTR");

                    b.HasOne("Domain.TaxAuthorityRateType", "TaxAuthorityRateType")
                        .WithMany("TaxAuthorityRateProducts")
                        .HasForeignKey("TaxAuthorityRateTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TAXAUTHRTEP_RTTP");

                    b.HasOne("Domain.TaxAuthority", "TaxAuth")
                        .WithMany("TaxAuthorityRateProducts")
                        .HasForeignKey("TaxAuthGeoId", "TaxAuthPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TAXAUTHRTEP_TXA");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductStore");

                    b.Navigation("TaxAuth");

                    b.Navigation("TaxAuthorityRateType");
                });

            modelBuilder.Entity("Domain.TechDataCalendar", b =>
                {
                    b.HasOne("Domain.TechDataCalendarWeek", "CalendarWeek")
                        .WithMany("TechDataCalendars")
                        .HasForeignKey("CalendarWeekId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("CALENDAR_WEEK");

                    b.Navigation("CalendarWeek");
                });

            modelBuilder.Entity("Domain.TechDataCalendarExcDay", b =>
                {
                    b.HasOne("Domain.TechDataCalendar", "Calendar")
                        .WithMany("TechDataCalendarExcDays")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EXC_DAY_CALENDAR");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("Domain.TechDataCalendarExcWeek", b =>
                {
                    b.HasOne("Domain.TechDataCalendar", "Calendar")
                        .WithMany("TechDataCalendarExcWeeks")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("EXC_WEEK_CALENDAR");

                    b.HasOne("Domain.TechDataCalendarWeek", "CalendarWeek")
                        .WithMany("TechDataCalendarExcWeeks")
                        .HasForeignKey("CalendarWeekId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("EXC_WEEK_WEEK");

                    b.Navigation("Calendar");

                    b.Navigation("CalendarWeek");
                });

            modelBuilder.Entity("Domain.TelecomNumber", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithOne("TelecomNumber")
                        .HasForeignKey("Domain.TelecomNumber", "ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TEL_NUM_CMECH");

                    b.Navigation("ContactMech");
                });

            modelBuilder.Entity("Domain.TemporalExpressionAssoc", b =>
                {
                    b.HasOne("Domain.TemporalExpression", "FromTempExpr")
                        .WithMany("TemporalExpressionAssocFromTempExprs")
                        .HasForeignKey("FromTempExprId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TEMP_EXPR_FROM");

                    b.HasOne("Domain.TemporalExpression", "ToTempExpr")
                        .WithMany("TemporalExpressionAssocToTempExprs")
                        .HasForeignKey("ToTempExprId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TEMP_EXPR_TO");

                    b.Navigation("FromTempExpr");

                    b.Navigation("ToTempExpr");
                });

            modelBuilder.Entity("Domain.TenantComponent", b =>
                {
                    b.HasOne("Domain.Component", "ComponentNameNavigation")
                        .WithMany("TenantComponents")
                        .HasForeignKey("ComponentName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("COMP_CNT");

                    b.HasOne("Domain.Tenant", "Tenant")
                        .WithMany("TenantComponents")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TNTCOMP_TNT");

                    b.Navigation("ComponentNameNavigation");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Domain.TenantDataSource", b =>
                {
                    b.HasOne("Domain.Tenant", "Tenant")
                        .WithMany("TenantDataSources")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TNTDTSRC_TNT");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Domain.TenantDomainName", b =>
                {
                    b.HasOne("Domain.Tenant", "Tenant")
                        .WithMany("TenantDomainNames")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TNNT_DMNAM");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Domain.TenantKeyEncryptingKey", b =>
                {
                    b.HasOne("Domain.Tenant", "Tenant")
                        .WithOne("TenantKeyEncryptingKey")
                        .HasForeignKey("Domain.TenantKeyEncryptingKey", "TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TNTKEK_TNT");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Domain.TermType", b =>
                {
                    b.HasOne("Domain.TermType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TERM_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.TermTypeAttr", b =>
                {
                    b.HasOne("Domain.TermType", "TermType")
                        .WithMany("TermTypeAttrs")
                        .HasForeignKey("TermTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TERM_TYPATR_TTYP");

                    b.Navigation("TermType");
                });

            modelBuilder.Entity("Domain.TerminationType", b =>
                {
                    b.HasOne("Domain.TerminationType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TERM_TYP_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.Testing", b =>
                {
                    b.HasOne("Domain.TestingType", "TestingType")
                        .WithMany("Testings")
                        .HasForeignKey("TestingTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("ENTITY_ENTY_TYP");

                    b.Navigation("TestingType");
                });

            modelBuilder.Entity("Domain.TestingItem", b =>
                {
                    b.HasOne("Domain.Testing", "Testing")
                        .WithMany("TestingItems")
                        .HasForeignKey("TestingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TESTING_IT_TEST");

                    b.Navigation("Testing");
                });

            modelBuilder.Entity("Domain.TestingNode", b =>
                {
                    b.HasOne("Domain.TestingNode", "PrimaryParentNode")
                        .WithMany("InversePrimaryParentNode")
                        .HasForeignKey("PrimaryParentNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TESTNG_NDE_PARNT");

                    b.Navigation("PrimaryParentNode");
                });

            modelBuilder.Entity("Domain.TestingNodeMember", b =>
                {
                    b.HasOne("Domain.Testing", "Testing")
                        .WithMany("TestingNodeMembers")
                        .HasForeignKey("TestingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TESTING_NMBR_TEST");

                    b.HasOne("Domain.TestingNode", "TestingNode")
                        .WithMany("TestingNodeMembers")
                        .HasForeignKey("TestingNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TEST_NMBR_NODE");

                    b.Navigation("Testing");

                    b.Navigation("TestingNode");
                });

            modelBuilder.Entity("Domain.TestingStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "ChangeByUserLogin")
                        .WithMany("TestingStatuses")
                        .HasForeignKey("ChangeByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TEST_STA_USRLGN");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("TestingStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TEST_STA_STSITM");

                    b.Navigation("ChangeByUserLogin");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.TimeEntry", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("TimeEntries")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TIME_ENT_PRTY");

                    b.HasOne("Domain.RateType", "RateType")
                        .WithMany("TimeEntries")
                        .HasForeignKey("RateTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TIME_ENT_RTTP");

                    b.HasOne("Domain.Timesheet", "Timesheet")
                        .WithMany("TimeEntries")
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TIME_ENT_TSHT");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("TimeEntries")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TIME_ENT_WEFF");

                    b.HasOne("Domain.InvoiceItem", "InvoiceI")
                        .WithMany("TimeEntries")
                        .HasForeignKey("InvoiceId", "InvoiceItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TIME_ENT_INVIT");

                    b.Navigation("InvoiceI");

                    b.Navigation("Party");

                    b.Navigation("RateType");

                    b.Navigation("Timesheet");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.Timesheet", b =>
                {
                    b.HasOne("Domain.UserLogin", "ApprovedByUserLogin")
                        .WithMany("Timesheets")
                        .HasForeignKey("ApprovedByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TIMESHEET_AB_UL");

                    b.HasOne("Domain.Party", "ClientParty")
                        .WithMany("TimesheetClientParties")
                        .HasForeignKey("ClientPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TIMESHEET_CPTY");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("TimesheetParties")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TIMESHEET_PRTY");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("Timesheets")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TIMESHEET_STS");

                    b.Navigation("ApprovedByUserLogin");

                    b.Navigation("ClientParty");

                    b.Navigation("Party");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.TimesheetRole", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("TimesheetRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TIMESHTRL_PRTY");

                    b.HasOne("Domain.Timesheet", "Timesheet")
                        .WithMany("TimesheetRoles")
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TIMESHTRL_TSHT");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("TimesheetRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TIMESHTRL_PTRL");

                    b.Navigation("Party");

                    b.Navigation("PartyRole");

                    b.Navigation("Timesheet");
                });

            modelBuilder.Entity("Domain.TrackingCode", b =>
                {
                    b.HasOne("Domain.MarketingCampaign", "MarketingCampaign")
                        .WithMany("TrackingCodes")
                        .HasForeignKey("MarketingCampaignId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TKNG_COD_MKCMPN");

                    b.HasOne("Domain.TrackingCodeType", "TrackingCodeType")
                        .WithMany("TrackingCodes")
                        .HasForeignKey("TrackingCodeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TKNG_COD_TYP");

                    b.Navigation("MarketingCampaign");

                    b.Navigation("TrackingCodeType");
                });

            modelBuilder.Entity("Domain.TrackingCodeOrder", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("TrackingCodeOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TKNG_CODODR_ODR");

                    b.HasOne("Domain.TrackingCode", "TrackingCode")
                        .WithMany("TrackingCodeOrders")
                        .HasForeignKey("TrackingCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TKNG_CODODR_TKCD");

                    b.HasOne("Domain.TrackingCodeType", "TrackingCodeType")
                        .WithMany("TrackingCodeOrders")
                        .HasForeignKey("TrackingCodeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TKNG_CODODR_TYP");

                    b.Navigation("Order");

                    b.Navigation("TrackingCode");

                    b.Navigation("TrackingCodeType");
                });

            modelBuilder.Entity("Domain.TrackingCodeOrderReturn", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("TrackingCodeOrderReturns")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TKNG_CODODR_ODRTN");

                    b.HasOne("Domain.ReturnHeader", "Return")
                        .WithMany("TrackingCodeOrderReturns")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TKNG_CODODR_RTN");

                    b.HasOne("Domain.TrackingCode", "TrackingCode")
                        .WithMany("TrackingCodeOrderReturns")
                        .HasForeignKey("TrackingCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TKNG_CODODR_RTNTCD");

                    b.HasOne("Domain.TrackingCodeType", "TrackingCodeType")
                        .WithMany("TrackingCodeOrderReturns")
                        .HasForeignKey("TrackingCodeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TKNG_CODODR_RTNTYP");

                    b.Navigation("Order");

                    b.Navigation("Return");

                    b.Navigation("TrackingCode");

                    b.Navigation("TrackingCodeType");
                });

            modelBuilder.Entity("Domain.TrackingCodeVisit", b =>
                {
                    b.HasOne("Domain.Enumeration", "SourceEnum")
                        .WithMany("TrackingCodeVisits")
                        .HasForeignKey("SourceEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TKNG_CODVST_SRCEM");

                    b.HasOne("Domain.TrackingCode", "TrackingCode")
                        .WithMany("TrackingCodeVisits")
                        .HasForeignKey("TrackingCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("TKNG_CODVST_TKCD");

                    b.Navigation("SourceEnum");

                    b.Navigation("TrackingCode");
                });

            modelBuilder.Entity("Domain.TrainingClassType", b =>
                {
                    b.HasOne("Domain.TrainingClassType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("TRAIN_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.Uom", b =>
                {
                    b.HasOne("Domain.UomType", "UomType")
                        .WithMany("Uoms")
                        .HasForeignKey("UomTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UOM_TO_TYPE");

                    b.Navigation("UomType");
                });

            modelBuilder.Entity("Domain.UomConversion", b =>
                {
                    b.HasOne("Domain.CustomMethod", "CustomMethod")
                        .WithMany("UomConversions")
                        .HasForeignKey("CustomMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UOM_CUSTOM_METHOD");

                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("UomConversionUoms")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("UOM_CONV_MAIN");

                    b.HasOne("Domain.Uom", "UomIdToNavigation")
                        .WithMany("UomConversionUomIdToNavigations")
                        .HasForeignKey("UomIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("UOM_CONV_TO");

                    b.Navigation("CustomMethod");

                    b.Navigation("Uom");

                    b.Navigation("UomIdToNavigation");
                });

            modelBuilder.Entity("Domain.UomConversionDated", b =>
                {
                    b.HasOne("Domain.CustomMethod", "CustomMethod")
                        .WithMany("UomConversionDateds")
                        .HasForeignKey("CustomMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UOMD_CUSTOM_METHOD");

                    b.HasOne("Domain.Enumeration", "PurposeEnum")
                        .WithMany("UomConversionDateds")
                        .HasForeignKey("PurposeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UOMD_PURPOSE_ENUM");

                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("UomConversionDatedUoms")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATE_UOM_CONV_MAIN");

                    b.HasOne("Domain.Uom", "UomIdToNavigation")
                        .WithMany("UomConversionDatedUomIdToNavigations")
                        .HasForeignKey("UomIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATE_UOM_CONV_TO");

                    b.Navigation("CustomMethod");

                    b.Navigation("PurposeEnum");

                    b.Navigation("Uom");

                    b.Navigation("UomIdToNavigation");
                });

            modelBuilder.Entity("Domain.UomGroup", b =>
                {
                    b.HasOne("Domain.Uom", "Uom")
                        .WithMany("UomGroups")
                        .HasForeignKey("UomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("UOM_GROUP_UOM");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("Domain.UomType", b =>
                {
                    b.HasOne("Domain.UomType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UOM_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.UserAgent", b =>
                {
                    b.HasOne("Domain.BrowserType", "BrowserType")
                        .WithMany("UserAgents")
                        .HasForeignKey("BrowserTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UAGENT_BROWSER");

                    b.HasOne("Domain.PlatformType", "PlatformType")
                        .WithMany("UserAgents")
                        .HasForeignKey("PlatformTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UAGENT_PLATFORM");

                    b.HasOne("Domain.ProtocolType", "ProtocolType")
                        .WithMany("UserAgents")
                        .HasForeignKey("ProtocolTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UAGENT_PROTOCOL");

                    b.HasOne("Domain.UserAgentMethodType", "UserAgentMethodType")
                        .WithMany("UserAgents")
                        .HasForeignKey("UserAgentMethodTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UAGENT_METHOD");

                    b.HasOne("Domain.UserAgentType", "UserAgentType")
                        .WithMany("UserAgents")
                        .HasForeignKey("UserAgentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UAGENT_TYPE");

                    b.Navigation("BrowserType");

                    b.Navigation("PlatformType");

                    b.Navigation("ProtocolType");

                    b.Navigation("UserAgentMethodType");

                    b.Navigation("UserAgentType");
                });

            modelBuilder.Entity("Domain.UserLogin", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("UserLogins")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("USER_PARTY");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.UserLoginHistory", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("UserLoginHistories")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("USER_LH_PARTY");

                    b.HasOne("Domain.UserLogin", "UserLogin")
                        .WithMany("UserLoginHistories")
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("USER_LH_USER");

                    b.Navigation("Party");

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("Domain.UserLoginPasswordHistory", b =>
                {
                    b.HasOne("Domain.UserLogin", "UserLogin")
                        .WithMany("UserLoginPasswordHistories")
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("USER_LPH_USER");

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("Domain.UserLoginSecurityGroup", b =>
                {
                    b.HasOne("Domain.SecurityGroup", "Group")
                        .WithMany("UserLoginSecurityGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("USER_SECGRP_GRP");

                    b.HasOne("Domain.UserLogin", "UserLogin")
                        .WithMany("UserLoginSecurityGroups")
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("USER_SECGRP_USER");

                    b.Navigation("Group");

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("Domain.UserLoginSession", b =>
                {
                    b.HasOne("Domain.UserLogin", "UserLogin")
                        .WithOne("UserLoginSession")
                        .HasForeignKey("Domain.UserLoginSession", "UserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("USER_SESSION_USER");

                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("Domain.UserPreference", b =>
                {
                    b.HasOne("Domain.UserPrefGroupType", "UserPrefGroupType")
                        .WithMany("UserPreferences")
                        .HasForeignKey("UserPrefGroupTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("UP_USER_GROUP_TYPE");

                    b.Navigation("UserPrefGroupType");
                });

            modelBuilder.Entity("Domain.ValidContactMechRole", b =>
                {
                    b.HasOne("Domain.ContactMechType", "ContactMechType")
                        .WithMany("ValidContactMechRoles")
                        .HasForeignKey("ContactMechTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VAL_CMRLE_CMTYPE");

                    b.HasOne("Domain.RoleType", "RoleType")
                        .WithMany("ValidContactMechRoles")
                        .HasForeignKey("RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VAL_CMRLE_ROLE");

                    b.Navigation("ContactMechType");

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("Domain.ValidResponsibility", b =>
                {
                    b.HasOne("Domain.EmplPositionType", "EmplPositionType")
                        .WithMany("ValidResponsibilities")
                        .HasForeignKey("EmplPositionTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VALID_RTY_EPSTP");

                    b.HasOne("Domain.ResponsibilityType", "ResponsibilityType")
                        .WithMany("ValidResponsibilities")
                        .HasForeignKey("ResponsibilityTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VALID_RTY_RYTP");

                    b.Navigation("EmplPositionType");

                    b.Navigation("ResponsibilityType");
                });

            modelBuilder.Entity("Domain.VarianceReasonGlAccount", b =>
                {
                    b.HasOne("Domain.GlAccount", "GlAccount")
                        .WithMany("VarianceReasonGlAccounts")
                        .HasForeignKey("GlAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("VRGL_GLACCT");

                    b.HasOne("Domain.Party", "OrganizationParty")
                        .WithMany("VarianceReasonGlAccounts")
                        .HasForeignKey("OrganizationPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VRGL_PARTY");

                    b.HasOne("Domain.VarianceReason", "VarianceReason")
                        .WithMany("VarianceReasonGlAccounts")
                        .HasForeignKey("VarianceReasonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VRGL_VREAS");

                    b.Navigation("GlAccount");

                    b.Navigation("OrganizationParty");

                    b.Navigation("VarianceReason");
                });

            modelBuilder.Entity("Domain.Vehicle", b =>
                {
                    b.HasOne("Domain.ProductCategory", "ExteriorColor")
                        .WithMany("VehiclesAsExteriorColor")
                        .HasForeignKey("ExteriorColorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Party", "OwnerParty")
                        .WithMany("Vehicles")
                        .HasForeignKey("FromPartyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.ProductCategory", "InteriorColor")
                        .WithMany("VehiclesAsInteriorColor")
                        .HasForeignKey("InteriorColorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.ProductCategory", "Make")
                        .WithMany("VehiclesAsMake")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ProductCategory", "Model")
                        .WithMany("VehiclesAsModel")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ProductCategory", "TransmissionType")
                        .WithMany("VehiclesAsTransmissionType")
                        .HasForeignKey("TransmissionTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.ProductCategory", "VehicleType")
                        .WithMany("VehiclesAsVehicleType")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ExteriorColor");

                    b.Navigation("InteriorColor");

                    b.Navigation("Make");

                    b.Navigation("Model");

                    b.Navigation("OwnerParty");

                    b.Navigation("TransmissionType");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Domain.VehicleAnnotation", b =>
                {
                    b.HasOne("Domain.Annotation", "Annotation")
                        .WithMany("VehicleAnnotations")
                        .HasForeignKey("AnnotationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Vehicle", "Vehicle")
                        .WithMany("VehicleAnnotations")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Annotation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.VehicleContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("VehicleContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Vehicle", "Vehicle")
                        .WithMany("VehicleContents")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Vendor", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithOne("Vendor")
                        .HasForeignKey("Domain.Vendor", "PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VENDOR_PARTY");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Domain.VendorProduct", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("VendorProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VENDPROD_PROD");

                    b.HasOne("Domain.ProductStoreGroup", "ProductStoreGroup")
                        .WithMany("VendorProducts")
                        .HasForeignKey("ProductStoreGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VENDPROD_PSGRP");

                    b.HasOne("Domain.Party", "VendorParty")
                        .WithMany("VendorProducts")
                        .HasForeignKey("VendorPartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VENDPROD_VPTY");

                    b.Navigation("Product");

                    b.Navigation("ProductStoreGroup");

                    b.Navigation("VendorParty");
                });

            modelBuilder.Entity("Domain.VideoDataResource", b =>
                {
                    b.HasOne("Domain.DataResource", "DataResource")
                        .WithOne("VideoDataResource")
                        .HasForeignKey("Domain.VideoDataResource", "DataResourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("DATA_REC_VIDEO");

                    b.Navigation("DataResource");
                });

            modelBuilder.Entity("Domain.Visit", b =>
                {
                    b.HasOne("Domain.UserAgent", "UserAgent")
                        .WithMany("Visits")
                        .HasForeignKey("UserAgentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("VISIT_USER_AGNT");

                    b.HasOne("Domain.Visitor", "Visitor")
                        .WithMany("Visits")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("VISIT_VISITOR");

                    b.Navigation("UserAgent");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("Domain.VisualTheme", b =>
                {
                    b.HasOne("Domain.VisualThemeSet", "VisualThemeSet")
                        .WithMany("VisualThemes")
                        .HasForeignKey("VisualThemeSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("VT_THEME_SET");

                    b.Navigation("VisualThemeSet");
                });

            modelBuilder.Entity("Domain.VisualThemeResource", b =>
                {
                    b.HasOne("Domain.Enumeration", "ResourceTypeEnum")
                        .WithMany("VisualThemeResources")
                        .HasForeignKey("ResourceTypeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VT_RES_TYPE_ENUM");

                    b.HasOne("Domain.VisualTheme", "VisualTheme")
                        .WithMany("VisualThemeResources")
                        .HasForeignKey("VisualThemeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("VT_RES_THEME");

                    b.Navigation("ResourceTypeEnum");

                    b.Navigation("VisualTheme");
                });

            modelBuilder.Entity("Domain.WebAnalyticsType", b =>
                {
                    b.HasOne("Domain.WebAnalyticsType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WANA_TYP_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.WebPage", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("WebPages")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WEB_PAGE_CONTENT");

                    b.HasOne("Domain.WebSite", "WebSite")
                        .WithMany("WebPages")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WEB_PAGE_SITE");

                    b.Navigation("Content");

                    b.Navigation("WebSite");
                });

            modelBuilder.Entity("Domain.WebSite", b =>
                {
                    b.HasOne("Domain.ProductStore", "ProductStore")
                        .WithMany("WebSites")
                        .HasForeignKey("ProductStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WEB_SITE_PRDS");

                    b.HasOne("Domain.VisualThemeSet", "VisualThemeSet")
                        .WithMany("WebSites")
                        .HasForeignKey("VisualThemeSetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WEB_SITE_THEME_SET");

                    b.Navigation("ProductStore");

                    b.Navigation("VisualThemeSet");
                });

            modelBuilder.Entity("Domain.WebSiteContactList", b =>
                {
                    b.HasOne("Domain.ContactList", "ContactList")
                        .WithMany("WebSiteContactLists")
                        .HasForeignKey("ContactListId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CNTCT_LST_WEB_SITE");

                    b.HasOne("Domain.WebSite", "WebSite")
                        .WithMany("WebSiteContactLists")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WEB_SITE_CNTCT_LST");

                    b.Navigation("ContactList");

                    b.Navigation("WebSite");
                });

            modelBuilder.Entity("Domain.WebSiteContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("WebSiteContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WSCTNT_CONTENT");

                    b.HasOne("Domain.WebSiteContentType", "WebSiteContentType")
                        .WithMany("WebSiteContents")
                        .HasForeignKey("WebSiteContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WSCTNT_WSCTTYPE");

                    b.HasOne("Domain.WebSite", "WebSite")
                        .WithMany("WebSiteContents")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WSCTNT_WEBSITE");

                    b.Navigation("Content");

                    b.Navigation("WebSite");

                    b.Navigation("WebSiteContentType");
                });

            modelBuilder.Entity("Domain.WebSiteContentType", b =>
                {
                    b.HasOne("Domain.WebSiteContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WSCT_TYPE_PARENT");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.WebSitePathAlias", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("WebSitePathAliases")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WSPATH_CONTENT");

                    b.HasOne("Domain.WebSite", "WebSite")
                        .WithMany("WebSitePathAliases")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WSPATH_WEBSITE");

                    b.Navigation("Content");

                    b.Navigation("WebSite");
                });

            modelBuilder.Entity("Domain.WebSitePublishPoint", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithOne("WebSitePublishPoint")
                        .HasForeignKey("Domain.WebSitePublishPoint", "ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WBSTPP_CONTENT");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Domain.WebSiteRole", b =>
                {
                    b.HasOne("Domain.WebSite", "WebSite")
                        .WithMany("WebSiteRoles")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WSRLE_WSITE");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("WebSiteRoles")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WSRLE_PTYRLE");

                    b.Navigation("PartyRole");

                    b.Navigation("WebSite");
                });

            modelBuilder.Entity("Domain.WebUserPreference", b =>
                {
                    b.HasOne("Domain.Party", "Party")
                        .WithMany("WebUserPreferences")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WEB_PREF_PARTY");

                    b.HasOne("Domain.UserLogin", "UserLogin")
                        .WithMany("WebUserPreferences")
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WEB_PREF_USER");

                    b.HasOne("Domain.WebPreferenceType", "WebPreferenceType")
                        .WithMany("WebUserPreferences")
                        .HasForeignKey("WebPreferenceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WEB_PREF_TYPE");

                    b.Navigation("Party");

                    b.Navigation("UserLogin");

                    b.Navigation("WebPreferenceType");
                });

            modelBuilder.Entity("Domain.WorkEffort", b =>
                {
                    b.HasOne("Domain.AccommodationMap", "AccommodationMap")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("AccommodationMapId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_ACC_MAP");

                    b.HasOne("Domain.AccommodationSpot", "AccommodationSpot")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("AccommodationSpotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_ACC_SPOT");

                    b.HasOne("Domain.StatusItem", "CurrentStatus")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_CURSTTS");

                    b.HasOne("Domain.CustomMethod", "EstimateCalcMethodNavigation")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("EstimateCalcMethod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_CUS_MET");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_FACILITY");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_FXDASST");

                    b.HasOne("Domain.Uom", "MoneyUom")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("MoneyUomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_MON_UOM");

                    b.HasOne("Domain.NoteDatum", "Note")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_NOTE");

                    b.HasOne("Domain.RecurrenceInfo", "RecurrenceInfo")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("RecurrenceInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_RECINFO");

                    b.HasOne("Domain.RuntimeDatum", "RuntimeData")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("RuntimeDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_RNTMDTA");

                    b.HasOne("Domain.Enumeration", "ScopeEnum")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("ScopeEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_SC_ENUM");

                    b.HasOne("Domain.TemporalExpression", "TempExpr")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("TempExprId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_TEMPEXPR");

                    b.HasOne("Domain.WorkEffort", "WorkEffortParent")
                        .WithMany("InverseWorkEffortParent")
                        .HasForeignKey("WorkEffortParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_PARENT");

                    b.HasOne("Domain.WorkEffortPurposeType", "WorkEffortPurposeType")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("WorkEffortPurposeTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_PRPTYP");

                    b.HasOne("Domain.WorkEffortType", "WorkEffortType")
                        .WithMany("WorkEfforts")
                        .HasForeignKey("WorkEffortTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_TYPE");

                    b.Navigation("AccommodationMap");

                    b.Navigation("AccommodationSpot");

                    b.Navigation("CurrentStatus");

                    b.Navigation("EstimateCalcMethodNavigation");

                    b.Navigation("Facility");

                    b.Navigation("FixedAsset");

                    b.Navigation("MoneyUom");

                    b.Navigation("Note");

                    b.Navigation("RecurrenceInfo");

                    b.Navigation("RuntimeData");

                    b.Navigation("ScopeEnum");

                    b.Navigation("TempExpr");

                    b.Navigation("WorkEffortParent");

                    b.Navigation("WorkEffortPurposeType");

                    b.Navigation("WorkEffortType");
                });

            modelBuilder.Entity("Domain.WorkEffortAssoc", b =>
                {
                    b.HasOne("Domain.WorkEffortAssocType", "WorkEffortAssocType")
                        .WithMany("WorkEffortAssocs")
                        .HasForeignKey("WorkEffortAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WK_EFFRTASSC_TYP");

                    b.HasOne("Domain.WorkEffort", "WorkEffortIdFromNavigation")
                        .WithMany("WorkEffortAssocWorkEffortIdFromNavigations")
                        .HasForeignKey("WorkEffortIdFrom")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WK_EFFRTASSC_FWE");

                    b.HasOne("Domain.WorkEffort", "WorkEffortIdToNavigation")
                        .WithMany("WorkEffortAssocWorkEffortIdToNavigations")
                        .HasForeignKey("WorkEffortIdTo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WK_EFFRTASSC_TWE");

                    b.Navigation("WorkEffortAssocType");

                    b.Navigation("WorkEffortIdFromNavigation");

                    b.Navigation("WorkEffortIdToNavigation");
                });

            modelBuilder.Entity("Domain.WorkEffortAssocAttribute", b =>
                {
                    b.HasOne("Domain.WorkEffortAssoc", "WorkEffortAssoc")
                        .WithMany("WorkEffortAssocAttributes")
                        .HasForeignKey("WorkEffortIdFrom", "WorkEffortIdTo", "WorkEffortAssocTypeId", "FromDate")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRTASSC_ATTR");

                    b.Navigation("WorkEffortAssoc");
                });

            modelBuilder.Entity("Domain.WorkEffortAssocType", b =>
                {
                    b.HasOne("Domain.WorkEffortAssocType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRTASSC_TPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.WorkEffortAssocTypeAttr", b =>
                {
                    b.HasOne("Domain.WorkEffortAssocType", "WorkEffortAssocType")
                        .WithMany("WorkEffortAssocTypeAttrs")
                        .HasForeignKey("WorkEffortAssocTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WK_EFFRTASSC_TATR");

                    b.Navigation("WorkEffortAssocType");
                });

            modelBuilder.Entity("Domain.WorkEffortAttribute", b =>
                {
                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortAttributes")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WK_EFFRT_ATTR_WE");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortBilling", b =>
                {
                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortBillings")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WK_EFFBLNG_WEFF");

                    b.HasOne("Domain.InvoiceItem", "InvoiceI")
                        .WithMany("WorkEffortBillings")
                        .HasForeignKey("InvoiceId", "InvoiceItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WK_EFFBLNG_INVITM");

                    b.Navigation("InvoiceI");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortContactMechNew", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("WorkEffortContactMechNews")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_CMECH_CMECH");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortContactMechNews")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_CMECH_WKEFF");

                    b.Navigation("ContactMech");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortContent", b =>
                {
                    b.HasOne("Domain.Content", "Content")
                        .WithMany("WorkEffortContents")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_CNT_CNT");

                    b.HasOne("Domain.WorkEffortContentType", "WorkEffortContentType")
                        .WithMany("WorkEffortContents")
                        .HasForeignKey("WorkEffortContentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_CNT_WCTP");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortContents")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_CNT_WKEFF");

                    b.Navigation("Content");

                    b.Navigation("WorkEffort");

                    b.Navigation("WorkEffortContentType");
                });

            modelBuilder.Entity("Domain.WorkEffortContentType", b =>
                {
                    b.HasOne("Domain.WorkEffortContentType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WEFFCTP_TP_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.WorkEffortCostCalc", b =>
                {
                    b.HasOne("Domain.CostComponentCalc", "CostComponentCalc")
                        .WithMany("WorkEffortCostCalcs")
                        .HasForeignKey("CostComponentCalcId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_COS_CCC");

                    b.HasOne("Domain.CostComponentType", "CostComponentType")
                        .WithMany("WorkEffortCostCalcs")
                        .HasForeignKey("CostComponentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WK_EFFRT_COS_CCT");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortCostCalcs")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WK_EFFRT_COS_WEF");

                    b.Navigation("CostComponentCalc");

                    b.Navigation("CostComponentType");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortDeliverableProd", b =>
                {
                    b.HasOne("Domain.Deliverable", "Deliverable")
                        .WithMany("WorkEffortDeliverableProds")
                        .HasForeignKey("DeliverableId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_DELPRD_DEL");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortDeliverableProds")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_DELPRD_WEFF");

                    b.Navigation("Deliverable");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortEventReminder", b =>
                {
                    b.HasOne("Domain.ContactMech", "ContactMech")
                        .WithMany("WorkEffortEventReminders")
                        .HasForeignKey("ContactMechId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WE_EVENT_REMIND_CM");

                    b.HasOne("Domain.Party", "Party")
                        .WithMany("WorkEffortEventReminders")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WE_EVENT_REMIND_PY");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortEventReminders")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WE_EVENT_REMIND_WE");

                    b.Navigation("ContactMech");

                    b.Navigation("Party");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortFixedAssetAssign", b =>
                {
                    b.HasOne("Domain.StatusItem", "AvailabilityStatus")
                        .WithMany("WorkEffortFixedAssetAssignAvailabilityStatuses")
                        .HasForeignKey("AvailabilityStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_FXDAA_AVAIL");

                    b.HasOne("Domain.FixedAsset", "FixedAsset")
                        .WithMany("WorkEffortFixedAssetAssigns")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_FXDAA_FXAS");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("WorkEffortFixedAssetAssignStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_FXDAA_STTS");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortFixedAssetAssigns")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_FXDAA_WEFF");

                    b.Navigation("AvailabilityStatus");

                    b.Navigation("FixedAsset");

                    b.Navigation("Status");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortFixedAssetStd", b =>
                {
                    b.HasOne("Domain.FixedAssetType", "FixedAssetType")
                        .WithMany("WorkEffortFixedAssetStds")
                        .HasForeignKey("FixedAssetTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_FASTD_FAT");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortFixedAssetStds")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_FASTD_WEFF");

                    b.Navigation("FixedAssetType");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortGoodStandard", b =>
                {
                    b.HasOne("Domain.Product", "Product")
                        .WithMany("WorkEffortGoodStandards")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_GDSTD_PROD");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("WorkEffortGoodStandards")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_GDSTD_STTS");

                    b.HasOne("Domain.WorkEffortGoodStandardType", "WorkEffortGoodStdType")
                        .WithMany("WorkEffortGoodStandards")
                        .HasForeignKey("WorkEffortGoodStdTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_GDSTD_TYPE");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortGoodStandards")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_GDSTD_WEFF");

                    b.Navigation("Product");

                    b.Navigation("Status");

                    b.Navigation("WorkEffort");

                    b.Navigation("WorkEffortGoodStdType");
                });

            modelBuilder.Entity("Domain.WorkEffortGoodStandardType", b =>
                {
                    b.HasOne("Domain.WorkEffortGoodStandardType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_GDSTD_TPAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.WorkEffortIcalDatum", b =>
                {
                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithOne("WorkEffortIcalDatum")
                        .HasForeignKey("Domain.WorkEffortIcalDatum", "WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_ICAL_DATA");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortInventoryAssign", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("WorkEffortInventoryAssigns")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_INVAS_INVIT");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("WorkEffortInventoryAssigns")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_INVAS_STTS");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortInventoryAssigns")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_INVAS_WEFF");

                    b.Navigation("InventoryItem");

                    b.Navigation("Status");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortInventoryProduced", b =>
                {
                    b.HasOne("Domain.InventoryItem", "InventoryItem")
                        .WithMany("WorkEffortInventoryProduceds")
                        .HasForeignKey("InventoryItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_INVPD_INVIT");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortInventoryProduceds")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_INVPD_WEFF");

                    b.Navigation("InventoryItem");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortKeyword", b =>
                {
                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortKeywords")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WEFF_KWD_WEFF");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortNote", b =>
                {
                    b.HasOne("Domain.NoteDatum", "Note")
                        .WithMany("WorkEffortNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_NTE_NOTE");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortNotes")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_NTE_WEFF");

                    b.Navigation("Note");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortPartyAssignment", b =>
                {
                    b.HasOne("Domain.UserLogin", "AssignedByUserLogin")
                        .WithMany("WorkEffortPartyAssignments")
                        .HasForeignKey("AssignedByUserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_PA_ABUSRLOG");

                    b.HasOne("Domain.StatusItem", "AvailabilityStatus")
                        .WithMany("WorkEffortPartyAssignmentAvailabilityStatuses")
                        .HasForeignKey("AvailabilityStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_PA_AVSTTS");

                    b.HasOne("Domain.Enumeration", "DelegateReasonEnum")
                        .WithMany("WorkEffortPartyAssignmentDelegateReasonEnums")
                        .HasForeignKey("DelegateReasonEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_PA_DELR_ENM");

                    b.HasOne("Domain.Enumeration", "ExpectationEnum")
                        .WithMany("WorkEffortPartyAssignmentExpectationEnums")
                        .HasForeignKey("ExpectationEnumId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_PA_EXP_ENUM");

                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany("WorkEffortPartyAssignments")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_PA_FACILITY");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("WorkEffortPartyAssignmentStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_PA_STTS");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortPartyAssignments")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_PA_WE");

                    b.HasOne("Domain.PartyRole", "PartyRole")
                        .WithMany("WorkEffortPartyAssignments")
                        .HasForeignKey("PartyId", "RoleTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_PA_PRTY_ROLE");

                    b.Navigation("AssignedByUserLogin");

                    b.Navigation("AvailabilityStatus");

                    b.Navigation("DelegateReasonEnum");

                    b.Navigation("ExpectationEnum");

                    b.Navigation("Facility");

                    b.Navigation("PartyRole");

                    b.Navigation("Status");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortPurposeType", b =>
                {
                    b.HasOne("Domain.WorkEffortPurposeType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_PTYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.WorkEffortReview", b =>
                {
                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("WorkEffortReviews")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WEFF_REVIEW_STTS");

                    b.HasOne("Domain.UserLogin", "UserLogin")
                        .WithMany("WorkEffortReviews")
                        .HasForeignKey("UserLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WEFF_REVIEW_UL");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortReviews")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WEFF_REVIEW_WEFF");

                    b.Navigation("Status");

                    b.Navigation("UserLogin");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortSearchConstraint", b =>
                {
                    b.HasOne("Domain.WorkEffortSearchResult", "WorkEffortSearchResult")
                        .WithMany("WorkEffortSearchConstraints")
                        .HasForeignKey("WorkEffortSearchResultId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WEFF_SCHRSI_RES");

                    b.Navigation("WorkEffortSearchResult");
                });

            modelBuilder.Entity("Domain.WorkEffortSkillStandard", b =>
                {
                    b.HasOne("Domain.SkillType", "SkillType")
                        .WithMany("WorkEffortSkillStandards")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_SKLSTD_SKTP");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortSkillStandards")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_SKLSTD_WEFF");

                    b.Navigation("SkillType");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortStatus", b =>
                {
                    b.HasOne("Domain.UserLogin", "SetByUserLoginNavigation")
                        .WithMany("WorkEffortStatuses")
                        .HasForeignKey("SetByUserLogin")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WKEFF_STTS_SB_UL");

                    b.HasOne("Domain.StatusItem", "Status")
                        .WithMany("WorkEffortStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_STTS_STTS");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortStatuses")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_STTS_WE");

                    b.Navigation("SetByUserLoginNavigation");

                    b.Navigation("Status");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortSurveyAppl", b =>
                {
                    b.HasOne("Domain.ProductStoreSurveyAppl", "Survey")
                        .WithMany("WorkEffortSurveyAppls")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEF_SURVAPL_PSSA");

                    b.HasOne("Domain.Survey", "SurveyNavigation")
                        .WithMany("WorkEffortSurveyAppls")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEF_SURVAPL_SVY");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkEffortSurveyAppls")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEF_SURVAPL_WKE");

                    b.Navigation("Survey");

                    b.Navigation("SurveyNavigation");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortTransBox", b =>
                {
                    b.HasOne("Domain.WorkEffort", "ProcessWorkEffort")
                        .WithMany("WorkEffortTransBoxes")
                        .HasForeignKey("ProcessWorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WKEFF_TXBX_WE");

                    b.Navigation("ProcessWorkEffort");
                });

            modelBuilder.Entity("Domain.WorkEffortType", b =>
                {
                    b.HasOne("Domain.WorkEffortType", "ParentType")
                        .WithMany("InverseParentType")
                        .HasForeignKey("ParentTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WK_EFFRT_TYPE_PAR");

                    b.Navigation("ParentType");
                });

            modelBuilder.Entity("Domain.WorkEffortTypeAttr", b =>
                {
                    b.HasOne("Domain.WorkEffortType", "WorkEffortType")
                        .WithMany("WorkEffortTypeAttrs")
                        .HasForeignKey("WorkEffortTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WK_EFFRT_TYPE_ATR");

                    b.Navigation("WorkEffortType");
                });

            modelBuilder.Entity("Domain.WorkOrderItemFulfillment", b =>
                {
                    b.HasOne("Domain.OrderHeader", "Order")
                        .WithMany("WorkOrderItemFulfillments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WORDER_ITFMT_OHDR");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkOrderItemFulfillments")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WORDER_ITFMT_WEFRT");

                    b.HasOne("Domain.OrderItem", "OrderI")
                        .WithMany("WorkOrderItemFulfillments")
                        .HasForeignKey("OrderId", "OrderItemSeqId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WORDER_ITFMT_OITM");

                    b.Navigation("Order");

                    b.Navigation("OrderI");

                    b.Navigation("WorkEffort");
                });

            modelBuilder.Entity("Domain.WorkRequirementFulfillment", b =>
                {
                    b.HasOne("Domain.Requirement", "Requirement")
                        .WithMany("WorkRequirementFulfillments")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WORK_REQFL_REQ");

                    b.HasOne("Domain.WorkEffort", "WorkEffort")
                        .WithMany("WorkRequirementFulfillments")
                        .HasForeignKey("WorkEffortId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("WORK_REQFL_WEFF");

                    b.HasOne("Domain.WorkReqFulfType", "WorkReqFulfType")
                        .WithMany("WorkRequirementFulfillments")
                        .HasForeignKey("WorkReqFulfTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("WORK_REQFL_WRFT");

                    b.Navigation("Requirement");

                    b.Navigation("WorkEffort");

                    b.Navigation("WorkReqFulfType");
                });

            modelBuilder.Entity("Domain.AccommodationClass", b =>
                {
                    b.Navigation("AccommodationMaps");

                    b.Navigation("AccommodationSpots");

                    b.Navigation("InverseParentClass");
                });

            modelBuilder.Entity("Domain.AccommodationMap", b =>
                {
                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.AccommodationMapType", b =>
                {
                    b.Navigation("AccommodationMaps");
                });

            modelBuilder.Entity("Domain.AccommodationSpot", b =>
                {
                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.AcctgTran", b =>
                {
                    b.Navigation("AcctgTransAttributes");

                    b.Navigation("AcctgTransEntries");
                });

            modelBuilder.Entity("Domain.AcctgTransEntry", b =>
                {
                    b.Navigation("GlReconciliationEntries");
                });

            modelBuilder.Entity("Domain.AcctgTransEntryType", b =>
                {
                    b.Navigation("AcctgTransEntries");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.AcctgTransType", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("AcctgTransTypeAttrs");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.Agreement", b =>
                {
                    b.Navigation("Addenda");

                    b.Navigation("AgreementAttributes");

                    b.Navigation("AgreementContents");

                    b.Navigation("AgreementGeographicalApplics");

                    b.Navigation("AgreementItems");

                    b.Navigation("AgreementPartyApplics");

                    b.Navigation("AgreementRoles");

                    b.Navigation("AgreementStatuses");

                    b.Navigation("AgreementTerms");

                    b.Navigation("AgreementWorkEffortApplics");

                    b.Navigation("OrderItemShipGroups");
                });

            modelBuilder.Entity("Domain.AgreementContentType", b =>
                {
                    b.Navigation("AgreementContents");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.AgreementItem", b =>
                {
                    b.Navigation("Addenda");

                    b.Navigation("AgreementEmploymentAppls");

                    b.Navigation("AgreementFacilityAppls");

                    b.Navigation("AgreementGeographicalApplics");

                    b.Navigation("AgreementItemAttributes");

                    b.Navigation("AgreementProductAppls");

                    b.Navigation("AgreementPromoAppls");

                    b.Navigation("AgreementTerms");

                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("Domain.AgreementItemType", b =>
                {
                    b.Navigation("AgreementItemTypeAttrs");

                    b.Navigation("AgreementItems");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.AgreementTerm", b =>
                {
                    b.Navigation("AgreementTermAttributes");
                });

            modelBuilder.Entity("Domain.AgreementType", b =>
                {
                    b.Navigation("AgreementTypeAttrs");

                    b.Navigation("Agreements");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.AllocationPlanHeader", b =>
                {
                    b.Navigation("AllocationPlanItems");
                });

            modelBuilder.Entity("Domain.AllocationPlanType", b =>
                {
                    b.Navigation("AllocationPlanHeaders");
                });

            modelBuilder.Entity("Domain.Annotation", b =>
                {
                    b.Navigation("VehicleAnnotations");
                });

            modelBuilder.Entity("Domain.AppUserLogin", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Domain.BenefitType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PartyBenefits");
                });

            modelBuilder.Entity("Domain.BillingAccount", b =>
                {
                    b.Navigation("BillingAccountRoles");

                    b.Navigation("BillingAccountTerms");

                    b.Navigation("Invoices");

                    b.Navigation("OrderHeaders");

                    b.Navigation("PaymentApplications");

                    b.Navigation("ReturnHeaders");

                    b.Navigation("ReturnItemResponses");
                });

            modelBuilder.Entity("Domain.BillingAccountTerm", b =>
                {
                    b.Navigation("BillingAccountTermAttrs");
                });

            modelBuilder.Entity("Domain.BrowserType", b =>
                {
                    b.Navigation("UserAgents");
                });

            modelBuilder.Entity("Domain.Budget", b =>
                {
                    b.Navigation("BudgetAttributes");

                    b.Navigation("BudgetItems");

                    b.Navigation("BudgetReviews");

                    b.Navigation("BudgetRevisionImpacts");

                    b.Navigation("BudgetRevisions");

                    b.Navigation("BudgetRoles");

                    b.Navigation("BudgetScenarioApplications");

                    b.Navigation("BudgetStatuses");

                    b.Navigation("PaymentBudgetAllocations");
                });

            modelBuilder.Entity("Domain.BudgetItem", b =>
                {
                    b.Navigation("BudgetItemAttributes");

                    b.Navigation("BudgetRevisionImpacts");

                    b.Navigation("BudgetScenarioApplications");

                    b.Navigation("RequirementBudgetAllocations");
                });

            modelBuilder.Entity("Domain.BudgetItemType", b =>
                {
                    b.Navigation("BudgetItemTypeAttrs");

                    b.Navigation("BudgetItems");

                    b.Navigation("BudgetScenarioRules");

                    b.Navigation("GlBudgetXrefs");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.BudgetReviewResultType", b =>
                {
                    b.Navigation("BudgetReviews");
                });

            modelBuilder.Entity("Domain.BudgetRevision", b =>
                {
                    b.Navigation("BudgetRevisionImpacts");
                });

            modelBuilder.Entity("Domain.BudgetScenario", b =>
                {
                    b.Navigation("BudgetScenarioApplications");

                    b.Navigation("BudgetScenarioRules");
                });

            modelBuilder.Entity("Domain.BudgetType", b =>
                {
                    b.Navigation("BudgetTypeAttrs");

                    b.Navigation("Budgets");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.CarrierShipmentMethod", b =>
                {
                    b.Navigation("FacilityCarrierShipments");

                    b.Navigation("OrderItemShipGroups");

                    b.Navigation("ShipmentCostEstimates");

                    b.Navigation("ShipmentTimeEstimates");

                    b.Navigation("ShoppingLists");
                });

            modelBuilder.Entity("Domain.CharacterSet", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("DataResources");
                });

            modelBuilder.Entity("Domain.CommContentAssocType", b =>
                {
                    b.Navigation("CommEventContentAssocs");
                });

            modelBuilder.Entity("Domain.CommunicationEvent", b =>
                {
                    b.Navigation("CommEventContentAssocs");

                    b.Navigation("CommunicationEventOrders");

                    b.Navigation("CommunicationEventProducts");

                    b.Navigation("CommunicationEventPurposes");

                    b.Navigation("CommunicationEventReturns");

                    b.Navigation("CommunicationEventRoles");

                    b.Navigation("CommunicationEventWorkEffs");

                    b.Navigation("ContactListCommStatuses");

                    b.Navigation("CustRequestCommEvents");

                    b.Navigation("PartyNeeds");

                    b.Navigation("SubscriptionCommEvents");
                });

            modelBuilder.Entity("Domain.CommunicationEventPrpTyp", b =>
                {
                    b.Navigation("CommunicationEventPurposes");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.CommunicationEventType", b =>
                {
                    b.Navigation("CommunicationEvents");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.Component", b =>
                {
                    b.Navigation("TenantComponents");
                });

            modelBuilder.Entity("Domain.ContactList", b =>
                {
                    b.Navigation("CommunicationEvents");

                    b.Navigation("ContactListCommStatuses");

                    b.Navigation("ContactListParties");

                    b.Navigation("WebSiteContactLists");
                });

            modelBuilder.Entity("Domain.ContactListParty", b =>
                {
                    b.Navigation("ContactListPartyStatuses");
                });

            modelBuilder.Entity("Domain.ContactListType", b =>
                {
                    b.Navigation("ContactLists");
                });

            modelBuilder.Entity("Domain.ContactMech", b =>
                {
                    b.Navigation("BillingAccounts");

                    b.Navigation("CheckAccounts");

                    b.Navigation("CommunicationEventContactMechIdFromNavigations");

                    b.Navigation("CommunicationEventContactMechIdToNavigations");

                    b.Navigation("CommunicationEventRoles");

                    b.Navigation("ContactListCommStatuses");

                    b.Navigation("ContactListParties");

                    b.Navigation("ContactMechAttributes");

                    b.Navigation("ContactMechLinkContactMechIdFromNavigations");

                    b.Navigation("ContactMechLinkContactMechIdToNavigations");

                    b.Navigation("CreditCards");

                    b.Navigation("CustRequests");

                    b.Navigation("EftAccounts");

                    b.Navigation("FacilityContactMechPurposes");

                    b.Navigation("FacilityContactMeches");

                    b.Navigation("FtpAddress")
                        .IsRequired();

                    b.Navigation("GiftCards");

                    b.Navigation("InvoiceContactMeches");

                    b.Navigation("Invoices");

                    b.Navigation("OrderContactMeches");

                    b.Navigation("OrderItemContactMeches");

                    b.Navigation("OrderItemShipGroupContactMeches");

                    b.Navigation("OrderItemShipGroupTelecomContactMeches");

                    b.Navigation("PartyContactMechPurposes");

                    b.Navigation("PartyContactMeches");

                    b.Navigation("PayPalPaymentMethods");

                    b.Navigation("PostalAddress")
                        .IsRequired();

                    b.Navigation("ProdPromoCodeContactMeches");

                    b.Navigation("RespondingParties");

                    b.Navigation("ReturnContactMeches");

                    b.Navigation("ReturnHeaders");

                    b.Navigation("ShipmentContactMeches");

                    b.Navigation("ShoppingLists");

                    b.Navigation("Subscriptions");

                    b.Navigation("TelecomNumber")
                        .IsRequired();

                    b.Navigation("WorkEffortContactMechNews");

                    b.Navigation("WorkEffortEventReminders");
                });

            modelBuilder.Entity("Domain.ContactMechPurposeType", b =>
                {
                    b.Navigation("ContactMechTypePurposes");

                    b.Navigation("FacilityContactMechPurposes");

                    b.Navigation("InvoiceContactMeches");

                    b.Navigation("OrderContactMeches");

                    b.Navigation("OrderItemContactMeches");

                    b.Navigation("PartyContactMechPurposes");

                    b.Navigation("ReturnContactMeches");
                });

            modelBuilder.Entity("Domain.ContactMechType", b =>
                {
                    b.Navigation("CommunicationEventTypes");

                    b.Navigation("CommunicationEvents");

                    b.Navigation("ContactLists");

                    b.Navigation("ContactMechTypeAttrs");

                    b.Navigation("ContactMechTypePurposes");

                    b.Navigation("ContactMeches");

                    b.Navigation("InverseParentType");

                    b.Navigation("ValidContactMechRoles");
                });

            modelBuilder.Entity("Domain.Container", b =>
                {
                    b.Navigation("ContainerGeoPoints");

                    b.Navigation("InventoryItems");

                    b.Navigation("InventoryTransferContainerIdToNavigations");

                    b.Navigation("InventoryTransferContainers");
                });

            modelBuilder.Entity("Domain.ContainerType", b =>
                {
                    b.Navigation("Containers");
                });

            modelBuilder.Entity("Domain.Content", b =>
                {
                    b.Navigation("AgreementContents");

                    b.Navigation("CommEventContentAssocs");

                    b.Navigation("ContentApprovals");

                    b.Navigation("ContentAssocContentIdToNavigations");

                    b.Navigation("ContentAssocContents");

                    b.Navigation("ContentAttributes");

                    b.Navigation("ContentKeywords");

                    b.Navigation("ContentMetaData");

                    b.Navigation("ContentPurposes");

                    b.Navigation("ContentRevisions");

                    b.Navigation("ContentRoles");

                    b.Navigation("CustRequestContents");

                    b.Navigation("FacilityContents");

                    b.Navigation("InverseDecoratorContent");

                    b.Navigation("InverseInstanceOfContent");

                    b.Navigation("InverseOwnerContent");

                    b.Navigation("InvoiceContents");

                    b.Navigation("OrderContents");

                    b.Navigation("PartyContents");

                    b.Navigation("PaymentContents");

                    b.Navigation("PortalPages");

                    b.Navigation("ProdConfItemContents");

                    b.Navigation("ProductCategoryContents");

                    b.Navigation("ProductContents");

                    b.Navigation("ProductPromoContents");

                    b.Navigation("SubscriptionResources");

                    b.Navigation("SurveyResponseAnswers");

                    b.Navigation("VehicleContents");

                    b.Navigation("WebPages");

                    b.Navigation("WebSiteContents");

                    b.Navigation("WebSitePathAliases");

                    b.Navigation("WebSitePublishPoint")
                        .IsRequired();

                    b.Navigation("WorkEffortContents");
                });

            modelBuilder.Entity("Domain.ContentAssocPredicate", b =>
                {
                    b.Navigation("ContentAssocs");
                });

            modelBuilder.Entity("Domain.ContentAssocType", b =>
                {
                    b.Navigation("ContentAssocs");
                });

            modelBuilder.Entity("Domain.ContentOperation", b =>
                {
                    b.Navigation("ContentPurposeOperations");
                });

            modelBuilder.Entity("Domain.ContentPurposeType", b =>
                {
                    b.Navigation("ContentPurposeOperations");

                    b.Navigation("ContentPurposes");

                    b.Navigation("DataResourcePurposes");
                });

            modelBuilder.Entity("Domain.ContentRevision", b =>
                {
                    b.Navigation("ContentRevisionItems");
                });

            modelBuilder.Entity("Domain.ContentSearchResult", b =>
                {
                    b.Navigation("ContentSearchConstraints");
                });

            modelBuilder.Entity("Domain.ContentType", b =>
                {
                    b.Navigation("ContentTypeAttrs");

                    b.Navigation("Contents");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.CostComponent", b =>
                {
                    b.Navigation("CostComponentAttributes");
                });

            modelBuilder.Entity("Domain.CostComponentCalc", b =>
                {
                    b.Navigation("CostComponents");

                    b.Navigation("ProductCostComponentCalcs");

                    b.Navigation("WorkEffortCostCalcs");
                });

            modelBuilder.Entity("Domain.CostComponentType", b =>
                {
                    b.Navigation("CostComponentTypeAttrs");

                    b.Navigation("CostComponents");

                    b.Navigation("InverseParentType");

                    b.Navigation("ProductCostComponentCalcs");

                    b.Navigation("WorkEffortCostCalcs");
                });

            modelBuilder.Entity("Domain.CountryCode", b =>
                {
                    b.Navigation("CountryCapital")
                        .IsRequired();

                    b.Navigation("CountryTeleCode")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.CustRequest", b =>
                {
                    b.Navigation("CustRequestAttributes");

                    b.Navigation("CustRequestCommEvents");

                    b.Navigation("CustRequestContents");

                    b.Navigation("CustRequestItems");

                    b.Navigation("CustRequestNotes");

                    b.Navigation("CustRequestParties");

                    b.Navigation("CustRequestStatuses");

                    b.Navigation("CustRequestWorkEfforts");

                    b.Navigation("QuoteItems");

                    b.Navigation("RespondingParties");
                });

            modelBuilder.Entity("Domain.CustRequestCategory", b =>
                {
                    b.Navigation("CustRequests");
                });

            modelBuilder.Entity("Domain.CustRequestItem", b =>
                {
                    b.Navigation("CustRequestItemNotes");

                    b.Navigation("CustRequestItemWorkEfforts");

                    b.Navigation("QuoteItems");

                    b.Navigation("RequirementCustRequests");
                });

            modelBuilder.Entity("Domain.CustRequestResolution", b =>
                {
                    b.Navigation("CustRequestItems");
                });

            modelBuilder.Entity("Domain.CustRequestType", b =>
                {
                    b.Navigation("CustRequestCategories");

                    b.Navigation("CustRequestResolutions");

                    b.Navigation("CustRequestTypeAttrs");

                    b.Navigation("CustRequests");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.CustomMethod", b =>
                {
                    b.Navigation("Contents");

                    b.Navigation("CostComponentCalcs");

                    b.Navigation("FixedAssetDepMethods");

                    b.Navigation("PartyAcctgPreferenceInvoiceSeqCustMeths");

                    b.Navigation("PartyAcctgPreferenceOrderSeqCustMeths");

                    b.Navigation("PartyAcctgPreferenceQuoteSeqCustMeths");

                    b.Navigation("ProductAssocs");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductPromoActions");

                    b.Navigation("ProductPromoConds");

                    b.Navigation("ProductStorePaymentSettings");

                    b.Navigation("ProductStoreShipmentMeths");

                    b.Navigation("ProductStoreTelecomSettings");

                    b.Navigation("UomConversionDateds");

                    b.Navigation("UomConversions");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.CustomMethodType", b =>
                {
                    b.Navigation("CustomMethods");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.CustomScreenType", b =>
                {
                    b.Navigation("CustomScreens");
                });

            modelBuilder.Entity("Domain.CustomTimePeriod", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("GlAccountHistories");

                    b.Navigation("InverseParentPeriod");

                    b.Navigation("SalesForecastHistories");

                    b.Navigation("SalesForecasts");
                });

            modelBuilder.Entity("Domain.DataCategory", b =>
                {
                    b.Navigation("DataResources");

                    b.Navigation("InverseParentCategory");
                });

            modelBuilder.Entity("Domain.DataResource", b =>
                {
                    b.Navigation("AudioDataResource")
                        .IsRequired();

                    b.Navigation("ContentDataResources");

                    b.Navigation("ContentRevisionItemNewDataResources");

                    b.Navigation("ContentRevisionItemOldDataResources");

                    b.Navigation("ContentTemplateDataResources");

                    b.Navigation("DataResourceAttributes");

                    b.Navigation("DataResourceMetaData");

                    b.Navigation("DataResourcePurposes");

                    b.Navigation("DataResourceRoles");

                    b.Navigation("ElectronicText")
                        .IsRequired();

                    b.Navigation("ImageDataResource")
                        .IsRequired();

                    b.Navigation("OtherDataResource")
                        .IsRequired();

                    b.Navigation("ProductFeatureDataResources");

                    b.Navigation("VideoDataResource")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DataResourceType", b =>
                {
                    b.Navigation("DataResourceTypeAttrs");

                    b.Navigation("DataResources");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.DataSource", b =>
                {
                    b.Navigation("ContentAssocs");

                    b.Navigation("ContentMetaData");

                    b.Navigation("Contents");

                    b.Navigation("DataResourceMetaData");

                    b.Navigation("DataResources");

                    b.Navigation("GeoPoints");

                    b.Navigation("Parties");

                    b.Navigation("PartyDataSources");

                    b.Navigation("SalesOpportunities");
                });

            modelBuilder.Entity("Domain.DataSourceType", b =>
                {
                    b.Navigation("DataSources");
                });

            modelBuilder.Entity("Domain.DataTemplateType", b =>
                {
                    b.Navigation("DataResources");
                });

            modelBuilder.Entity("Domain.DeductionType", b =>
                {
                    b.Navigation("Deductions");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.Deliverable", b =>
                {
                    b.Navigation("Requirements");

                    b.Navigation("WorkEffortDeliverableProds");
                });

            modelBuilder.Entity("Domain.DeliverableType", b =>
                {
                    b.Navigation("Deliverables");

                    b.Navigation("QuoteItems");
                });

            modelBuilder.Entity("Domain.Delivery", b =>
                {
                    b.Navigation("ShipmentRouteSegments");
                });

            modelBuilder.Entity("Domain.Document", b =>
                {
                    b.Navigation("DocumentAttributes");

                    b.Navigation("ShippingDocument")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.DocumentType", b =>
                {
                    b.Navigation("DocumentTypeAttrs");

                    b.Navigation("Documents");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.EmplLeaveReasonType", b =>
                {
                    b.Navigation("EmplLeaves");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.EmplLeaveType", b =>
                {
                    b.Navigation("EmplLeaves");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.EmplPosition", b =>
                {
                    b.Navigation("EmplPositionFulfillments");

                    b.Navigation("EmplPositionReportingStructEmplPositionIdManagedByNavigations");

                    b.Navigation("EmplPositionReportingStructEmplPositionIdReportingToNavigations");

                    b.Navigation("EmplPositionResponsibilities");
                });

            modelBuilder.Entity("Domain.EmplPositionClassType", b =>
                {
                    b.Navigation("EmplPositionTypeClasses");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.EmplPositionType", b =>
                {
                    b.Navigation("EmplPositionTypeClasses");

                    b.Navigation("EmplPositionTypeRateNews");

                    b.Navigation("InverseParentType");

                    b.Navigation("RateAmounts");

                    b.Navigation("ValidResponsibilities");
                });

            modelBuilder.Entity("Domain.Employment", b =>
                {
                    b.Navigation("AgreementEmploymentAppls");

                    b.Navigation("PayHistories");
                });

            modelBuilder.Entity("Domain.EmploymentAppSourceType", b =>
                {
                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.EntityGroup", b =>
                {
                    b.Navigation("EntityGroupEntries");

                    b.Navigation("EntitySyncIncludeGroups");
                });

            modelBuilder.Entity("Domain.EntitySync", b =>
                {
                    b.Navigation("EntitySyncHistories");

                    b.Navigation("EntitySyncIncludeGroups");

                    b.Navigation("EntitySyncIncludes");
                });

            modelBuilder.Entity("Domain.Enumeration", b =>
                {
                    b.Navigation("AllocationPlanItems");

                    b.Navigation("CommunicationEvents");

                    b.Navigation("ContentPurposeOperations");

                    b.Navigation("Contents");

                    b.Navigation("CustRequests");

                    b.Navigation("EmailTemplateSettings");

                    b.Navigation("FacilityLocations");

                    b.Navigation("FinAccountTrans");

                    b.Navigation("FinAccountTypes");

                    b.Navigation("FixedAssets");

                    b.Navigation("GeoPoints");

                    b.Navigation("GiftCardFulfillments");

                    b.Navigation("InventoryItemDetails");

                    b.Navigation("JobInterviews");

                    b.Navigation("JobManagerLocks");

                    b.Navigation("JobRequisitionExamTypeEnums");

                    b.Navigation("JobRequisitionJobPostingTypeEnums");

                    b.Navigation("KeywordThesaurus");

                    b.Navigation("OrderHeaders");

                    b.Navigation("OrderItemChangeChangeTypeEnums");

                    b.Navigation("OrderItemChangeReasonEnums");

                    b.Navigation("OrderNotifications");

                    b.Navigation("PartyAcctgPreferenceCogsMethods");

                    b.Navigation("PartyAcctgPreferenceInvoiceSequenceEnums");

                    b.Navigation("PartyAcctgPreferenceOrderSequenceEnums");

                    b.Navigation("PartyAcctgPreferenceQuoteSequenceEnums");

                    b.Navigation("PartyAcctgPreferenceTaxForms");

                    b.Navigation("PaymentGatewayResponsePaymentServiceTypeEnums");

                    b.Navigation("PaymentGatewayResponseTransCodeEnums");

                    b.Navigation("PersonEmploymentStatusEnums");

                    b.Navigation("PersonMaritalStatusEnums");

                    b.Navigation("PersonResidenceStatusEnums");

                    b.Navigation("ProductCategoryLinks");

                    b.Navigation("ProductFacilityReplenishMethodEnums");

                    b.Navigation("ProductFacilityRequirementMethodEnums");

                    b.Navigation("ProductGeos");

                    b.Navigation("ProductKeywordNews");

                    b.Navigation("ProductPriceCondInputParamEnums");

                    b.Navigation("ProductPriceCondOperatorEnums");

                    b.Navigation("ProductPromoActions");

                    b.Navigation("ProductPromoCategories");

                    b.Navigation("ProductPromoCondInputParamEnums");

                    b.Navigation("ProductPromoCondOperatorEnums");

                    b.Navigation("ProductPromoProducts");

                    b.Navigation("ProductRatingTypeEnumNavigations");

                    b.Navigation("ProductRequirementMethodEnums");

                    b.Navigation("ProductStoreDefaultSalesChannelEnums");

                    b.Navigation("ProductStoreEmailSettings");

                    b.Navigation("ProductStoreFinActSettings");

                    b.Navigation("ProductStoreKeywordOvrds");

                    b.Navigation("ProductStorePaymentSettings");

                    b.Navigation("ProductStoreRequirementMethodEnums");

                    b.Navigation("ProductStoreReserveOrderEnums");

                    b.Navigation("ProductStoreStoreCreditAccountEnums");

                    b.Navigation("ProductStoreTelecomSettings");

                    b.Navigation("ProductStoreVendorPayments");

                    b.Navigation("ProductVirtualVariantMethodEnumNavigations");

                    b.Navigation("Quotes");

                    b.Navigation("SalesOpportunities");

                    b.Navigation("TrackingCodeVisits");

                    b.Navigation("UomConversionDateds");

                    b.Navigation("VisualThemeResources");

                    b.Navigation("WorkEffortPartyAssignmentDelegateReasonEnums");

                    b.Navigation("WorkEffortPartyAssignmentExpectationEnums");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.EnumerationType", b =>
                {
                    b.Navigation("Enumerations");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.Facility", b =>
                {
                    b.Navigation("AgreementFacilityAppls");

                    b.Navigation("Containers");

                    b.Navigation("DeliveryDestFacilities");

                    b.Navigation("DeliveryOriginFacilities");

                    b.Navigation("FacilityAttributes");

                    b.Navigation("FacilityCalendars");

                    b.Navigation("FacilityCarrierShipments");

                    b.Navigation("FacilityContactMechPurposes");

                    b.Navigation("FacilityContactMeches");

                    b.Navigation("FacilityContents");

                    b.Navigation("FacilityGroupMembers");

                    b.Navigation("FacilityLocations");

                    b.Navigation("FacilityParties");

                    b.Navigation("FixedAssets");

                    b.Navigation("InventoryItems");

                    b.Navigation("InventoryTransferFacilities");

                    b.Navigation("InventoryTransferFacilityIdToNavigations");

                    b.Navigation("InverseParentFacility");

                    b.Navigation("MrpEvents");

                    b.Navigation("OrderHeaders");

                    b.Navigation("OrderItemShipGroups");

                    b.Navigation("OrderSummaryEntries");

                    b.Navigation("Picklists");

                    b.Navigation("ProdCatalogInvFacilities");

                    b.Navigation("ProductAverageCosts");

                    b.Navigation("ProductFacilities");

                    b.Navigation("ProductFacilityAssocFacilities");

                    b.Navigation("ProductFacilityAssocFacilityIdToNavigations");

                    b.Navigation("ProductStoreFacilities");

                    b.Navigation("ProductStores");

                    b.Navigation("Products");

                    b.Navigation("ReorderGuidelines");

                    b.Navigation("Requirements");

                    b.Navigation("ReturnHeaders");

                    b.Navigation("ShipmentDestinationFacilities");

                    b.Navigation("ShipmentOriginFacilities");

                    b.Navigation("ShipmentRouteSegmentDestFacilities");

                    b.Navigation("ShipmentRouteSegmentOriginFacilities");

                    b.Navigation("WorkEffortPartyAssignments");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.FacilityAssocType", b =>
                {
                    b.Navigation("ProductFacilityAssocs");
                });

            modelBuilder.Entity("Domain.FacilityCalendarType", b =>
                {
                    b.Navigation("FacilityCalendars");
                });

            modelBuilder.Entity("Domain.FacilityGroup", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("FacilityGroupMembers");

                    b.Navigation("FacilityGroupRoles");

                    b.Navigation("FacilityGroupRollupFacilityGroups");

                    b.Navigation("FacilityGroupRollupParentFacilityGroups");

                    b.Navigation("InversePrimaryParentGroup");
                });

            modelBuilder.Entity("Domain.FacilityGroupType", b =>
                {
                    b.Navigation("FacilityGroups");
                });

            modelBuilder.Entity("Domain.FacilityLocation", b =>
                {
                    b.Navigation("FacilityLocationGeoPoints");

                    b.Navigation("ProductFacilityLocations");
                });

            modelBuilder.Entity("Domain.FacilityType", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("FacilityTypeAttrs");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.FinAccount", b =>
                {
                    b.Navigation("FinAccountAttributes");

                    b.Navigation("FinAccountAuths");

                    b.Navigation("FinAccountRoles");

                    b.Navigation("FinAccountStatuses");

                    b.Navigation("FinAccountTrans");

                    b.Navigation("OrderPaymentPreferences");

                    b.Navigation("PaymentMethods");

                    b.Navigation("ReturnHeaders");
                });

            modelBuilder.Entity("Domain.FinAccountTran", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("FinAccountTransAttributes");

                    b.Navigation("Payments");

                    b.Navigation("ReturnItemResponses");
                });

            modelBuilder.Entity("Domain.FinAccountTransType", b =>
                {
                    b.Navigation("FinAccountTrans");

                    b.Navigation("FinAccountTransTypeAttrs");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.FinAccountType", b =>
                {
                    b.Navigation("FinAccountTypeAttrs");

                    b.Navigation("FinAccountTypeGlAccounts");

                    b.Navigation("FinAccounts");

                    b.Navigation("InverseParentType");

                    b.Navigation("ProductStoreFinActSettings");
                });

            modelBuilder.Entity("Domain.FixedAsset", b =>
                {
                    b.Navigation("AccommodationMaps");

                    b.Navigation("AccommodationSpots");

                    b.Navigation("AcctgTrans");

                    b.Navigation("CostComponents");

                    b.Navigation("Deliveries");

                    b.Navigation("FixedAssetAttributes");

                    b.Navigation("FixedAssetDepMethods");

                    b.Navigation("FixedAssetGeoPoints");

                    b.Navigation("FixedAssetIdents");

                    b.Navigation("FixedAssetMaintOrders");

                    b.Navigation("FixedAssetMaints");

                    b.Navigation("FixedAssetProducts");

                    b.Navigation("FixedAssetRegistrations");

                    b.Navigation("FixedAssetStdCosts");

                    b.Navigation("InventoryItems");

                    b.Navigation("InverseParentFixedAsset");

                    b.Navigation("PartyFixedAssetAssignments");

                    b.Navigation("Requirements");

                    b.Navigation("WorkEffortFixedAssetAssigns");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.FixedAssetIdentType", b =>
                {
                    b.Navigation("FixedAssetIdents");
                });

            modelBuilder.Entity("Domain.FixedAssetMaint", b =>
                {
                    b.Navigation("FixedAssetMeters");

                    b.Navigation("InventoryItemDetails");

                    b.Navigation("ItemIssuances");
                });

            modelBuilder.Entity("Domain.FixedAssetProductType", b =>
                {
                    b.Navigation("FixedAssetProducts");
                });

            modelBuilder.Entity("Domain.FixedAssetStdCostType", b =>
                {
                    b.Navigation("FixedAssetStdCosts");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.FixedAssetType", b =>
                {
                    b.Navigation("FixedAssetTypeAttrs");

                    b.Navigation("FixedAssets");

                    b.Navigation("InverseParentType");

                    b.Navigation("WorkEffortFixedAssetStds");
                });

            modelBuilder.Entity("Domain.Geo", b =>
                {
                    b.Navigation("AgreementGeographicalApplics");

                    b.Navigation("CostComponents");

                    b.Navigation("CountryAddressFormat")
                        .IsRequired();

                    b.Navigation("GeoAssocGeoIdToNavigations");

                    b.Navigation("GeoAssocGeos");

                    b.Navigation("InvoiceItems");

                    b.Navigation("OrderAdjustmentPrimaryGeos");

                    b.Navigation("OrderAdjustmentSecondaryGeos");

                    b.Navigation("PaymentApplications");

                    b.Navigation("PostalAddressBoundaries");

                    b.Navigation("PostalAddressCityGeos");

                    b.Navigation("PostalAddressCountryGeos");

                    b.Navigation("PostalAddressCountyGeos");

                    b.Navigation("PostalAddressMunicipalityGeos");

                    b.Navigation("PostalAddressPostalCodeGeos");

                    b.Navigation("PostalAddressStateProvinceGeos");

                    b.Navigation("ProductGeos");

                    b.Navigation("ProductPrices");

                    b.Navigation("Products");

                    b.Navigation("QuoteAdjustmentPrimaryGeos");

                    b.Navigation("QuoteAdjustmentSecondaryGeos");

                    b.Navigation("ReorderGuidelines");

                    b.Navigation("ReturnAdjustmentPrimaryGeos");

                    b.Navigation("ReturnAdjustmentSecondaryGeos");

                    b.Navigation("SegmentGroupGeos");

                    b.Navigation("ShipmentCostEstimateGeoIdFromNavigations");

                    b.Navigation("ShipmentCostEstimateGeoIdToNavigations");

                    b.Navigation("ShipmentTimeEstimateGeoIdFromNavigations");

                    b.Navigation("ShipmentTimeEstimateGeoIdToNavigations");

                    b.Navigation("SurveyQuestions");

                    b.Navigation("TaxAuthorities");
                });

            modelBuilder.Entity("Domain.GeoAssocType", b =>
                {
                    b.Navigation("CountryAddressFormats");

                    b.Navigation("GeoAssocs");
                });

            modelBuilder.Entity("Domain.GeoPoint", b =>
                {
                    b.Navigation("ContainerGeoPoints");

                    b.Navigation("Facilities");

                    b.Navigation("FacilityLocationGeoPoints");

                    b.Navigation("FacilityLocations");

                    b.Navigation("FixedAssetGeoPoints");

                    b.Navigation("PartyGeoPoints");

                    b.Navigation("PostalAddresses");
                });

            modelBuilder.Entity("Domain.GeoType", b =>
                {
                    b.Navigation("Geos");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.GlAccount", b =>
                {
                    b.Navigation("AcctgTransEntries");

                    b.Navigation("FinAccountTypeGlAccounts");

                    b.Navigation("FinAccounts");

                    b.Navigation("FixedAssetTypeGlAccountAccDepGlAccounts");

                    b.Navigation("FixedAssetTypeGlAccountAssetGlAccounts");

                    b.Navigation("FixedAssetTypeGlAccountDepGlAccounts");

                    b.Navigation("FixedAssetTypeGlAccountLossGlAccounts");

                    b.Navigation("FixedAssetTypeGlAccountProfitGlAccounts");

                    b.Navigation("GlAccountCategoryMembers");

                    b.Navigation("GlAccountGroupMembers");

                    b.Navigation("GlAccountHistories");

                    b.Navigation("GlAccountOrganizations");

                    b.Navigation("GlAccountRoles");

                    b.Navigation("GlAccountTypeDefaults");

                    b.Navigation("GlBudgetXrefs");

                    b.Navigation("GlReconciliations");

                    b.Navigation("InverseParentGlAccount");

                    b.Navigation("InvoiceItemTypeGlAccounts");

                    b.Navigation("InvoiceItemTypes");

                    b.Navigation("InvoiceItems");

                    b.Navigation("OrderAdjustments");

                    b.Navigation("OrderItems");

                    b.Navigation("PartyGlAccounts");

                    b.Navigation("PaymentApplications");

                    b.Navigation("PaymentMethodTypeGlAccounts");

                    b.Navigation("PaymentMethodTypes");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Payments");

                    b.Navigation("ProductCategoryGlAccounts");

                    b.Navigation("ProductGlAccounts");

                    b.Navigation("QuoteAdjustments");

                    b.Navigation("ReturnAdjustments");

                    b.Navigation("TaxAuthorityGlAccounts");

                    b.Navigation("VarianceReasonGlAccounts");
                });

            modelBuilder.Entity("Domain.GlAccountCategory", b =>
                {
                    b.Navigation("GlAccountCategoryMembers");
                });

            modelBuilder.Entity("Domain.GlAccountCategoryType", b =>
                {
                    b.Navigation("GlAccountCategories");
                });

            modelBuilder.Entity("Domain.GlAccountClass", b =>
                {
                    b.Navigation("GlAccounts");

                    b.Navigation("InverseParentClass");
                });

            modelBuilder.Entity("Domain.GlAccountGroup", b =>
                {
                    b.Navigation("GlAccountGroupMembers");
                });

            modelBuilder.Entity("Domain.GlAccountGroupType", b =>
                {
                    b.Navigation("GlAccountGroupMembers");

                    b.Navigation("GlAccountGroups");
                });

            modelBuilder.Entity("Domain.GlAccountOrganization", b =>
                {
                    b.Navigation("AcctgTransEntries");
                });

            modelBuilder.Entity("Domain.GlAccountType", b =>
                {
                    b.Navigation("AcctgTransEntries");

                    b.Navigation("CostComponentCalcCostGlAccountTypes");

                    b.Navigation("CostComponentCalcOffsettingGlAccountTypes");

                    b.Navigation("GlAccountTypeDefaults");

                    b.Navigation("GlAccounts");

                    b.Navigation("InverseParentType");

                    b.Navigation("PartyGlAccounts");

                    b.Navigation("PaymentGlAccountTypeMaps");

                    b.Navigation("ProductCategoryGlAccounts");

                    b.Navigation("ProductGlAccounts");
                });

            modelBuilder.Entity("Domain.GlFiscalType", b =>
                {
                    b.Navigation("AcctgTrans");
                });

            modelBuilder.Entity("Domain.GlJournal", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("PartyAcctgPreferences");
                });

            modelBuilder.Entity("Domain.GlReconciliation", b =>
                {
                    b.Navigation("FinAccountTrans");

                    b.Navigation("GlReconciliationEntries");
                });

            modelBuilder.Entity("Domain.GlResourceType", b =>
                {
                    b.Navigation("GlAccounts");
                });

            modelBuilder.Entity("Domain.GlXbrlClass", b =>
                {
                    b.Navigation("GlAccounts");

                    b.Navigation("InverseParentGlXbrlClass");
                });

            modelBuilder.Entity("Domain.GoodIdentificationType", b =>
                {
                    b.Navigation("GoodIdentifications");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.InventoryItem", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("AcctgTransEntries");

                    b.Navigation("InventoryItemAttributes");

                    b.Navigation("InventoryItemDetails");

                    b.Navigation("InventoryItemLabelAppls");

                    b.Navigation("InventoryItemStatuses");

                    b.Navigation("InventoryItemVariances");

                    b.Navigation("InventoryTransfers");

                    b.Navigation("InvoiceItems");

                    b.Navigation("ItemIssuances");

                    b.Navigation("OrderItemShipGrpInvRes");

                    b.Navigation("OrderItems");

                    b.Navigation("PicklistItems");

                    b.Navigation("ShipmentReceipts");

                    b.Navigation("Subscriptions");

                    b.Navigation("WorkEffortInventoryAssigns");

                    b.Navigation("WorkEffortInventoryProduceds");
                });

            modelBuilder.Entity("Domain.InventoryItemLabel", b =>
                {
                    b.Navigation("InventoryItemLabelAppls");
                });

            modelBuilder.Entity("Domain.InventoryItemLabelType", b =>
                {
                    b.Navigation("InventoryItemLabelAppls");

                    b.Navigation("InventoryItemLabels");

                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.InventoryItemType", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("InventoryItemTypeAttrs");

                    b.Navigation("InventoryItems");

                    b.Navigation("InverseParentType");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.InventoryItemVariance", b =>
                {
                    b.Navigation("AcctgTrans");
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("InvoiceAttributes");

                    b.Navigation("InvoiceContactMeches");

                    b.Navigation("InvoiceContents");

                    b.Navigation("InvoiceItems");

                    b.Navigation("InvoiceNotes");

                    b.Navigation("InvoiceRoles");

                    b.Navigation("InvoiceStatuses");

                    b.Navigation("InvoiceTerms");

                    b.Navigation("PaymentApplications");
                });

            modelBuilder.Entity("Domain.InvoiceContentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("InvoiceContents");
                });

            modelBuilder.Entity("Domain.InvoiceItem", b =>
                {
                    b.Navigation("InverseParentInvoiceI");

                    b.Navigation("InvoiceItemAssocInvoiceINavigations");

                    b.Navigation("InvoiceItemAssocInvoiceIs");

                    b.Navigation("InvoiceItemAttributes");

                    b.Navigation("OrderAdjustmentBillings");

                    b.Navigation("OrderItemBillings");

                    b.Navigation("ReturnItemBillings");

                    b.Navigation("ShipmentItemBillings");

                    b.Navigation("TimeEntries");

                    b.Navigation("WorkEffortBillings");
                });

            modelBuilder.Entity("Domain.InvoiceItemAssocType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("InvoiceItemAssocs");
                });

            modelBuilder.Entity("Domain.InvoiceItemType", b =>
                {
                    b.Navigation("AgreementTerms");

                    b.Navigation("InverseParentType");

                    b.Navigation("InvoiceItemTypeAttrs");

                    b.Navigation("InvoiceItemTypeGlAccounts");

                    b.Navigation("InvoiceItemTypeMaps");

                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Domain.InvoiceTerm", b =>
                {
                    b.Navigation("InvoiceTermAttributes");
                });

            modelBuilder.Entity("Domain.InvoiceType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("InvoiceItemTypeMaps");

                    b.Navigation("InvoiceTypeAttrs");

                    b.Navigation("Invoices");

                    b.Navigation("PartyPrefDocTypeTpls");
                });

            modelBuilder.Entity("Domain.ItemIssuance", b =>
                {
                    b.Navigation("InventoryItemDetails");

                    b.Navigation("InventoryTransfers");

                    b.Navigation("ItemIssuanceRoles");

                    b.Navigation("OrderItemBillings");
                });

            modelBuilder.Entity("Domain.JobInterviewType", b =>
                {
                    b.Navigation("JobInterviews");
                });

            modelBuilder.Entity("Domain.JobRequisition", b =>
                {
                    b.Navigation("EmploymentApps");

                    b.Navigation("JobInterviews");
                });

            modelBuilder.Entity("Domain.JobSandbox", b =>
                {
                    b.Navigation("ProductGroupOrders");
                });

            modelBuilder.Entity("Domain.Lot", b =>
                {
                    b.Navigation("InventoryItems");
                });

            modelBuilder.Entity("Domain.MarketingCampaign", b =>
                {
                    b.Navigation("ContactLists");

                    b.Navigation("InverseParentCampaign");

                    b.Navigation("MarketingCampaignNotes");

                    b.Navigation("MarketingCampaignPrices");

                    b.Navigation("MarketingCampaignPromos");

                    b.Navigation("MarketingCampaignRoles");

                    b.Navigation("SalesOpportunities");

                    b.Navigation("TrackingCodes");
                });

            modelBuilder.Entity("Domain.MetaDataPredicate", b =>
                {
                    b.Navigation("ContentMetaData");

                    b.Navigation("DataResourceMetaData");
                });

            modelBuilder.Entity("Domain.MimeType", b =>
                {
                    b.Navigation("CommunicationEvents");

                    b.Navigation("FileExtensions");

                    b.Navigation("MimeTypeHtmlTemplate")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.MrpEventType", b =>
                {
                    b.Navigation("MrpEvents");
                });

            modelBuilder.Entity("Domain.NeedType", b =>
                {
                    b.Navigation("PartyNeeds");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.NoteDatum", b =>
                {
                    b.Navigation("CustRequestItemNotes");

                    b.Navigation("CustRequestNotes");

                    b.Navigation("InvoiceNotes");

                    b.Navigation("MarketingCampaignNotes");

                    b.Navigation("OrderHeaderNotes");

                    b.Navigation("PartyNotes");

                    b.Navigation("QuoteNotes");

                    b.Navigation("WorkEffortNotes");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.OrderAdjustment", b =>
                {
                    b.Navigation("OrderAdjustmentAttributes");

                    b.Navigation("OrderAdjustmentBillings");

                    b.Navigation("ReturnAdjustments");
                });

            modelBuilder.Entity("Domain.OrderAdjustmentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("OrderAdjustmentTypeAttrs");

                    b.Navigation("OrderAdjustments");

                    b.Navigation("ProductPromoActions");

                    b.Navigation("QuoteAdjustments");
                });

            modelBuilder.Entity("Domain.OrderBlacklistType", b =>
                {
                    b.Navigation("OrderBlacklists");
                });

            modelBuilder.Entity("Domain.OrderContentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("OrderContents");
                });

            modelBuilder.Entity("Domain.OrderDenylistType", b =>
                {
                    b.Navigation("OrderDenylists");
                });

            modelBuilder.Entity("Domain.OrderHeader", b =>
                {
                    b.Navigation("AllocationPlanItems");

                    b.Navigation("CommunicationEventOrders");

                    b.Navigation("FixedAssetMaintOrders");

                    b.Navigation("FixedAssetMaints");

                    b.Navigation("FixedAssets");

                    b.Navigation("GiftCardFulfillments");

                    b.Navigation("OrderAdjustments");

                    b.Navigation("OrderAttributes");

                    b.Navigation("OrderContactMeches");

                    b.Navigation("OrderContents");

                    b.Navigation("OrderDeliverySchedules");

                    b.Navigation("OrderHeaderNotes");

                    b.Navigation("OrderHeaderWorkEfforts");

                    b.Navigation("OrderItemAssocOrders");

                    b.Navigation("OrderItemAssocToOrders");

                    b.Navigation("OrderItemBillings");

                    b.Navigation("OrderItemGroups");

                    b.Navigation("OrderItemRoles");

                    b.Navigation("OrderItemShipGroupAssocs");

                    b.Navigation("OrderItemShipGroups");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderNotifications");

                    b.Navigation("OrderPaymentPreferences");

                    b.Navigation("OrderProductPromoCodes");

                    b.Navigation("OrderRequirementCommitments");

                    b.Navigation("OrderRoles");

                    b.Navigation("OrderShipments");

                    b.Navigation("OrderStatuses");

                    b.Navigation("OrderTerms");

                    b.Navigation("ProductOrderItemEngagements");

                    b.Navigation("ProductOrderItemOrders");

                    b.Navigation("ProductPromoUses");

                    b.Navigation("ReturnItemResponses");

                    b.Navigation("ReturnItems");

                    b.Navigation("Shipments");

                    b.Navigation("TrackingCodeOrderReturns");

                    b.Navigation("TrackingCodeOrders");

                    b.Navigation("WorkOrderItemFulfillments");
                });

            modelBuilder.Entity("Domain.OrderItem", b =>
                {
                    b.Navigation("AllocationPlanItems");

                    b.Navigation("FinAccountTrans");

                    b.Navigation("FixedAssets");

                    b.Navigation("GiftCardFulfillments");

                    b.Navigation("ItemIssuances");

                    b.Navigation("OrderItemAttributes");

                    b.Navigation("OrderItemBillings");

                    b.Navigation("OrderItemChanges");

                    b.Navigation("OrderItemContactMeches");

                    b.Navigation("OrderItemGroupOrders");

                    b.Navigation("OrderItemPriceInfos");

                    b.Navigation("OrderItemRoles");

                    b.Navigation("OrderItemShipGroupAssocs");

                    b.Navigation("OrderItemShipGrpInvRes");

                    b.Navigation("OrderRequirementCommitments");

                    b.Navigation("PicklistItems");

                    b.Navigation("ProductOrderItemEngagementIs");

                    b.Navigation("ProductOrderItemOrderIs");

                    b.Navigation("ReturnItems");

                    b.Navigation("ShipmentReceipts");

                    b.Navigation("Subscriptions");

                    b.Navigation("WorkOrderItemFulfillments");
                });

            modelBuilder.Entity("Domain.OrderItemAssocType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("OrderItemAssocs");
                });

            modelBuilder.Entity("Domain.OrderItemGroup", b =>
                {
                    b.Navigation("InverseOrderItemGroupNavigation");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Domain.OrderItemShipGroup", b =>
                {
                    b.Navigation("OrderItemShipGroupAssocs");

                    b.Navigation("PicklistBins");

                    b.Navigation("PicklistItems");
                });

            modelBuilder.Entity("Domain.OrderItemType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("OrderItemTypeAttrs");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Domain.OrderPaymentPreference", b =>
                {
                    b.Navigation("PaymentGatewayResponses");

                    b.Navigation("Payments");

                    b.Navigation("ReturnItemResponses");
                });

            modelBuilder.Entity("Domain.OrderTerm", b =>
                {
                    b.Navigation("OrderTermAttributes");
                });

            modelBuilder.Entity("Domain.OrderType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("OrderHeaders");

                    b.Navigation("OrderTypeAttrs");

                    b.Navigation("PartyPrefDocTypeTpls");
                });

            modelBuilder.Entity("Domain.Party", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("AcctgTransEntries");

                    b.Navigation("Affiliate")
                        .IsRequired();

                    b.Navigation("AgreementPartyApplics");

                    b.Navigation("AgreementRoles");

                    b.Navigation("AppUserLogins");

                    b.Navigation("BillingAccountRoles");

                    b.Navigation("BudgetReviews");

                    b.Navigation("BudgetRoles");

                    b.Navigation("CarrierShipmentBoxTypes");

                    b.Navigation("CarrierShipmentMethods");

                    b.Navigation("CommunicationEventPartyIdFromNavigations");

                    b.Navigation("CommunicationEventPartyIdToNavigations");

                    b.Navigation("CommunicationEventRoles");

                    b.Navigation("ContactListCommStatuses");

                    b.Navigation("ContactListParties");

                    b.Navigation("ContactLists");

                    b.Navigation("ContentApprovals");

                    b.Navigation("ContentRevisions");

                    b.Navigation("CostComponents");

                    b.Navigation("CustRequestParties");

                    b.Navigation("CustRequestTypes");

                    b.Navigation("CustRequests");

                    b.Navigation("CustomTimePeriods");

                    b.Navigation("EmplLeaveApproverParties");

                    b.Navigation("EmplLeaveParties");

                    b.Navigation("EmplPositionFulfillments");

                    b.Navigation("EmplPositions");

                    b.Navigation("EmploymentApps");

                    b.Navigation("EmploymentPartyIdFromNavigations");

                    b.Navigation("EmploymentPartyIdToNavigations");

                    b.Navigation("Facilities");

                    b.Navigation("FacilityCarrierShipments");

                    b.Navigation("FacilityParties");

                    b.Navigation("FinAccountOrganizationParties");

                    b.Navigation("FinAccountOwnerParties");

                    b.Navigation("FinAccountTranParties");

                    b.Navigation("FinAccountTranPerformedByParties");

                    b.Navigation("FinAccountTypeGlAccounts");

                    b.Navigation("FixedAssetRegistrations");

                    b.Navigation("FixedAssetTypeGlAccounts");

                    b.Navigation("FixedAssets");

                    b.Navigation("GiftCardFulfillments");

                    b.Navigation("GlAccountHistories");

                    b.Navigation("GlAccountOrganizations");

                    b.Navigation("GlAccountTypeDefaults");

                    b.Navigation("GlJournals");

                    b.Navigation("GlReconciliations");

                    b.Navigation("InventoryItemOwnerParties");

                    b.Navigation("InventoryItemParties");

                    b.Navigation("InvoiceItemOverrideOrgParties");

                    b.Navigation("InvoiceItemTaxAuthParties");

                    b.Navigation("InvoiceItemTypeGlAccounts");

                    b.Navigation("InvoiceParties");

                    b.Navigation("InvoicePartyIdFromNavigations");

                    b.Navigation("InvoiceRoles");

                    b.Navigation("ItemIssuanceRoles");

                    b.Navigation("JobInterviewJobIntervieweeParties");

                    b.Navigation("JobInterviewJobInterviewerParties");

                    b.Navigation("NoteData");

                    b.Navigation("OrderItemRoles");

                    b.Navigation("OrderItemShipGroupCarrierParties");

                    b.Navigation("OrderItemShipGroupSupplierParties");

                    b.Navigation("OrderItemShipGroupVendorParties");

                    b.Navigation("OrderRoles");

                    b.Navigation("PartyAcctgPreference")
                        .IsRequired();

                    b.Navigation("PartyAttributes");

                    b.Navigation("PartyBenefitPartyIdFromNavigations");

                    b.Navigation("PartyBenefitPartyIdToNavigations");

                    b.Navigation("PartyCarrierAccountCarrierParties");

                    b.Navigation("PartyCarrierAccountParties");

                    b.Navigation("PartyClassifications");

                    b.Navigation("PartyContactMechPurposes");

                    b.Navigation("PartyContactMeches");

                    b.Navigation("PartyContents");

                    b.Navigation("PartyDataSources");

                    b.Navigation("PartyGeoPoints");

                    b.Navigation("PartyGlAccountOrganizationParties");

                    b.Navigation("PartyGlAccountParties");

                    b.Navigation("PartyGroup")
                        .IsRequired();

                    b.Navigation("PartyIcsAvsOverride")
                        .IsRequired();

                    b.Navigation("PartyIdentifications");

                    b.Navigation("PartyInvitationGroupAssocs");

                    b.Navigation("PartyInvitations");

                    b.Navigation("PartyNameHistories");

                    b.Navigation("PartyNeeds");

                    b.Navigation("PartyNotes");

                    b.Navigation("PartyPrefDocTypeTpls");

                    b.Navigation("PartyProfileDefaults");

                    b.Navigation("PartyQuals");

                    b.Navigation("PartyRateNews");

                    b.Navigation("PartyResumes");

                    b.Navigation("PartyRoles");

                    b.Navigation("PartySkills");

                    b.Navigation("PartyStatuses");

                    b.Navigation("PartyTaxAuthInfos");

                    b.Navigation("PaymentGlAccountTypeMaps");

                    b.Navigation("PaymentMethodTypeGlAccounts");

                    b.Navigation("PaymentMethods");

                    b.Navigation("PaymentPartyIdFromNavigations");

                    b.Navigation("PaymentPartyIdToNavigations");

                    b.Navigation("PayrollPreferences");

                    b.Navigation("PerfReviewEmployeeParties");

                    b.Navigation("PerfReviewItems");

                    b.Navigation("PerfReviewManagerParties");

                    b.Navigation("PerformanceNotes");

                    b.Navigation("Person")
                        .IsRequired();

                    b.Navigation("PersonTrainings");

                    b.Navigation("ProductAverageCosts");

                    b.Navigation("ProductCategoryGlAccounts");

                    b.Navigation("ProductGlAccounts");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductPromoCodeParties");

                    b.Navigation("ProductPromoUses");

                    b.Navigation("ProductPromos");

                    b.Navigation("ProductStoreVendorPayments");

                    b.Navigation("ProductStoreVendorShipmentCarrierParties");

                    b.Navigation("ProductStoreVendorShipmentVendorParties");

                    b.Navigation("ProductStores");

                    b.Navigation("QuoteRoles");

                    b.Navigation("Quotes");

                    b.Navigation("RateAmounts");

                    b.Navigation("ReorderGuidelines");

                    b.Navigation("RequirementRoles");

                    b.Navigation("RespondingParties");

                    b.Navigation("ReturnHeaderFromParties");

                    b.Navigation("ReturnHeaderToParties");

                    b.Navigation("SalesForecastHistoryInternalParties");

                    b.Navigation("SalesForecastHistoryOrganizationParties");

                    b.Navigation("SalesForecastInternalParties");

                    b.Navigation("SalesForecastOrganizationParties");

                    b.Navigation("SalesOpportunityRoles");

                    b.Navigation("ShipmentCostEstimates");

                    b.Navigation("ShipmentPartyIdFromNavigations");

                    b.Navigation("ShipmentPartyIdToNavigations");

                    b.Navigation("ShipmentReceiptRoles");

                    b.Navigation("ShipmentRouteSegments");

                    b.Navigation("ShoppingLists");

                    b.Navigation("SubscriptionOriginatedFromParties");

                    b.Navigation("SubscriptionParties");

                    b.Navigation("SupplierProductFeatures");

                    b.Navigation("SupplierProducts");

                    b.Navigation("TaxAuthorities");

                    b.Navigation("TaxAuthorityGlAccounts");

                    b.Navigation("TimeEntries");

                    b.Navigation("TimesheetClientParties");

                    b.Navigation("TimesheetParties");

                    b.Navigation("TimesheetRoles");

                    b.Navigation("UserLoginHistories");

                    b.Navigation("UserLogins");

                    b.Navigation("VarianceReasonGlAccounts");

                    b.Navigation("Vehicles");

                    b.Navigation("Vendor")
                        .IsRequired();

                    b.Navigation("VendorProducts");

                    b.Navigation("WebUserPreferences");

                    b.Navigation("WorkEffortEventReminders");
                });

            modelBuilder.Entity("Domain.PartyAcctgPreference", b =>
                {
                    b.Navigation("PartyPrefDocTypeTpls");
                });

            modelBuilder.Entity("Domain.PartyClassificationGroup", b =>
                {
                    b.Navigation("InverseParentGroup");

                    b.Navigation("MarketInterests");

                    b.Navigation("PartyClassifications");

                    b.Navigation("SegmentGroupClassifications");
                });

            modelBuilder.Entity("Domain.PartyClassificationType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PartyClassificationGroups");
                });

            modelBuilder.Entity("Domain.PartyContentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PartyContents");
                });

            modelBuilder.Entity("Domain.PartyGroup", b =>
                {
                    b.Navigation("Affiliate")
                        .IsRequired();

                    b.Navigation("PartyInvitationGroupAssocs");
                });

            modelBuilder.Entity("Domain.PartyIdentificationType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PartyIdentifications");
                });

            modelBuilder.Entity("Domain.PartyInvitation", b =>
                {
                    b.Navigation("PartyInvitationGroupAssocs");

                    b.Navigation("PartyInvitationRoleAssocs");
                });

            modelBuilder.Entity("Domain.PartyQualType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PartyQuals");
                });

            modelBuilder.Entity("Domain.PartyRelationshipType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PartyRelationships");
                });

            modelBuilder.Entity("Domain.PartyRole", b =>
                {
                    b.Navigation("AgreementPartyRoleNavigations");

                    b.Navigation("AgreementPartyRoles");

                    b.Navigation("AgreementRoles");

                    b.Navigation("BillingAccountRoles");

                    b.Navigation("BudgetRoles");

                    b.Navigation("CarrierShipmentMethods");

                    b.Navigation("CommunicationEventRoles");

                    b.Navigation("ContentRoles");

                    b.Navigation("CustRequestParties");

                    b.Navigation("DataResourceRoles");

                    b.Navigation("EmploymentPartyRoleNavigations");

                    b.Navigation("EmploymentPartyRoles");

                    b.Navigation("FacilityGroupRoles");

                    b.Navigation("FacilityParties");

                    b.Navigation("FinAccountRoles");

                    b.Navigation("GlAccountRoles");

                    b.Navigation("InvoiceRoles");

                    b.Navigation("ItemIssuanceRoles");

                    b.Navigation("MarketingCampaignRoles");

                    b.Navigation("OrderItemRoles");

                    b.Navigation("OrderItemShipGroups");

                    b.Navigation("OrderRoles");

                    b.Navigation("PartyBenefitPartyRoleNavigations");

                    b.Navigation("PartyBenefitPartyRoles");

                    b.Navigation("PartyContactMeches");

                    b.Navigation("PartyFixedAssetAssignments");

                    b.Navigation("PartyGlAccounts");

                    b.Navigation("PartyRelationshipPartyRoleNavigations");

                    b.Navigation("PartyRelationshipPartyRoles");

                    b.Navigation("PayrollPreferences");

                    b.Navigation("PerfReviewItems");

                    b.Navigation("PerfReviews");

                    b.Navigation("PerformanceNotes");

                    b.Navigation("PicklistRoles");

                    b.Navigation("ProdCatalogRoles");

                    b.Navigation("ProductCategoryRoles");

                    b.Navigation("ProductRoles");

                    b.Navigation("ProductStoreGroupRoles");

                    b.Navigation("ProductStoreRoles");

                    b.Navigation("QuoteRoles");

                    b.Navigation("RequirementRoles");

                    b.Navigation("SalesOpportunityRoles");

                    b.Navigation("SegmentGroupRoles");

                    b.Navigation("ShipmentReceiptRoles");

                    b.Navigation("TimesheetRoles");

                    b.Navigation("WebSiteRoles");

                    b.Navigation("WorkEffortPartyAssignments");
                });

            modelBuilder.Entity("Domain.PartyType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("Parties");

                    b.Navigation("PartyNeeds");

                    b.Navigation("PartyTypeAttrs");
                });

            modelBuilder.Entity("Domain.PayGrade", b =>
                {
                    b.Navigation("PayHistories");

                    b.Navigation("SalaryStepNews");
                });

            modelBuilder.Entity("Domain.Payment", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("Deductions");

                    b.Navigation("FinAccountTrans");

                    b.Navigation("PaymentApplicationPayments");

                    b.Navigation("PaymentApplicationToPayments");

                    b.Navigation("PaymentAttributes");

                    b.Navigation("PaymentBudgetAllocations");

                    b.Navigation("PaymentContents");

                    b.Navigation("PaymentGroupMembers");

                    b.Navigation("PerfReviews");

                    b.Navigation("ReturnItemResponses");
                });

            modelBuilder.Entity("Domain.PaymentContentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PaymentContents");
                });

            modelBuilder.Entity("Domain.PaymentGatewayConfig", b =>
                {
                    b.Navigation("PaymentGatewayAuthorizeNet")
                        .IsRequired();

                    b.Navigation("PaymentGatewayClearCommerce")
                        .IsRequired();

                    b.Navigation("PaymentGatewayCyberSource")
                        .IsRequired();

                    b.Navigation("PaymentGatewayEway")
                        .IsRequired();

                    b.Navigation("PaymentGatewayOrbital")
                        .IsRequired();

                    b.Navigation("PaymentGatewayPayPal")
                        .IsRequired();

                    b.Navigation("PaymentGatewayPayflowPro")
                        .IsRequired();

                    b.Navigation("PaymentGatewaySagePay")
                        .IsRequired();

                    b.Navigation("PaymentGatewaySecurePay")
                        .IsRequired();

                    b.Navigation("PaymentGatewayWorldPay")
                        .IsRequired();

                    b.Navigation("ProductStorePaymentSettings");
                });

            modelBuilder.Entity("Domain.PaymentGatewayConfigType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PaymentGatewayConfigs");
                });

            modelBuilder.Entity("Domain.PaymentGatewayResponse", b =>
                {
                    b.Navigation("PaymentGatewayRespMsgs");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.PaymentGroup", b =>
                {
                    b.Navigation("PaymentGroupMembers");
                });

            modelBuilder.Entity("Domain.PaymentGroupType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PaymentGroups");
                });

            modelBuilder.Entity("Domain.PaymentMethod", b =>
                {
                    b.Navigation("CheckAccount")
                        .IsRequired();

                    b.Navigation("CreditCard")
                        .IsRequired();

                    b.Navigation("EftAccount")
                        .IsRequired();

                    b.Navigation("FinAccounts");

                    b.Navigation("GiftCard")
                        .IsRequired();

                    b.Navigation("OrderPaymentPreferences");

                    b.Navigation("PartyAcctgPreferences");

                    b.Navigation("PayPalPaymentMethod")
                        .IsRequired();

                    b.Navigation("PaymentGatewayResponses");

                    b.Navigation("Payments");

                    b.Navigation("ReturnHeaders");

                    b.Navigation("ShoppingLists");
                });

            modelBuilder.Entity("Domain.PaymentMethodType", b =>
                {
                    b.Navigation("OrderPaymentPreferences");

                    b.Navigation("PaymentGatewayResponses");

                    b.Navigation("PaymentMethodTypeGlAccounts");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Payments");

                    b.Navigation("ProductPaymentMethodTypes");

                    b.Navigation("ProductStorePaymentSettings");

                    b.Navigation("ProductStoreVendorPayments");
                });

            modelBuilder.Entity("Domain.PaymentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PaymentGlAccountTypeMaps");

                    b.Navigation("PaymentTypeAttrs");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.PerfRatingType", b =>
                {
                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.PerfReview", b =>
                {
                    b.Navigation("PerfReviewItems");
                });

            modelBuilder.Entity("Domain.PerfReviewItemType", b =>
                {
                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.PeriodType", b =>
                {
                    b.Navigation("CustomTimePeriods");

                    b.Navigation("PayHistories");

                    b.Navigation("RateAmounts");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Navigation("PersonTrainings");
                });

            modelBuilder.Entity("Domain.PhysicalInventory", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("InventoryItemDetails");

                    b.Navigation("InventoryItemVariances");
                });

            modelBuilder.Entity("Domain.Picklist", b =>
                {
                    b.Navigation("PicklistBins");

                    b.Navigation("PicklistRoles");

                    b.Navigation("PicklistStatusHistories");

                    b.Navigation("PicklistStatuses");
                });

            modelBuilder.Entity("Domain.PicklistBin", b =>
                {
                    b.Navigation("PicklistItems");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Domain.PlatformType", b =>
                {
                    b.Navigation("UserAgents");
                });

            modelBuilder.Entity("Domain.PortalPage", b =>
                {
                    b.Navigation("InverseParentPortalPage");

                    b.Navigation("PortalPageColumns");

                    b.Navigation("PortalPagePortlets");
                });

            modelBuilder.Entity("Domain.PortalPortlet", b =>
                {
                    b.Navigation("PortalPagePortlets");

                    b.Navigation("PortletAttributes");

                    b.Navigation("PortletPortletCategories");
                });

            modelBuilder.Entity("Domain.PortletCategory", b =>
                {
                    b.Navigation("PortletPortletCategories");
                });

            modelBuilder.Entity("Domain.PostalAddress", b =>
                {
                    b.Navigation("BillingAccounts");

                    b.Navigation("CheckAccounts");

                    b.Navigation("CreditCards");

                    b.Navigation("EftAccounts");

                    b.Navigation("GiftCards");

                    b.Navigation("OrderItemShipGroups");

                    b.Navigation("PayPalPaymentMethods");

                    b.Navigation("PostalAddressBoundaries");

                    b.Navigation("ShipmentDestinationContactMeches");

                    b.Navigation("ShipmentOriginContactMeches");

                    b.Navigation("ShipmentRouteSegmentDestContactMeches");

                    b.Navigation("ShipmentRouteSegmentOriginContactMeches");
                });

            modelBuilder.Entity("Domain.PriorityType", b =>
                {
                    b.Navigation("PartyRelationships");
                });

            modelBuilder.Entity("Domain.ProdCatalog", b =>
                {
                    b.Navigation("CartAbandonedLines");

                    b.Navigation("ProdCatalogCategories");

                    b.Navigation("ProdCatalogInvFacilities");

                    b.Navigation("ProdCatalogRoles");

                    b.Navigation("ProductStoreCatalogs");
                });

            modelBuilder.Entity("Domain.ProdCatalogCategoryType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProdCatalogCategories");
                });

            modelBuilder.Entity("Domain.ProdConfItemContentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProdConfItemContents");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Navigation("AgreementProductAppls");

                    b.Navigation("Agreements");

                    b.Navigation("CartAbandonedLines");

                    b.Navigation("CommunicationEventProducts");

                    b.Navigation("CostComponents");

                    b.Navigation("CustRequestItems");

                    b.Navigation("FixedAssetProducts");

                    b.Navigation("FixedAssets");

                    b.Navigation("GoodIdentifications");

                    b.Navigation("InventoryItemTempRes");

                    b.Navigation("InventoryItems");

                    b.Navigation("InvoiceItems");

                    b.Navigation("MrpEvents");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderSummaryEntries");

                    b.Navigation("PartyNeeds");

                    b.Navigation("ProductAssocProductIdToNavigations");

                    b.Navigation("ProductAssocProducts");

                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductAverageCosts");

                    b.Navigation("ProductCalculatedInfo");

                    b.Navigation("ProductCategoryMembers");

                    b.Navigation("ProductConfigProducts");

                    b.Navigation("ProductConfigStats");

                    b.Navigation("ProductConfigs");

                    b.Navigation("ProductContents");

                    b.Navigation("ProductCostComponentCalcs");

                    b.Navigation("ProductFacilities");

                    b.Navigation("ProductFacilityAssocs");

                    b.Navigation("ProductFacilityLocations");

                    b.Navigation("ProductFeatureApplAttrs");

                    b.Navigation("ProductFeatureAppls");

                    b.Navigation("ProductGeos");

                    b.Navigation("ProductGlAccounts");

                    b.Navigation("ProductGroupOrders");

                    b.Navigation("ProductKeywordNews");

                    b.Navigation("ProductMaints");

                    b.Navigation("ProductManufacturingRuleProductIdForNavigations");

                    b.Navigation("ProductManufacturingRuleProductIdInNavigations");

                    b.Navigation("ProductManufacturingRuleProductIdInSubstNavigations");

                    b.Navigation("ProductManufacturingRuleProducts");

                    b.Navigation("ProductMeters");

                    b.Navigation("ProductOrderItems");

                    b.Navigation("ProductPaymentMethodTypes");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductPromoProducts");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductRoles");

                    b.Navigation("ProductSubscriptionResources");

                    b.Navigation("QuoteItems");

                    b.Navigation("ReorderGuidelines");

                    b.Navigation("Requirements");

                    b.Navigation("ReturnItems");

                    b.Navigation("SalesForecastDetails");

                    b.Navigation("ServiceSpecifications");

                    b.Navigation("ShipmentItems");

                    b.Navigation("ShipmentPackageContents");

                    b.Navigation("ShipmentReceipts");

                    b.Navigation("ShoppingListItems");

                    b.Navigation("Subscriptions");

                    b.Navigation("SupplierProducts");

                    b.Navigation("VendorProducts");

                    b.Navigation("WorkEffortGoodStandards");
                });

            modelBuilder.Entity("Domain.ProductAssocType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProductAssocs");
                });

            modelBuilder.Entity("Domain.ProductAverageCostType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProductAverageCosts");
                });

            modelBuilder.Entity("Domain.ProductCategory", b =>
                {
                    b.Navigation("InversePrimaryParentCategory");

                    b.Navigation("MarketInterests");

                    b.Navigation("PartyNeeds");

                    b.Navigation("ProdCatalogCategories");

                    b.Navigation("ProductCategoryAttributes");

                    b.Navigation("ProductCategoryContents");

                    b.Navigation("ProductCategoryGlAccounts");

                    b.Navigation("ProductCategoryLinks");

                    b.Navigation("ProductCategoryMembers");

                    b.Navigation("ProductCategoryRoles");

                    b.Navigation("ProductCategoryRollupParentProductCategories");

                    b.Navigation("ProductCategoryRollupProductCategories");

                    b.Navigation("ProductFeatureCatGrpAppls");

                    b.Navigation("ProductFeatureCategoryAppls");

                    b.Navigation("ProductPromoCategories");

                    b.Navigation("Products");

                    b.Navigation("SalesForecastDetails");

                    b.Navigation("ServiceRatesAsMake");

                    b.Navigation("ServiceRatesAsModel");

                    b.Navigation("ServiceSpecificationsAsMake");

                    b.Navigation("ServiceSpecificationsAsModel");

                    b.Navigation("Subscriptions");

                    b.Navigation("TaxAuthorityCategories");

                    b.Navigation("TaxAuthorityRateProducts");

                    b.Navigation("VehiclesAsExteriorColor");

                    b.Navigation("VehiclesAsInteriorColor");

                    b.Navigation("VehiclesAsMake");

                    b.Navigation("VehiclesAsModel");

                    b.Navigation("VehiclesAsTransmissionType");

                    b.Navigation("VehiclesAsVehicleType");
                });

            modelBuilder.Entity("Domain.ProductCategoryContentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProductCategoryContents");
                });

            modelBuilder.Entity("Domain.ProductCategoryType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductCategoryTypeAttrs");
                });

            modelBuilder.Entity("Domain.ProductConfigConfig", b =>
                {
                    b.Navigation("ConfigOptionProductOptions");
                });

            modelBuilder.Entity("Domain.ProductConfigItem", b =>
                {
                    b.Navigation("ProdConfItemContents");

                    b.Navigation("ProductConfigConfigs");

                    b.Navigation("ProductConfigOptionIactnConfigItemIdToNavigations");

                    b.Navigation("ProductConfigOptionIactnConfigItems");

                    b.Navigation("ProductConfigOptions");

                    b.Navigation("ProductConfigProducts");

                    b.Navigation("ProductConfigs");
                });

            modelBuilder.Entity("Domain.ProductConfigOption", b =>
                {
                    b.Navigation("ProductConfigConfigs");

                    b.Navigation("ProductConfigOptionIactnConfigNavigations");

                    b.Navigation("ProductConfigOptionIactnConfigs");

                    b.Navigation("ProductConfigProducts");
                });

            modelBuilder.Entity("Domain.ProductConfigProduct", b =>
                {
                    b.Navigation("ConfigOptionProductOptions");
                });

            modelBuilder.Entity("Domain.ProductContentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProductContents");

                    b.Navigation("ProductPromoContents");
                });

            modelBuilder.Entity("Domain.ProductFeature", b =>
                {
                    b.Navigation("CostComponents");

                    b.Navigation("DesiredFeatures");

                    b.Navigation("InvoiceItems");

                    b.Navigation("ProductFeatureApplAttrs");

                    b.Navigation("ProductFeatureAppls");

                    b.Navigation("ProductFeatureDataResources");

                    b.Navigation("ProductFeatureGroupAppls");

                    b.Navigation("ProductFeatureIactnProductFeatureIdToNavigations");

                    b.Navigation("ProductFeatureIactnProductFeatures");

                    b.Navigation("ProductManufacturingRules");

                    b.Navigation("QuoteItems");

                    b.Navigation("ShipmentItemFeatures");

                    b.Navigation("SupplierProductFeatures");
                });

            modelBuilder.Entity("Domain.ProductFeatureAppl", b =>
                {
                    b.Navigation("ProductFeatureApplAttrs");
                });

            modelBuilder.Entity("Domain.ProductFeatureApplType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProductFeatureAppls");
                });

            modelBuilder.Entity("Domain.ProductFeatureCategory", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("ProductFeatureCategoryAppls");

                    b.Navigation("ProductFeatures");
                });

            modelBuilder.Entity("Domain.ProductFeatureGroup", b =>
                {
                    b.Navigation("ProductFeatureCatGrpAppls");

                    b.Navigation("ProductFeatureGroupAppls");
                });

            modelBuilder.Entity("Domain.ProductFeatureIactnType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProductFeatureIactns");
                });

            modelBuilder.Entity("Domain.ProductFeatureType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProductFeatures");
                });

            modelBuilder.Entity("Domain.ProductGroupOrder", b =>
                {
                    b.Navigation("OrderItemGroupOrders");
                });

            modelBuilder.Entity("Domain.ProductMaintType", b =>
                {
                    b.Navigation("FixedAssetMaints");

                    b.Navigation("InverseParentType");

                    b.Navigation("ProductMaints");
                });

            modelBuilder.Entity("Domain.ProductMeterType", b =>
                {
                    b.Navigation("FixedAssetMaints");

                    b.Navigation("FixedAssetMeters");

                    b.Navigation("ProductMaints");

                    b.Navigation("ProductMeters");
                });

            modelBuilder.Entity("Domain.ProductPriceAction", b =>
                {
                    b.Navigation("OrderItemPriceInfos");
                });

            modelBuilder.Entity("Domain.ProductPriceActionType", b =>
                {
                    b.Navigation("ProductPriceActions");
                });

            modelBuilder.Entity("Domain.ProductPricePurpose", b =>
                {
                    b.Navigation("OrderPaymentPreferences");

                    b.Navigation("ProductPaymentMethodTypes");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("Domain.ProductPriceRule", b =>
                {
                    b.Navigation("MarketingCampaignPrices");

                    b.Navigation("ProductPriceActions");

                    b.Navigation("ProductPriceConds");
                });

            modelBuilder.Entity("Domain.ProductPriceType", b =>
                {
                    b.Navigation("ProductFeaturePrices");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("Domain.ProductPromo", b =>
                {
                    b.Navigation("AgreementPromoAppls");

                    b.Navigation("MarketingCampaignPromos");

                    b.Navigation("OrderAdjustments");

                    b.Navigation("ProductPromoActions");

                    b.Navigation("ProductPromoCategories");

                    b.Navigation("ProductPromoCodes");

                    b.Navigation("ProductPromoConds");

                    b.Navigation("ProductPromoContents");

                    b.Navigation("ProductPromoProducts");

                    b.Navigation("ProductPromoRules");

                    b.Navigation("ProductPromoUses");

                    b.Navigation("ProductStorePromoAppls");

                    b.Navigation("QuoteAdjustments");

                    b.Navigation("ReturnAdjustments");
                });

            modelBuilder.Entity("Domain.ProductPromoCode", b =>
                {
                    b.Navigation("OrderProductPromoCodes");

                    b.Navigation("ProdPromoCodeContactMeches");

                    b.Navigation("ProductPromoCodeEmails");

                    b.Navigation("ProductPromoCodeParties");

                    b.Navigation("ProductPromoUses");

                    b.Navigation("ShoppingLists");
                });

            modelBuilder.Entity("Domain.ProductPromoRule", b =>
                {
                    b.Navigation("ProductPromoActions");

                    b.Navigation("ProductPromoConds");
                });

            modelBuilder.Entity("Domain.ProductSearchResult", b =>
                {
                    b.Navigation("ProductSearchConstraints");
                });

            modelBuilder.Entity("Domain.ProductStore", b =>
                {
                    b.Navigation("CustRequests");

                    b.Navigation("InventoryItemTempRes");

                    b.Navigation("OrderHeaders");

                    b.Navigation("PartyProfileDefaults");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductStoreCatalogs");

                    b.Navigation("ProductStoreEmailSettings");

                    b.Navigation("ProductStoreFacilities");

                    b.Navigation("ProductStoreFinActSettings");

                    b.Navigation("ProductStoreGroupMembers");

                    b.Navigation("ProductStoreKeywordOvrds");

                    b.Navigation("ProductStorePaymentSettings");

                    b.Navigation("ProductStorePromoAppls");

                    b.Navigation("ProductStoreRoles");

                    b.Navigation("ProductStoreSurveyAppls");

                    b.Navigation("ProductStoreTelecomSettings");

                    b.Navigation("ProductStoreVendorPayments");

                    b.Navigation("ProductStoreVendorShipments");

                    b.Navigation("Quotes");

                    b.Navigation("SegmentGroups");

                    b.Navigation("ServiceRates");

                    b.Navigation("ShoppingLists");

                    b.Navigation("TaxAuthorityRateProducts");

                    b.Navigation("WebSites");
                });

            modelBuilder.Entity("Domain.ProductStoreGroup", b =>
                {
                    b.Navigation("InversePrimaryParentGroup");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductStoreGroupMembers");

                    b.Navigation("ProductStoreGroupRoles");

                    b.Navigation("ProductStoreGroupRollupParentGroups");

                    b.Navigation("ProductStoreGroupRollupProductStoreGroups");

                    b.Navigation("ProductStores");

                    b.Navigation("VendorProducts");
                });

            modelBuilder.Entity("Domain.ProductStoreGroupType", b =>
                {
                    b.Navigation("ProductStoreGroups");
                });

            modelBuilder.Entity("Domain.ProductStoreShipmentMeth", b =>
                {
                    b.Navigation("ShipmentCostEstimates");
                });

            modelBuilder.Entity("Domain.ProductStoreSurveyAppl", b =>
                {
                    b.Navigation("WorkEffortSurveyAppls");
                });

            modelBuilder.Entity("Domain.ProductType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ProductTypeAttrs");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.ProtocolType", b =>
                {
                    b.Navigation("UserAgents");
                });

            modelBuilder.Entity("Domain.QuantityBreak", b =>
                {
                    b.Navigation("ShipmentCostEstimatePriceBreaks");

                    b.Navigation("ShipmentCostEstimateQuantityBreaks");

                    b.Navigation("ShipmentCostEstimateWeightBreaks");
                });

            modelBuilder.Entity("Domain.QuantityBreakType", b =>
                {
                    b.Navigation("QuantityBreaks");
                });

            modelBuilder.Entity("Domain.Quote", b =>
                {
                    b.Navigation("QuoteAdjustments");

                    b.Navigation("QuoteAttributes");

                    b.Navigation("QuoteCoefficients");

                    b.Navigation("QuoteItems");

                    b.Navigation("QuoteNotes");

                    b.Navigation("QuoteRoles");

                    b.Navigation("QuoteTerms");

                    b.Navigation("QuoteWorkEfforts");

                    b.Navigation("SalesOpportunityQuotes");
                });

            modelBuilder.Entity("Domain.QuoteItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Domain.QuoteTerm", b =>
                {
                    b.Navigation("QuoteTermAttributes");
                });

            modelBuilder.Entity("Domain.QuoteType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PartyPrefDocTypeTpls");

                    b.Navigation("QuoteTypeAttrs");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("Domain.RateType", b =>
                {
                    b.Navigation("PartyRateNews");

                    b.Navigation("RateAmounts");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("Domain.RecurrenceInfo", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("JobSandboxes");

                    b.Navigation("ProductAssocs");

                    b.Navigation("ShoppingLists");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.RecurrenceRule", b =>
                {
                    b.Navigation("RecurrenceInfoExceptionRules");

                    b.Navigation("RecurrenceInfoRecurrenceRules");
                });

            modelBuilder.Entity("Domain.RejectionReason", b =>
                {
                    b.Navigation("ShipmentReceipts");
                });

            modelBuilder.Entity("Domain.Requirement", b =>
                {
                    b.Navigation("DesiredFeatures");

                    b.Navigation("OrderRequirementCommitments");

                    b.Navigation("RequirementAttributes");

                    b.Navigation("RequirementBudgetAllocations");

                    b.Navigation("RequirementCustRequests");

                    b.Navigation("RequirementRoles");

                    b.Navigation("RequirementStatuses");

                    b.Navigation("WorkRequirementFulfillments");
                });

            modelBuilder.Entity("Domain.RequirementType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("RequirementTypeAttrs");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("Domain.ResponsibilityType", b =>
                {
                    b.Navigation("EmplPositionResponsibilities");

                    b.Navigation("InverseParentType");

                    b.Navigation("ValidResponsibilities");
                });

            modelBuilder.Entity("Domain.ReturnAdjustmentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ReturnAdjustments");
                });

            modelBuilder.Entity("Domain.ReturnHeader", b =>
                {
                    b.Navigation("CommunicationEventReturns");

                    b.Navigation("ReturnAdjustments");

                    b.Navigation("ReturnContactMeches");

                    b.Navigation("ReturnItemBillings");

                    b.Navigation("ReturnItemShipments");

                    b.Navigation("ReturnItems");

                    b.Navigation("ReturnStatuses");

                    b.Navigation("Shipments");

                    b.Navigation("TrackingCodeOrderReturns");
                });

            modelBuilder.Entity("Domain.ReturnHeaderType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ReturnHeaders");

                    b.Navigation("ReturnItemTypeMaps");
                });

            modelBuilder.Entity("Domain.ReturnItem", b =>
                {
                    b.Navigation("ReturnItemBillings");

                    b.Navigation("ReturnItemShipments");

                    b.Navigation("ShipmentReceipts");
                });

            modelBuilder.Entity("Domain.ReturnItemResponse", b =>
                {
                    b.Navigation("ReturnItems");
                });

            modelBuilder.Entity("Domain.ReturnItemType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ReturnItems");
                });

            modelBuilder.Entity("Domain.ReturnReason", b =>
                {
                    b.Navigation("ReturnItems");
                });

            modelBuilder.Entity("Domain.ReturnType", b =>
                {
                    b.Navigation("ReturnAdjustments");

                    b.Navigation("ReturnItems");
                });

            modelBuilder.Entity("Domain.RoleType", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("AcctgTransEntries");

                    b.Navigation("CommunicationEventRoleTypeIdFromNavigations");

                    b.Navigation("CommunicationEventRoleTypeIdToNavigations");

                    b.Navigation("ContentApprovals");

                    b.Navigation("ContentPurposeOperations");

                    b.Navigation("FacilityParties");

                    b.Navigation("FixedAssets");

                    b.Navigation("InverseParentType");

                    b.Navigation("Invoices");

                    b.Navigation("PartyContactMeches");

                    b.Navigation("PartyInvitationRoleAssocs");

                    b.Navigation("PartyNeeds");

                    b.Navigation("PartyRelationshipTypeRoleTypeIdValidFromNavigations");

                    b.Navigation("PartyRelationshipTypeRoleTypeIdValidToNavigations");

                    b.Navigation("PartyRoles");

                    b.Navigation("Payments");

                    b.Navigation("ProductContents");

                    b.Navigation("ProductSubscriptionResources");

                    b.Navigation("RoleTypeAttrs");

                    b.Navigation("SalesOpportunityRoles");

                    b.Navigation("ShipmentCostEstimates");

                    b.Navigation("SubscriptionOriginatedFromRoleTypes");

                    b.Navigation("SubscriptionRoleTypes");

                    b.Navigation("ValidContactMechRoles");
                });

            modelBuilder.Entity("Domain.RuntimeDatum", b =>
                {
                    b.Navigation("ApplicationSandboxes");

                    b.Navigation("JobSandboxes");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.SalesForecast", b =>
                {
                    b.Navigation("InverseParentSalesForecast");

                    b.Navigation("SalesForecastDetails");

                    b.Navigation("SalesForecastHistories");
                });

            modelBuilder.Entity("Domain.SalesOpportunity", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("OrderItems");

                    b.Navigation("SalesOpportunityCompetitors");

                    b.Navigation("SalesOpportunityHistories");

                    b.Navigation("SalesOpportunityQuotes");

                    b.Navigation("SalesOpportunityRoles");

                    b.Navigation("SalesOpportunityTrckCodes");

                    b.Navigation("SalesOpportunityWorkEfforts");
                });

            modelBuilder.Entity("Domain.SalesOpportunityStage", b =>
                {
                    b.Navigation("SalesOpportunities");

                    b.Navigation("SalesOpportunityHistories");
                });

            modelBuilder.Entity("Domain.SecurityGroup", b =>
                {
                    b.Navigation("PartyRelationships");

                    b.Navigation("PortalPages");

                    b.Navigation("ProtectedViews");

                    b.Navigation("SecurityGroupPermissions");

                    b.Navigation("UserLoginSecurityGroups");
                });

            modelBuilder.Entity("Domain.SegmentGroup", b =>
                {
                    b.Navigation("SegmentGroupClassifications");

                    b.Navigation("SegmentGroupGeos");

                    b.Navigation("SegmentGroupRoles");
                });

            modelBuilder.Entity("Domain.SegmentGroupType", b =>
                {
                    b.Navigation("SegmentGroups");
                });

            modelBuilder.Entity("Domain.ServerHitType", b =>
                {
                    b.Navigation("ServerHitBins");

                    b.Navigation("ServerHits");
                });

            modelBuilder.Entity("Domain.SettlementTerm", b =>
                {
                    b.Navigation("AcctgTransEntries");
                });

            modelBuilder.Entity("Domain.Shipment", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("OrderShipments");

                    b.Navigation("ReturnItemShipments");

                    b.Navigation("ShipmentAttributes");

                    b.Navigation("ShipmentContactMeches");

                    b.Navigation("ShipmentItems");

                    b.Navigation("ShipmentPackages");

                    b.Navigation("ShipmentRouteSegments");

                    b.Navigation("ShipmentStatuses");
                });

            modelBuilder.Entity("Domain.ShipmentBoxType", b =>
                {
                    b.Navigation("CarrierShipmentBoxTypes");

                    b.Navigation("Products");

                    b.Navigation("ShipmentPackages");
                });

            modelBuilder.Entity("Domain.ShipmentContactMechType", b =>
                {
                    b.Navigation("ShipmentContactMeches");
                });

            modelBuilder.Entity("Domain.ShipmentGatewayConfig", b =>
                {
                    b.Navigation("ProductStoreShipmentMeths");

                    b.Navigation("ShipmentGatewayDhl")
                        .IsRequired();

                    b.Navigation("ShipmentGatewayFedex")
                        .IsRequired();

                    b.Navigation("ShipmentGatewayUp")
                        .IsRequired();

                    b.Navigation("ShipmentGatewayUsp")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ShipmentGatewayConfigType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ShipmentGatewayConfigs");
                });

            modelBuilder.Entity("Domain.ShipmentItem", b =>
                {
                    b.Navigation("ItemIssuances");

                    b.Navigation("ReturnItemShipments");

                    b.Navigation("ShipmentItemBillings");

                    b.Navigation("ShipmentItemFeatures");

                    b.Navigation("ShipmentPackageContents");

                    b.Navigation("ShippingDocuments");
                });

            modelBuilder.Entity("Domain.ShipmentMethodType", b =>
                {
                    b.Navigation("CarrierShipmentMethods");

                    b.Navigation("FacilityCarrierShipments");

                    b.Navigation("OrderItemShipGroups");

                    b.Navigation("Picklists");

                    b.Navigation("ProductStoreShipmentMeths");

                    b.Navigation("ProductStoreVendorShipments");

                    b.Navigation("ShipmentRouteSegments");
                });

            modelBuilder.Entity("Domain.ShipmentPackage", b =>
                {
                    b.Navigation("ShipmentPackageContents");

                    b.Navigation("ShipmentPackageRouteSegs");

                    b.Navigation("ShipmentReceipts");

                    b.Navigation("ShippingDocuments");
                });

            modelBuilder.Entity("Domain.ShipmentReceipt", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("InventoryItemDetails");

                    b.Navigation("OrderItemBillings");

                    b.Navigation("ReturnItemBillings");

                    b.Navigation("ShipmentReceiptRoles");
                });

            modelBuilder.Entity("Domain.ShipmentRouteSegment", b =>
                {
                    b.Navigation("ShipmentPackageRouteSegs");
                });

            modelBuilder.Entity("Domain.ShipmentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("ShipmentTypeAttrs");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Domain.ShoppingList", b =>
                {
                    b.Navigation("InverseParentShoppingList");

                    b.Navigation("OrderHeaders");

                    b.Navigation("ShoppingListItemSurveys");

                    b.Navigation("ShoppingListItems");

                    b.Navigation("ShoppingListWorkEfforts");
                });

            modelBuilder.Entity("Domain.ShoppingListItem", b =>
                {
                    b.Navigation("ShoppingListItemSurveys");
                });

            modelBuilder.Entity("Domain.ShoppingListType", b =>
                {
                    b.Navigation("ShoppingLists");
                });

            modelBuilder.Entity("Domain.SkillType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("JobRequisitions");

                    b.Navigation("PartySkills");

                    b.Navigation("QuoteItems");

                    b.Navigation("WorkEffortSkillStandards");
                });

            modelBuilder.Entity("Domain.StatusItem", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("AcctgTransEntries");

                    b.Navigation("AgreementStatuses");

                    b.Navigation("AllocationPlanHeaders");

                    b.Navigation("AllocationPlanItems");

                    b.Navigation("BudgetStatuses");

                    b.Navigation("CommunicationEventRoles");

                    b.Navigation("CommunicationEvents");

                    b.Navigation("ContactListCommStatuses");

                    b.Navigation("ContactListParties");

                    b.Navigation("ContentApprovals");

                    b.Navigation("ContentPurposeOperations");

                    b.Navigation("Contents");

                    b.Navigation("CustRequestItems");

                    b.Navigation("CustRequestStatuses");

                    b.Navigation("CustRequests");

                    b.Navigation("DataResources");

                    b.Navigation("EmplLeaves");

                    b.Navigation("EmplPositions");

                    b.Navigation("FinAccountStatuses");

                    b.Navigation("FinAccountTrans");

                    b.Navigation("FixedAssetMaints");

                    b.Navigation("GlReconciliations");

                    b.Navigation("InventoryItemStatuses");

                    b.Navigation("InventoryItems");

                    b.Navigation("InventoryTransfers");

                    b.Navigation("InvoiceStatuses");

                    b.Navigation("Invoices");

                    b.Navigation("JobSandboxes");

                    b.Navigation("MarketingCampaigns");

                    b.Navigation("OrderDeliverySchedules");

                    b.Navigation("OrderHeaderStatuses");

                    b.Navigation("OrderHeaderSyncStatuses");

                    b.Navigation("OrderItemStatuses");

                    b.Navigation("OrderItemSyncStatuses");

                    b.Navigation("OrderPaymentPreferences");

                    b.Navigation("OrderStatuses");

                    b.Navigation("Parties");

                    b.Navigation("PartyFixedAssetAssignments");

                    b.Navigation("PartyInvitations");

                    b.Navigation("PartyQualStatuses");

                    b.Navigation("PartyQualVerifStatuses");

                    b.Navigation("PartyRelationships");

                    b.Navigation("PartyStatuses");

                    b.Navigation("Payments");

                    b.Navigation("PicklistItems");

                    b.Navigation("PicklistStatusHistoryStatusIdToNavigations");

                    b.Navigation("PicklistStatusHistoryStatuses");

                    b.Navigation("PicklistStatusStatusIdToNavigations");

                    b.Navigation("PicklistStatusStatuses");

                    b.Navigation("Picklists");

                    b.Navigation("ProductGroupOrders");

                    b.Navigation("ProductKeywordNews");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductStoreDigitalItemApprovedStatusNavigations");

                    b.Navigation("ProductStoreHeaderApprovedStatusNavigations");

                    b.Navigation("ProductStoreHeaderCancelStatusNavigations");

                    b.Navigation("ProductStoreHeaderDeclinedStatusNavigations");

                    b.Navigation("ProductStoreItemApprovedStatusNavigations");

                    b.Navigation("ProductStoreItemCancelStatusNavigations");

                    b.Navigation("ProductStoreItemDeclinedStatusNavigations");

                    b.Navigation("Quotes");

                    b.Navigation("RequirementStatuses");

                    b.Navigation("Requirements");

                    b.Navigation("ReturnHeaders");

                    b.Navigation("ReturnItemExpectedItemStatusNavigations");

                    b.Navigation("ReturnItemStatuses");

                    b.Navigation("ReturnStatuses");

                    b.Navigation("ShipmentRouteSegments");

                    b.Navigation("ShipmentStatuses");

                    b.Navigation("Shipments");

                    b.Navigation("StatusValidChangeStatusIdToNavigations");

                    b.Navigation("StatusValidChangeStatuses");

                    b.Navigation("SurveyResponses");

                    b.Navigation("TestingStatuses");

                    b.Navigation("Timesheets");

                    b.Navigation("WorkEffortFixedAssetAssignAvailabilityStatuses");

                    b.Navigation("WorkEffortFixedAssetAssignStatuses");

                    b.Navigation("WorkEffortGoodStandards");

                    b.Navigation("WorkEffortInventoryAssigns");

                    b.Navigation("WorkEffortPartyAssignmentAvailabilityStatuses");

                    b.Navigation("WorkEffortPartyAssignmentStatuses");

                    b.Navigation("WorkEffortReviews");

                    b.Navigation("WorkEffortStatuses");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.StatusType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("StatusItems");
                });

            modelBuilder.Entity("Domain.StatusValidChange", b =>
                {
                    b.Navigation("PicklistStatusHistories");
                });

            modelBuilder.Entity("Domain.Subscription", b =>
                {
                    b.Navigation("SubscriptionAttributes");

                    b.Navigation("SubscriptionCommEvents");

                    b.Navigation("SubscriptionFulfillmentPieces");
                });

            modelBuilder.Entity("Domain.SubscriptionActivity", b =>
                {
                    b.Navigation("SubscriptionFulfillmentPieces");
                });

            modelBuilder.Entity("Domain.SubscriptionResource", b =>
                {
                    b.Navigation("InverseParentResource");

                    b.Navigation("ProductSubscriptionResources");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.SubscriptionType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("SubscriptionTypeAttrs");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.SupplierPrefOrder", b =>
                {
                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("Domain.SupplierRatingType", b =>
                {
                    b.Navigation("SupplierProducts");
                });

            modelBuilder.Entity("Domain.Survey", b =>
                {
                    b.Navigation("DataResources");

                    b.Navigation("ProductStoreFinActSettings");

                    b.Navigation("ProductStoreSurveyAppls");

                    b.Navigation("SurveyMultiResps");

                    b.Navigation("SurveyPages");

                    b.Navigation("SurveyQuestionAppls");

                    b.Navigation("SurveyResponses");

                    b.Navigation("SurveyTriggers");

                    b.Navigation("WorkEffortSurveyAppls");
                });

            modelBuilder.Entity("Domain.SurveyApplType", b =>
                {
                    b.Navigation("ProductStoreSurveyAppls");

                    b.Navigation("SurveyTriggers");
                });

            modelBuilder.Entity("Domain.SurveyMultiResp", b =>
                {
                    b.Navigation("SurveyMultiRespColumns");
                });

            modelBuilder.Entity("Domain.SurveyQuestion", b =>
                {
                    b.Navigation("SurveyQuestionAppls");

                    b.Navigation("SurveyQuestionOptions");

                    b.Navigation("SurveyResponseAnswers");
                });

            modelBuilder.Entity("Domain.SurveyQuestionCategory", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("Domain.SurveyQuestionOption", b =>
                {
                    b.Navigation("SurveyQuestionAppls");

                    b.Navigation("SurveyResponseAnswers");
                });

            modelBuilder.Entity("Domain.SurveyQuestionType", b =>
                {
                    b.Navigation("SurveyQuestions");
                });

            modelBuilder.Entity("Domain.SurveyResponse", b =>
                {
                    b.Navigation("DataResources");

                    b.Navigation("GiftCardFulfillments");

                    b.Navigation("ShoppingListItemSurveys");

                    b.Navigation("SurveyResponseAnswers");
                });

            modelBuilder.Entity("Domain.TaxAuthority", b =>
                {
                    b.Navigation("OrderAdjustments");

                    b.Navigation("PartyTaxAuthInfos");

                    b.Navigation("ProductStores");

                    b.Navigation("QuoteAdjustments");

                    b.Navigation("ReturnAdjustments");

                    b.Navigation("TaxAuthorityAssocTaxAuths");

                    b.Navigation("TaxAuthorityAssocToTaxAuths");

                    b.Navigation("TaxAuthorityCategories");

                    b.Navigation("TaxAuthorityGlAccounts");

                    b.Navigation("TaxAuthorityRateProducts");
                });

            modelBuilder.Entity("Domain.TaxAuthorityAssocType", b =>
                {
                    b.Navigation("TaxAuthorityAssocs");
                });

            modelBuilder.Entity("Domain.TaxAuthorityRateProduct", b =>
                {
                    b.Navigation("InvoiceItems");

                    b.Navigation("OrderAdjustments");

                    b.Navigation("ReturnAdjustments");
                });

            modelBuilder.Entity("Domain.TaxAuthorityRateType", b =>
                {
                    b.Navigation("TaxAuthorityRateProducts");
                });

            modelBuilder.Entity("Domain.TechDataCalendar", b =>
                {
                    b.Navigation("FixedAssets");

                    b.Navigation("TechDataCalendarExcDays");

                    b.Navigation("TechDataCalendarExcWeeks");
                });

            modelBuilder.Entity("Domain.TechDataCalendarWeek", b =>
                {
                    b.Navigation("TechDataCalendarExcWeeks");

                    b.Navigation("TechDataCalendars");
                });

            modelBuilder.Entity("Domain.TelecomGatewayConfig", b =>
                {
                    b.Navigation("ProductStoreTelecomSettings");
                });

            modelBuilder.Entity("Domain.TelecomMethodType", b =>
                {
                    b.Navigation("ProductStoreTelecomSettings");
                });

            modelBuilder.Entity("Domain.TelecomNumber", b =>
                {
                    b.Navigation("OrderItemShipGroups");

                    b.Navigation("ShipmentDestinationTelecomNumbers");

                    b.Navigation("ShipmentOriginTelecomNumbers");

                    b.Navigation("ShipmentRouteSegmentDestTelecomNumbers");

                    b.Navigation("ShipmentRouteSegmentOriginTelecomNumbers");
                });

            modelBuilder.Entity("Domain.TemporalExpression", b =>
                {
                    b.Navigation("JobSandboxes");

                    b.Navigation("TemporalExpressionAssocFromTempExprs");

                    b.Navigation("TemporalExpressionAssocToTempExprs");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.Tenant", b =>
                {
                    b.Navigation("TenantComponents");

                    b.Navigation("TenantDataSources");

                    b.Navigation("TenantDomainNames");

                    b.Navigation("TenantKeyEncryptingKey")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.TermType", b =>
                {
                    b.Navigation("AgreementTerms");

                    b.Navigation("BillingAccountTerms");

                    b.Navigation("InverseParentType");

                    b.Navigation("InvoiceTerms");

                    b.Navigation("OrderTerms");

                    b.Navigation("QuoteTerms");

                    b.Navigation("TermTypeAttrs");
                });

            modelBuilder.Entity("Domain.TerminationType", b =>
                {
                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.Testing", b =>
                {
                    b.Navigation("TestingItems");

                    b.Navigation("TestingNodeMembers");
                });

            modelBuilder.Entity("Domain.TestingNode", b =>
                {
                    b.Navigation("InversePrimaryParentNode");

                    b.Navigation("TestingNodeMembers");
                });

            modelBuilder.Entity("Domain.TestingType", b =>
                {
                    b.Navigation("Testings");
                });

            modelBuilder.Entity("Domain.Timesheet", b =>
                {
                    b.Navigation("TimeEntries");

                    b.Navigation("TimesheetRoles");
                });

            modelBuilder.Entity("Domain.TrackingCode", b =>
                {
                    b.Navigation("TrackingCodeOrderReturns");

                    b.Navigation("TrackingCodeOrders");

                    b.Navigation("TrackingCodeVisits");
                });

            modelBuilder.Entity("Domain.TrackingCodeType", b =>
                {
                    b.Navigation("TrackingCodeOrderReturns");

                    b.Navigation("TrackingCodeOrders");

                    b.Navigation("TrackingCodes");
                });

            modelBuilder.Entity("Domain.TrainingClassType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("PersonTrainings");
                });

            modelBuilder.Entity("Domain.TrainingRequest", b =>
                {
                    b.Navigation("PersonTrainings");
                });

            modelBuilder.Entity("Domain.Uom", b =>
                {
                    b.Navigation("AcctgTransEntryCurrencyUoms");

                    b.Navigation("AcctgTransEntryOrigCurrencyUoms");

                    b.Navigation("BillingAccountTerms");

                    b.Navigation("BillingAccounts");

                    b.Navigation("CostComponentCalcs");

                    b.Navigation("CostComponents");

                    b.Navigation("CustRequestCurrencyUoms");

                    b.Navigation("CustRequestMaximumAmountUoms");

                    b.Navigation("FacilityDefaultDimensionUoms");

                    b.Navigation("FacilityDefaultWeightUoms");

                    b.Navigation("FacilityFacilitySizeUoms");

                    b.Navigation("FinAccounts");

                    b.Navigation("FixedAssetMaints");

                    b.Navigation("FixedAssetProducts");

                    b.Navigation("FixedAssetStdCosts");

                    b.Navigation("FixedAssets");

                    b.Navigation("GeoPoints");

                    b.Navigation("InventoryItemCurrencyUoms");

                    b.Navigation("InventoryItemUoms");

                    b.Navigation("InvoiceItems");

                    b.Navigation("Invoices");

                    b.Navigation("MarketingCampaigns");

                    b.Navigation("OrderDeliveryScheduleTotalCubicUoms");

                    b.Navigation("OrderDeliveryScheduleTotalWeightUoms");

                    b.Navigation("OrderHeaders");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderTerms");

                    b.Navigation("Parties");

                    b.Navigation("PartyAcctgPreferences");

                    b.Navigation("PaymentActualCurrencyUoms");

                    b.Navigation("PaymentCurrencyUoms");

                    b.Navigation("PaymentGatewayResponses");

                    b.Navigation("PeriodTypes");

                    b.Navigation("ProductContents");

                    b.Navigation("ProductDepthUoms");

                    b.Navigation("ProductDiameterUoms");

                    b.Navigation("ProductFeaturePrices");

                    b.Navigation("ProductFeatures");

                    b.Navigation("ProductHeightUoms");

                    b.Navigation("ProductMaints");

                    b.Navigation("ProductMeterTypes");

                    b.Navigation("ProductMeters");

                    b.Navigation("ProductPriceCurrencyUoms");

                    b.Navigation("ProductPriceTermUoms");

                    b.Navigation("ProductQuantityUoms");

                    b.Navigation("ProductStores");

                    b.Navigation("ProductSubscriptionResourceAvailableTimeUoms");

                    b.Navigation("ProductSubscriptionResourceCanclAutmExtTimeUoms");

                    b.Navigation("ProductSubscriptionResourceGracePeriodOnExpiryUoms");

                    b.Navigation("ProductSubscriptionResourceMaxLifeTimeUoms");

                    b.Navigation("ProductSubscriptionResourceUseTimeUoms");

                    b.Navigation("ProductWeightUoms");

                    b.Navigation("ProductWidthUoms");

                    b.Navigation("QuoteItems");

                    b.Navigation("Quotes");

                    b.Navigation("RateAmounts");

                    b.Navigation("ReturnHeaders");

                    b.Navigation("SalesForecastDetails");

                    b.Navigation("SalesForecastHistories");

                    b.Navigation("SalesForecasts");

                    b.Navigation("SalesOpportunities");

                    b.Navigation("SalesOpportunityHistories");

                    b.Navigation("ShipmentBoxTypeDimensionUoms");

                    b.Navigation("ShipmentBoxTypeWeightUoms");

                    b.Navigation("ShipmentCostEstimatePriceUoms");

                    b.Navigation("ShipmentCostEstimateQuantityUoms");

                    b.Navigation("ShipmentCostEstimateWeightUoms");

                    b.Navigation("ShipmentPackageDimensionUoms");

                    b.Navigation("ShipmentPackageRouteSegs");

                    b.Navigation("ShipmentPackageWeightUoms");

                    b.Navigation("ShipmentRouteSegmentBillingWeightUoms");

                    b.Navigation("ShipmentRouteSegmentCurrencyUoms");

                    b.Navigation("ShipmentTimeEstimates");

                    b.Navigation("Shipments");

                    b.Navigation("SubscriptionAvailableTimeUoms");

                    b.Navigation("SubscriptionCanclAutmExtTimeUoms");

                    b.Navigation("SubscriptionGracePeriodOnExpiryUoms");

                    b.Navigation("SubscriptionMaxLifeTimeUoms");

                    b.Navigation("SubscriptionUseTimeUoms");

                    b.Navigation("SupplierProductCurrencyUoms");

                    b.Navigation("SupplierProductFeatures");

                    b.Navigation("SupplierProductQuantityUoms");

                    b.Navigation("UomConversionDatedUomIdToNavigations");

                    b.Navigation("UomConversionDatedUoms");

                    b.Navigation("UomConversionUomIdToNavigations");

                    b.Navigation("UomConversionUoms");

                    b.Navigation("UomGroups");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.UomType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("Products");

                    b.Navigation("Uoms");
                });

            modelBuilder.Entity("Domain.UserAgent", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Domain.UserAgentMethodType", b =>
                {
                    b.Navigation("UserAgents");
                });

            modelBuilder.Entity("Domain.UserAgentType", b =>
                {
                    b.Navigation("UserAgents");
                });

            modelBuilder.Entity("Domain.UserLogin", b =>
                {
                    b.Navigation("AgreementStatuses");

                    b.Navigation("AllocationPlanHeaderCreatedByUserLoginNavigations");

                    b.Navigation("AllocationPlanHeaderLastModifiedByUserLoginNavigations");

                    b.Navigation("AllocationPlanItemCreatedByUserLoginNavigations");

                    b.Navigation("AllocationPlanItemLastModifiedByUserLoginNavigations");

                    b.Navigation("BudgetStatuses");

                    b.Navigation("ContactListCommStatuses");

                    b.Navigation("ContactListCreatedByUserLoginNavigations");

                    b.Navigation("ContactListLastModifiedByUserLoginNavigations");

                    b.Navigation("ContentAssocCreatedByUserLoginNavigations");

                    b.Navigation("ContentAssocLastModifiedByUserLoginNavigations");

                    b.Navigation("ContentCreatedByUserLoginNavigations");

                    b.Navigation("ContentLastModifiedByUserLoginNavigations");

                    b.Navigation("CustRequestStatuses");

                    b.Navigation("DataResourceCreatedByUserLoginNavigations");

                    b.Navigation("DataResourceLastModifiedByUserLoginNavigations");

                    b.Navigation("FinAccountStatuses");

                    b.Navigation("InventoryItemStatuses");

                    b.Navigation("InvoiceStatuses");

                    b.Navigation("ItemIssuances");

                    b.Navigation("JobSandboxAuthUserLogins");

                    b.Navigation("JobSandboxRunAsUserNavigations");

                    b.Navigation("OrderAdjustments");

                    b.Navigation("OrderHeaders");

                    b.Navigation("OrderItemChangeByUserLogins");

                    b.Navigation("OrderItemChanges");

                    b.Navigation("OrderItemDontCancelSetUserLoginNavigations");

                    b.Navigation("OrderPaymentPreferences");

                    b.Navigation("OrderStatuses");

                    b.Navigation("PartyCreatedByUserLoginNavigations");

                    b.Navigation("PartyLastModifiedByUserLoginNavigations");

                    b.Navigation("PartyStatuses");

                    b.Navigation("PicklistRoleCreatedByUserLoginNavigations");

                    b.Navigation("PicklistRoleLastModifiedByUserLoginNavigations");

                    b.Navigation("PicklistStatusHistories");

                    b.Navigation("PicklistStatuses");

                    b.Navigation("ProductCreatedByUserLoginNavigations");

                    b.Navigation("ProductFeaturePriceCreatedByUserLoginNavigations");

                    b.Navigation("ProductFeaturePriceLastModifiedByUserLoginNavigations");

                    b.Navigation("ProductLastModifiedByUserLoginNavigations");

                    b.Navigation("ProductPriceChanges");

                    b.Navigation("ProductPriceCreatedByUserLoginNavigations");

                    b.Navigation("ProductPriceLastModifiedByUserLoginNavigations");

                    b.Navigation("ProductPromoCodeCreatedByUserLoginNavigations");

                    b.Navigation("ProductPromoCodeLastModifiedByUserLoginNavigations");

                    b.Navigation("ProductPromoCreatedByUserLoginNavigations");

                    b.Navigation("ProductPromoLastModifiedByUserLoginNavigations");

                    b.Navigation("ProductReviews");

                    b.Navigation("QuoteAdjustments");

                    b.Navigation("RequirementStatuses");

                    b.Navigation("ReturnAdjustments");

                    b.Navigation("ReturnStatuses");

                    b.Navigation("SalesForecastCreatedByUserLogins");

                    b.Navigation("SalesForecastHistories");

                    b.Navigation("SalesForecastModifiedByUserLogins");

                    b.Navigation("SalesOpportunities");

                    b.Navigation("SalesOpportunityHistories");

                    b.Navigation("ShipmentReceipts");

                    b.Navigation("ShipmentStatuses");

                    b.Navigation("TestingStatuses");

                    b.Navigation("Timesheets");

                    b.Navigation("UserLoginHistories");

                    b.Navigation("UserLoginPasswordHistories");

                    b.Navigation("UserLoginSecurityGroups");

                    b.Navigation("UserLoginSession")
                        .IsRequired();

                    b.Navigation("WebUserPreferences");

                    b.Navigation("WorkEffortPartyAssignments");

                    b.Navigation("WorkEffortReviews");

                    b.Navigation("WorkEffortStatuses");
                });

            modelBuilder.Entity("Domain.UserPrefGroupType", b =>
                {
                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("Domain.VarianceReason", b =>
                {
                    b.Navigation("InventoryItemVariances");

                    b.Navigation("VarianceReasonGlAccounts");
                });

            modelBuilder.Entity("Domain.Vehicle", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Quotes");

                    b.Navigation("VehicleAnnotations");

                    b.Navigation("VehicleContents");
                });

            modelBuilder.Entity("Domain.Visit", b =>
                {
                    b.Navigation("ServerHits");
                });

            modelBuilder.Entity("Domain.Visitor", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Domain.VisualTheme", b =>
                {
                    b.Navigation("VisualThemeResources");
                });

            modelBuilder.Entity("Domain.VisualThemeSet", b =>
                {
                    b.Navigation("VisualThemes");

                    b.Navigation("WebSites");
                });

            modelBuilder.Entity("Domain.WebAnalyticsType", b =>
                {
                    b.Navigation("InverseParentType");
                });

            modelBuilder.Entity("Domain.WebPreferenceType", b =>
                {
                    b.Navigation("WebUserPreferences");
                });

            modelBuilder.Entity("Domain.WebSite", b =>
                {
                    b.Navigation("OrderHeaders");

                    b.Navigation("SubscriptionResources");

                    b.Navigation("WebPages");

                    b.Navigation("WebSiteContactLists");

                    b.Navigation("WebSiteContents");

                    b.Navigation("WebSitePathAliases");

                    b.Navigation("WebSiteRoles");
                });

            modelBuilder.Entity("Domain.WebSiteContentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("WebSiteContents");
                });

            modelBuilder.Entity("Domain.WorkEffort", b =>
                {
                    b.Navigation("AcctgTrans");

                    b.Navigation("AgreementWorkEffortApplics");

                    b.Navigation("CommunicationEventWorkEffs");

                    b.Navigation("CostComponents");

                    b.Navigation("CustRequestItemWorkEfforts");

                    b.Navigation("CustRequestWorkEfforts");

                    b.Navigation("FixedAssetMaints");

                    b.Navigation("InventoryItemDetails");

                    b.Navigation("InverseWorkEffortParent");

                    b.Navigation("OrderHeaderWorkEfforts");

                    b.Navigation("PersonTrainings");

                    b.Navigation("ProductAssocs");

                    b.Navigation("ProductMaints");

                    b.Navigation("QuoteItems");

                    b.Navigation("QuoteWorkEfforts");

                    b.Navigation("RateAmounts");

                    b.Navigation("SalesOpportunityWorkEfforts");

                    b.Navigation("ShipmentEstimatedArrivalWorkEffs");

                    b.Navigation("ShipmentEstimatedShipWorkEffs");

                    b.Navigation("ShoppingListWorkEfforts");

                    b.Navigation("TimeEntries");

                    b.Navigation("WorkEffortAssocWorkEffortIdFromNavigations");

                    b.Navigation("WorkEffortAssocWorkEffortIdToNavigations");

                    b.Navigation("WorkEffortAttributes");

                    b.Navigation("WorkEffortBillings");

                    b.Navigation("WorkEffortContactMechNews");

                    b.Navigation("WorkEffortContents");

                    b.Navigation("WorkEffortCostCalcs");

                    b.Navigation("WorkEffortDeliverableProds");

                    b.Navigation("WorkEffortEventReminders");

                    b.Navigation("WorkEffortFixedAssetAssigns");

                    b.Navigation("WorkEffortFixedAssetStds");

                    b.Navigation("WorkEffortGoodStandards");

                    b.Navigation("WorkEffortIcalDatum")
                        .IsRequired();

                    b.Navigation("WorkEffortInventoryAssigns");

                    b.Navigation("WorkEffortInventoryProduceds");

                    b.Navigation("WorkEffortKeywords");

                    b.Navigation("WorkEffortNotes");

                    b.Navigation("WorkEffortPartyAssignments");

                    b.Navigation("WorkEffortReviews");

                    b.Navigation("WorkEffortSkillStandards");

                    b.Navigation("WorkEffortStatuses");

                    b.Navigation("WorkEffortSurveyAppls");

                    b.Navigation("WorkEffortTransBoxes");

                    b.Navigation("WorkOrderItemFulfillments");

                    b.Navigation("WorkRequirementFulfillments");
                });

            modelBuilder.Entity("Domain.WorkEffortAssoc", b =>
                {
                    b.Navigation("WorkEffortAssocAttributes");
                });

            modelBuilder.Entity("Domain.WorkEffortAssocType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("WorkEffortAssocTypeAttrs");

                    b.Navigation("WorkEffortAssocs");
                });

            modelBuilder.Entity("Domain.WorkEffortContentType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("WorkEffortContents");
                });

            modelBuilder.Entity("Domain.WorkEffortGoodStandardType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("WorkEffortGoodStandards");
                });

            modelBuilder.Entity("Domain.WorkEffortPartyAssignment", b =>
                {
                    b.Navigation("ApplicationSandboxes");
                });

            modelBuilder.Entity("Domain.WorkEffortPurposeType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.WorkEffortSearchResult", b =>
                {
                    b.Navigation("WorkEffortSearchConstraints");
                });

            modelBuilder.Entity("Domain.WorkEffortType", b =>
                {
                    b.Navigation("InverseParentType");

                    b.Navigation("WorkEffortTypeAttrs");

                    b.Navigation("WorkEfforts");
                });

            modelBuilder.Entity("Domain.WorkReqFulfType", b =>
                {
                    b.Navigation("WorkRequirementFulfillments");
                });
#pragma warning restore 612, 618
        }
    }
}
